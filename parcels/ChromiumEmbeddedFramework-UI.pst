<?xml version="1.0"?>

<st-source>
<!-- Chromium Embedded Framework (CEF) for VisualWorks.
Displays a browser inside a VW view.

See 
https://bitbucket.org/chromiumembedded/cef

Still at an very early stage. 
Windows only.

Open an examle app with:
  CEF.BrowserUI open

Based on CEF 3.3112.1659.gfef43e0 (2017-09-06)

Contact: h . kleinsorgen - at - gmail . com
Github repo: https://github.com/hkleinsorgen/VW-ChromiumEmbeddedFramework

Licensed under the MIT license (see Copyright) -->


<class>
<name>Base</name>
<environment>CEF</environment>
<super>Core.Object</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>externals callbacks isVolatile </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>ChromiumEmbeddedFramework-UI</package>
</attributes>
</class>

<comment>
<class-id>CEF.Base</class-id>
<body>Base class for CEF wrappers</body>
</comment>

<class>
<name>ResourceHandler</name>
<environment>CEF</environment>
<super>CEF.Base</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>resourceStream buffer statusCode </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>ChromiumEmbeddedFramework-UI</package>
</attributes>
</class>

<class>
<name>LifecycleBase</name>
<environment>CEF</environment>
<super>CEF.Base</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>lifecycle </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>ChromiumEmbeddedFramework-UI</package>
</attributes>
</class>

<class>
<name>Browser</name>
<environment>CEF</environment>
<super>CEF.LifecycleBase</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>client </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>ChromiumEmbeddedFramework-UI</package>
</attributes>
</class>

<comment>
<class-id>CEF.Browser</class-id>
<body>Browser wrapper</body>
</comment>

<class>
<name>Request</name>
<environment>CEF</environment>
<super>CEF.Base</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars></inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>ChromiumEmbeddedFramework-UI</package>
</attributes>
</class>

<class>
<name>BrowserPart</name>
<environment>CEF</environment>
<super>Graphics.VisualPart</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars></inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>ChromiumEmbeddedFramework-UI</package>
</attributes>
</class>

<comment>
<class-id>CEF.BrowserPart</class-id>
<body>The area covered by the browser. The only purpose of this view is to trigger events.</body>
</comment>

<class>
<name>SchemeRegistrar</name>
<environment>CEF</environment>
<super>CEF.Base</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars></inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>ChromiumEmbeddedFramework-UI</package>
</attributes>
</class>

<class>
<name>MainMessageLoop</name>
<environment>CEF</environment>
<super>Core.Object</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>messageProcess loopSemaphore minimalDelay scheduledWork scheduleLock </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>ChromiumEmbeddedFramework-UI</package>
</attributes>
</class>

<class>
<name>Log</name>
<environment>CEF</environment>
<super>Core.Object</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>logProcess logQueue debug </inst-vars>
<class-inst-vars>current </class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>ChromiumEmbeddedFramework-UI</package>
</attributes>
</class>

<class>
<name>MainApp</name>
<environment>CEF</environment>
<super>CEF.LifecycleBase</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>messageLoop </inst-vars>
<class-inst-vars>current </class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>ChromiumEmbeddedFramework-UI</package>
</attributes>
</class>

<comment>
<class-id>CEF.MainApp</class-id>
<body>Wraps the main application. This is a singleton which can only be initialized once per OS process.</body>
</comment>

<class>
<name>Settings</name>
<environment>CEF</environment>
<super>CEF.Base</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars></inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>ChromiumEmbeddedFramework-UI</package>
</attributes>
</class>

<class>
<name>Frame</name>
<environment>CEF</environment>
<super>CEF.Base</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars></inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>ChromiumEmbeddedFramework-UI</package>
</attributes>
</class>

<comment>
<class-id>CEF.Frame</class-id>
<body>Wraps a frame of a browser.</body>
</comment>

<class>
<name>BrowserSettings</name>
<environment>CEF</environment>
<super>CEF.Base</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars></inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>ChromiumEmbeddedFramework-UI</package>
</attributes>
</class>

<class>
<name>BrowserHost</name>
<environment>CEF</environment>
<super>CEF.Base</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars></inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>ChromiumEmbeddedFramework-UI</package>
</attributes>
</class>

<class>
<name>ScheduledWork</name>
<environment>CEF</environment>
<super>Core.Object</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>targetTime delay timer isScheduled </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>ChromiumEmbeddedFramework-UI</package>
</attributes>
</class>

<class>
<name>PumpWork</name>
<environment>CEF</environment>
<super>CEF.ScheduledWork</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars></inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>ChromiumEmbeddedFramework-UI</package>
</attributes>
</class>

<class>
<name>ResizeWork</name>
<environment>CEF</environment>
<super>CEF.ScheduledWork</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>browser </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>ChromiumEmbeddedFramework-UI</package>
</attributes>
</class>

<class>
<name>SchemeHandlerFactory</name>
<environment>CEF</environment>
<super>CEF.Base</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>resourceHandlers </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>ChromiumEmbeddedFramework-UI</package>
</attributes>
</class>

<class>
<name>Callback</name>
<environment>CEF</environment>
<super>CEF.Base</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars></inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>ChromiumEmbeddedFramework-UI</package>
</attributes>
</class>

<class>
<name>Client</name>
<environment>CEF</environment>
<super>CEF.LifecycleBase</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>areaPart createdBrowser </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>ChromiumEmbeddedFramework-UI</package>
</attributes>
</class>

<class>
<name>Response</name>
<environment>CEF</environment>
<super>CEF.Base</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars></inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>ChromiumEmbeddedFramework-UI</package>
</attributes>
</class>

<shared-variable>
<name>Registry</name>
<environment>CEF.Base</environment>
<private>false</private>
<constant>false</constant>
<category>accessing</category>
<initializer>nil</initializer>
<attributes>
<package>ChromiumEmbeddedFramework-UI</package>
</attributes>
</shared-variable>

<methods>
<class-id>CEF.Base class</class-id> <category>pragmas</category>

<body package="ChromiumEmbeddedFramework-UI">callbackPragmas	&lt;pragmas: #instance&gt;		^ #(		callback:		callback:handler:	)</body>

<body package="ChromiumEmbeddedFramework-UI">cefApiPragmas	&lt;pragmas: #instance&gt;		^ Array with: self apiPragma with: self typePragma</body>
</methods>

<methods>
<class-id>CEF.ResourceHandler</class-id> <category>events</category>

<body package="ChromiumEmbeddedFramework-UI">canGetCookie: cookie	&lt;callback: #'can_get_cookie'&gt;		^ true</body>

<body package="ChromiumEmbeddedFramework-UI">canSetCookie: cookie	&lt;callback: #'can_set_cookie'&gt;		^ true</body>

<body package="ChromiumEmbeddedFramework-UI">cancel	&lt;callback: #'cancel'&gt;		self factory finishedHandler: self</body>

<body package="ChromiumEmbeddedFramework-UI">getResponseHeaders: response length: responseLength redirectUrl: redirectUrl 	&lt;callback: #'get_response_headers'&gt;		responseLength contents: -1.	response setStatus: self statusCode.	response setMimeType: self mimeType.</body>

<body package="ChromiumEmbeddedFramework-UI">processRequest: request callback: callback	&lt;callback: #'process_request'&gt;		callback cont.	^ true</body>

<body package="ChromiumEmbeddedFramework-UI">readResponse: dataOut bytesToRead: bytesToRead bytesRead: bytesRead callback: callback 	&lt;callback: #'read_response' &gt;		| length |	buffer isNil 		ifTrue: [ buffer := ByteArray new: bytesToRead ].	[	resourceStream read: bytesToRead into: buffer at: 1.		length := buffer size	] on: Xtreams.Incomplete do: [: ex | length := ex count ].	dataOut copyAt: 0 from: buffer size: length startingAt: 1.	bytesRead contents: length.	" return true even if the stream is at end "	^ length &gt; 0 		ifTrue: [ true ]		ifFalse: 		[	self factory finishedHandler: self.			false		]</body>
</methods>

<methods>
<class-id>CEF.Browser</class-id> <category>accessing-API</category>

<body package="ChromiumEmbeddedFramework-UI">canGoBack	&lt;api: #can_go_back&gt;	&lt;type: 'int'&gt;	^ self call: #can_go_back</body>

<body package="ChromiumEmbeddedFramework-UI">canGoForward	&lt;api: #can_go_forward&gt;	&lt;type: 'int'&gt;	^ self call: #can_go_forward</body>

<body package="ChromiumEmbeddedFramework-UI">focusedFrame	&lt;api: #get_focused_frame&gt;	&lt;type: 'struct _cef_frame_t *'&gt;	^ self call: #get_focused_frame</body>

<body package="ChromiumEmbeddedFramework-UI">frameCount	&lt;api: #get_frame_count&gt;	&lt;type: 'size_t'&gt;	^ self call: #get_frame_count</body>

<body package="ChromiumEmbeddedFramework-UI">getFrame: name	&lt;api: #get_frame&gt;	&lt;type: 'struct _cef_frame_t *'&gt;	^ self call: #get_frame with: name</body>

<body package="ChromiumEmbeddedFramework-UI">getFrameByident: identifier	&lt;api: #get_frame_byident&gt;	&lt;type: 'struct _cef_frame_t *'&gt;	^ self call: #get_frame_byident with: identifier</body>

<body package="ChromiumEmbeddedFramework-UI">getFrameIdentifiers: identifiersCount identifiers: identifiers	&lt;api: #get_frame_identifiers&gt;	&lt;type: 'void'&gt;	^ self call: #get_frame_identifiers with: identifiersCount with: identifiers</body>

<body package="ChromiumEmbeddedFramework-UI">getFrameNames: names	&lt;api: #get_frame_names&gt;	&lt;type: 'void'&gt;	^ self call: #get_frame_names with: names</body>

<body package="ChromiumEmbeddedFramework-UI">goBack	&lt;api: #go_back&gt;	&lt;type: 'void'&gt;	^ self call: #go_back</body>

<body package="ChromiumEmbeddedFramework-UI">goForward	&lt;api: #go_forward&gt;	&lt;type: 'void'&gt;	^ self call: #go_forward</body>

<body package="ChromiumEmbeddedFramework-UI">hasDocument	&lt;api: #has_document&gt;	&lt;type: 'int'&gt;	^ (self call: #has_document) cefAsBoolean</body>

<body package="ChromiumEmbeddedFramework-UI">host	&lt;api: #get_host&gt;	&lt;type: 'struct _cef_browser_host_t *'&gt;	^ self call: #get_host</body>

<body package="ChromiumEmbeddedFramework-UI">identifier	&lt;api: #get_identifier&gt;	&lt;type: 'int'&gt;	^ self call: #get_identifier</body>

<body package="ChromiumEmbeddedFramework-UI">isLoading	&lt;api: #is_loading&gt;	&lt;type: 'int'&gt;	^ (self call: #is_loading) cefAsBoolean</body>

<body package="ChromiumEmbeddedFramework-UI">isPopup	&lt;api: #is_popup&gt;	&lt;type: 'int'&gt;	^ (self call: #is_popup) cefAsBoolean</body>

<body package="ChromiumEmbeddedFramework-UI">isSame: that	&lt;api: #is_same&gt;	&lt;type: 'int'&gt;	^ (self call: #is_same with: that) cefAsBoolean</body>

<body package="ChromiumEmbeddedFramework-UI">mainFrame	&lt;api: #get_main_frame&gt;	&lt;type: 'struct _cef_frame_t *'&gt;	^ self call: #get_main_frame</body>

<body package="ChromiumEmbeddedFramework-UI">reload	&lt;api: #reload&gt;	&lt;type: 'void'&gt;	^ self call: #reload</body>

<body package="ChromiumEmbeddedFramework-UI">reloadIgnoreCache	&lt;api: #reload_ignore_cache&gt;	&lt;type: 'void'&gt;	^ self call: #reload_ignore_cache</body>

<body package="ChromiumEmbeddedFramework-UI">sendProcessMessage: targetProcess message: message	&lt;api: #send_process_message&gt;	&lt;type: 'int'&gt;	^ self call: #send_process_message with: targetProcess with: message</body>

<body package="ChromiumEmbeddedFramework-UI">stopLoad	&lt;api: #stop_load&gt;	&lt;type: 'void'&gt;	^ self call: #stop_load</body>
</methods>

<methods>
<class-id>CEF.Request</class-id> <category>accessing-API</category>

<body package="ChromiumEmbeddedFramework-UI">firstPartyForCookies	&lt;api: #get_first_party_for_cookies&gt;	&lt;type: 'cef_string_userfree_t'&gt;	^ self call: #get_first_party_for_cookies</body>

<body package="ChromiumEmbeddedFramework-UI">flags	&lt;api: #get_flags&gt;	&lt;type: 'int'&gt;	^ self call: #get_flags</body>

<body package="ChromiumEmbeddedFramework-UI">getHeaderMap: headerMap	&lt;api: #get_header_map&gt;	&lt;type: 'void'&gt;	^ self call: #get_header_map with: headerMap</body>

<body package="ChromiumEmbeddedFramework-UI">identifier	&lt;api: #get_identifier&gt;	&lt;type: 'uint64'&gt;	^ self call: #get_identifier</body>

<body package="ChromiumEmbeddedFramework-UI">isReadOnly	&lt;api: #is_read_only&gt;	&lt;type: 'int'&gt;	^ (self call: #is_read_only) cefAsBoolean</body>

<body package="ChromiumEmbeddedFramework-UI">method	&lt;api: #get_method&gt;	&lt;type: 'cef_string_userfree_t'&gt;	^ self call: #get_method</body>

<body package="ChromiumEmbeddedFramework-UI">postData	&lt;api: #get_post_data&gt;	&lt;type: 'struct _cef_post_data_t *'&gt;	^ self call: #get_post_data</body>

<body package="ChromiumEmbeddedFramework-UI">referrerPolicy	&lt;api: #get_referrer_policy&gt;	&lt;type: 'cef_referrer_policy_t'&gt;	^ self call: #get_referrer_policy</body>

<body package="ChromiumEmbeddedFramework-UI">referrerUrl	&lt;api: #get_referrer_url&gt;	&lt;type: 'cef_string_userfree_t'&gt;	^ self call: #get_referrer_url</body>

<body package="ChromiumEmbeddedFramework-UI">resourceType	&lt;api: #get_resource_type&gt;	&lt;type: 'cef_resource_type_t'&gt;	^ self call: #get_resource_type</body>

<body package="ChromiumEmbeddedFramework-UI">set: url method: method postData: postData headerMap: headerMap	&lt;api: #set&gt;	&lt;type: 'void'&gt;	^ self call: #set arguments: (OrderedCollection new add: url; add: method; add: postData; add: headerMap; yourself)</body>

<body package="ChromiumEmbeddedFramework-UI">setFirstPartyForCookies: url	&lt;api: #set_first_party_for_cookies&gt;	&lt;type: 'void'&gt;	^ self call: #set_first_party_for_cookies with: url</body>

<body package="ChromiumEmbeddedFramework-UI">setFlags: flags	&lt;api: #set_flags&gt;	&lt;type: 'void'&gt;	^ self call: #set_flags with: flags</body>

<body package="ChromiumEmbeddedFramework-UI">setHeaderMap: headerMap	&lt;api: #set_header_map&gt;	&lt;type: 'void'&gt;	^ self call: #set_header_map with: headerMap</body>

<body package="ChromiumEmbeddedFramework-UI">setMethod: method	&lt;api: #set_method&gt;	&lt;type: 'void'&gt;	^ self call: #set_method with: method</body>

<body package="ChromiumEmbeddedFramework-UI">setPostData: postData	&lt;api: #set_post_data&gt;	&lt;type: 'void'&gt;	^ self call: #set_post_data with: postData</body>

<body package="ChromiumEmbeddedFramework-UI">setReferrer: referrerUrl policy: policy	&lt;api: #set_referrer&gt;	&lt;type: 'void'&gt;	^ self call: #set_referrer with: referrerUrl with: policy</body>

<body package="ChromiumEmbeddedFramework-UI">setUrl: url	&lt;api: #set_url&gt;	&lt;type: 'void'&gt;	^ self call: #set_url with: url</body>

<body package="ChromiumEmbeddedFramework-UI">transitionType	&lt;api: #get_transition_type&gt;	&lt;type: 'cef_transition_type_t'&gt;	^ self call: #get_transition_type</body>

<body package="ChromiumEmbeddedFramework-UI">url	&lt;api: #get_url&gt;	&lt;type: 'cef_string_userfree_t'&gt;	^ self call: #get_url</body>
</methods>

<methods>
<class-id>CEF.SchemeRegistrar</class-id> <category>accessing-API</category>

<body package="ChromiumEmbeddedFramework-UI">addCustomScheme: schemeName isStandard: isStandard isLocal: isLocal isDisplayIsolated: isDisplayIsolated isSecure: isSecure isCorsEnabled: isCorsEnabled isCspBypassing: isCspBypassing	&lt;api: #add_custom_scheme&gt;	&lt;type: 'int'&gt;	^ self call: #add_custom_scheme arguments: (OrderedCollection new add: schemeName; add: isStandard; add: isLocal; add: isDisplayIsolated; add: isSecure; add: isCorsEnabled; add: isCspBypassing; yourself)</body>
</methods>

<methods>
<class-id>CEF.MainApp</class-id> <category>events-app</category>

<body package="ChromiumEmbeddedFramework-UI">onBeforeCommandLineProcessing: process_type commandLine: commandLine	&lt;callback: #on_before_command_line_processing&gt; 	self switches do: [: switch | commandLine cefCall: #'append_switch' with: switch ].</body>

<body package="ChromiumEmbeddedFramework-UI">onRegisterCustomSchemes: schemeRegistrar 	&lt;callback: #on_register_custom_schemes&gt;		ResourceHandler allSchemeHandlerClasses do: [ : handlerClass |		schemeRegistrar addCustomScheme: handlerClass schemeName flags: handlerClass schemeFlags.	].</body>
</methods>

<methods>
<class-id>CEF.MainApp</class-id> <category>events-browser process handler</category>

<body package="ChromiumEmbeddedFramework-UI">onContextInitialized	&lt;callback: #on_context_initialized handler: #get_browser_process_handler&gt;		ResourceHandler allSchemeHandlerClasses do: 		[: handlerClass | | ok |			ok := self lib 					cef_register_scheme_handler_factory: handlerClass schemeName asCefDatum					with: '' asCefDatum					with: self schemeHandlerFactory cefObject.			ok cefAsBoolean 				ifFalse: [ self error: 'Scheme handler factory could not be registered' ]		].</body>

<body package="ChromiumEmbeddedFramework-UI">onScheduleMessagePumpWork: delay	&lt;callback: #on_schedule_message_pump_work handler: #get_browser_process_handler&gt;		self schedule: ( PumpWork delay: delay ).</body>
</methods>

<methods>
<class-id>CEF.Settings</class-id> <category>accessing-API</category>

<body package="ChromiumEmbeddedFramework-UI">acceptLanguageList	&lt;api: #accept_language_list&gt;	&lt;type: 'cef_string_t'&gt;	^ self memberAt: #accept_language_list</body>

<body package="ChromiumEmbeddedFramework-UI">acceptLanguageList: aString	&lt;api: #accept_language_list&gt;	&lt;type: 'cef_string_t'&gt;	self memberAt: #accept_language_list put: aString</body>

<body package="ChromiumEmbeddedFramework-UI">backgroundColor	&lt;api: #background_color&gt;	&lt;type: 'cef_color_t'&gt;	^ self memberAt: #background_color</body>

<body package="ChromiumEmbeddedFramework-UI">backgroundColor: cef_color_t	&lt;api: #background_color&gt;	&lt;type: 'cef_color_t'&gt;	self memberAt: #background_color put: cef_color_t</body>

<body package="ChromiumEmbeddedFramework-UI">browserSubprocessPath	&lt;api: #browser_subprocess_path&gt;	&lt;type: 'cef_string_t'&gt;	^ self memberAt: #browser_subprocess_path</body>

<body package="ChromiumEmbeddedFramework-UI">browserSubprocessPath: aString	&lt;api: #browser_subprocess_path&gt;	&lt;type: 'cef_string_t'&gt;	self memberAt: #browser_subprocess_path put: aString</body>

<body package="ChromiumEmbeddedFramework-UI">cachePath	&lt;api: #cache_path&gt;	&lt;type: 'cef_string_t'&gt;	^ self memberAt: #cache_path</body>

<body package="ChromiumEmbeddedFramework-UI">cachePath: aString	&lt;api: #cache_path&gt;	&lt;type: 'cef_string_t'&gt;	self memberAt: #cache_path put: aString</body>

<body package="ChromiumEmbeddedFramework-UI">commandLineArgsDisabled	&lt;api: #command_line_args_disabled&gt;	&lt;type: 'int'&gt;	^ self booleanAt: #command_line_args_disabled</body>

<body package="ChromiumEmbeddedFramework-UI">commandLineArgsDisabled: aBoolean	&lt;api: #command_line_args_disabled&gt;	&lt;type: 'int'&gt;	self memberAt: #command_line_args_disabled put: aBoolean</body>

<body package="ChromiumEmbeddedFramework-UI">enableNetSecurityExpiration	&lt;api: #enable_net_security_expiration&gt;	&lt;type: 'int'&gt;	^ self memberAt: #enable_net_security_expiration</body>

<body package="ChromiumEmbeddedFramework-UI">enableNetSecurityExpiration: int	&lt;api: #enable_net_security_expiration&gt;	&lt;type: 'int'&gt;	self memberAt: #enable_net_security_expiration put: int</body>

<body package="ChromiumEmbeddedFramework-UI">externalMessagePump	&lt;api: #external_message_pump&gt;	&lt;type: 'int'&gt;	^ self memberAt: #external_message_pump</body>

<body package="ChromiumEmbeddedFramework-UI">externalMessagePump: int	&lt;api: #external_message_pump&gt;	&lt;type: 'int'&gt;	self memberAt: #external_message_pump put: int</body>

<body package="ChromiumEmbeddedFramework-UI">frameworkDirPath	&lt;api: #framework_dir_path&gt;	&lt;type: 'cef_string_t'&gt;	^ self memberAt: #framework_dir_path</body>

<body package="ChromiumEmbeddedFramework-UI">frameworkDirPath: aString	&lt;api: #framework_dir_path&gt;	&lt;type: 'cef_string_t'&gt;	self memberAt: #framework_dir_path put: aString</body>

<body package="ChromiumEmbeddedFramework-UI">ignoreCertificateErrors	&lt;api: #ignore_certificate_errors&gt;	&lt;type: 'int'&gt;	^ self memberAt: #ignore_certificate_errors</body>

<body package="ChromiumEmbeddedFramework-UI">ignoreCertificateErrors: int	&lt;api: #ignore_certificate_errors&gt;	&lt;type: 'int'&gt;	self memberAt: #ignore_certificate_errors put: int</body>

<body package="ChromiumEmbeddedFramework-UI">javascriptFlags	&lt;api: #javascript_flags&gt;	&lt;type: 'cef_string_t'&gt;	^ self memberAt: #javascript_flags</body>

<body package="ChromiumEmbeddedFramework-UI">javascriptFlags: aString	&lt;api: #javascript_flags&gt;	&lt;type: 'cef_string_t'&gt;	self memberAt: #javascript_flags put: aString</body>

<body package="ChromiumEmbeddedFramework-UI">locale	&lt;api: #locale&gt;	&lt;type: 'cef_string_t'&gt;	^ self memberAt: #locale</body>

<body package="ChromiumEmbeddedFramework-UI">locale: aString	&lt;api: #locale&gt;	&lt;type: 'cef_string_t'&gt;	self memberAt: #locale put: aString</body>

<body package="ChromiumEmbeddedFramework-UI">localesDirPath	&lt;api: #locales_dir_path&gt;	&lt;type: 'cef_string_t'&gt;	^ self memberAt: #locales_dir_path</body>

<body package="ChromiumEmbeddedFramework-UI">localesDirPath: aString	&lt;api: #locales_dir_path&gt;	&lt;type: 'cef_string_t'&gt;	self memberAt: #locales_dir_path put: aString</body>

<body package="ChromiumEmbeddedFramework-UI">logFile	&lt;api: #log_file&gt;	&lt;type: 'cef_string_t'&gt;	^ self memberAt: #log_file</body>

<body package="ChromiumEmbeddedFramework-UI">logFile: aString	&lt;api: #log_file&gt;	&lt;type: 'cef_string_t'&gt;	self memberAt: #log_file put: aString</body>

<body package="ChromiumEmbeddedFramework-UI">logSeverity	&lt;api: #log_severity&gt;	&lt;type: 'cef_log_severity_t'&gt;	^ self enumAt: #log_severity</body>

<body package="ChromiumEmbeddedFramework-UI">logSeverity: aSymbol	&lt;api: #log_severity&gt;	&lt;type: 'cef_log_severity_t'&gt;	self enumAt: #log_severity put: aSymbol</body>

<body package="ChromiumEmbeddedFramework-UI">multiThreadedMessageLoop	&lt;api: #multi_threaded_message_loop&gt;	&lt;type: 'int'&gt;	^ self memberAt: #multi_threaded_message_loop</body>

<body package="ChromiumEmbeddedFramework-UI">multiThreadedMessageLoop: int	&lt;api: #multi_threaded_message_loop&gt;	&lt;type: 'int'&gt;	self memberAt: #multi_threaded_message_loop put: int</body>

<body package="ChromiumEmbeddedFramework-UI">noSandbox	&lt;api: #no_sandbox&gt;	&lt;type: 'int'&gt;	^ self memberAt: #no_sandbox</body>

<body package="ChromiumEmbeddedFramework-UI">noSandbox: int	&lt;api: #no_sandbox&gt;	&lt;type: 'int'&gt;	self memberAt: #no_sandbox put: int</body>

<body package="ChromiumEmbeddedFramework-UI">packLoadingDisabled	&lt;api: #pack_loading_disabled&gt;	&lt;type: 'int'&gt;	^ self booleanAt: #pack_loading_disabled</body>

<body package="ChromiumEmbeddedFramework-UI">packLoadingDisabled: aBoolean	&lt;api: #pack_loading_disabled&gt;	&lt;type: 'int'&gt;	self memberAt: #pack_loading_disabled put: aBoolean</body>

<body package="ChromiumEmbeddedFramework-UI">persistSessionCookies	&lt;api: #persist_session_cookies&gt;	&lt;type: 'int'&gt;	^ self memberAt: #persist_session_cookies</body>

<body package="ChromiumEmbeddedFramework-UI">persistSessionCookies: int	&lt;api: #persist_session_cookies&gt;	&lt;type: 'int'&gt;	self memberAt: #persist_session_cookies put: int</body>

<body package="ChromiumEmbeddedFramework-UI">persistUserPreferences	&lt;api: #persist_user_preferences&gt;	&lt;type: 'int'&gt;	^ self memberAt: #persist_user_preferences</body>

<body package="ChromiumEmbeddedFramework-UI">persistUserPreferences: int	&lt;api: #persist_user_preferences&gt;	&lt;type: 'int'&gt;	self memberAt: #persist_user_preferences put: int</body>

<body package="ChromiumEmbeddedFramework-UI">productVersion	&lt;api: #product_version&gt;	&lt;type: 'cef_string_t'&gt;	^ self memberAt: #product_version</body>

<body package="ChromiumEmbeddedFramework-UI">productVersion: aString	&lt;api: #product_version&gt;	&lt;type: 'cef_string_t'&gt;	self memberAt: #product_version put: aString</body>

<body package="ChromiumEmbeddedFramework-UI">remoteDebuggingPort	&lt;api: #remote_debugging_port&gt;	&lt;type: 'int'&gt;	^ self memberAt: #remote_debugging_port</body>

<body package="ChromiumEmbeddedFramework-UI">remoteDebuggingPort: int	&lt;api: #remote_debugging_port&gt;	&lt;type: 'int'&gt;	self memberAt: #remote_debugging_port put: int</body>

<body package="ChromiumEmbeddedFramework-UI">resourcesDirPath	&lt;api: #resources_dir_path&gt;	&lt;type: 'cef_string_t'&gt;	^ self memberAt: #resources_dir_path</body>

<body package="ChromiumEmbeddedFramework-UI">resourcesDirPath: aString	&lt;api: #resources_dir_path&gt;	&lt;type: 'cef_string_t'&gt;	self memberAt: #resources_dir_path put: aString</body>

<body package="ChromiumEmbeddedFramework-UI">singleProcess	&lt;api: #single_process&gt;	&lt;type: 'int'&gt;	^ self memberAt: #single_process</body>

<body package="ChromiumEmbeddedFramework-UI">singleProcess: int	&lt;api: #single_process&gt;	&lt;type: 'int'&gt;	self memberAt: #single_process put: int</body>

<body package="ChromiumEmbeddedFramework-UI">uncaughtExceptionStackSize	&lt;api: #uncaught_exception_stack_size&gt;	&lt;type: 'int'&gt;	^ self memberAt: #uncaught_exception_stack_size</body>

<body package="ChromiumEmbeddedFramework-UI">uncaughtExceptionStackSize: int	&lt;api: #uncaught_exception_stack_size&gt;	&lt;type: 'int'&gt;	self memberAt: #uncaught_exception_stack_size put: int</body>

<body package="ChromiumEmbeddedFramework-UI">userAgent	&lt;api: #user_agent&gt;	&lt;type: 'cef_string_t'&gt;	^ self memberAt: #user_agent</body>

<body package="ChromiumEmbeddedFramework-UI">userAgent: aString	&lt;api: #user_agent&gt;	&lt;type: 'cef_string_t'&gt;	self memberAt: #user_agent put: aString</body>

<body package="ChromiumEmbeddedFramework-UI">userDataPath	&lt;api: #user_data_path&gt;	&lt;type: 'cef_string_t'&gt;	^ self memberAt: #user_data_path</body>

<body package="ChromiumEmbeddedFramework-UI">userDataPath: aString	&lt;api: #user_data_path&gt;	&lt;type: 'cef_string_t'&gt;	self memberAt: #user_data_path put: aString</body>

<body package="ChromiumEmbeddedFramework-UI">windowlessRenderingEnabled	&lt;api: #windowless_rendering_enabled&gt;	&lt;type: 'int'&gt;	^ self booleanAt: #windowless_rendering_enabled</body>

<body package="ChromiumEmbeddedFramework-UI">windowlessRenderingEnabled: aBoolean	&lt;api: #windowless_rendering_enabled&gt;	&lt;type: 'int'&gt;	self memberAt: #windowless_rendering_enabled put: aBoolean</body>
</methods>

<methods>
<class-id>CEF.Frame</class-id> <category>accessing-API</category>

<body package="ChromiumEmbeddedFramework-UI">browser	&lt;api: #get_browser&gt;	&lt;type: 'struct _cef_browser_t *'&gt;	^ self call: #get_browser</body>

<body package="ChromiumEmbeddedFramework-UI">copy	&lt;api: #copy&gt;	&lt;type: 'void'&gt;	^ self call: #copy</body>

<body package="ChromiumEmbeddedFramework-UI">cut	&lt;api: #cut&gt;	&lt;type: 'void'&gt;	^ self call: #cut</body>

<body package="ChromiumEmbeddedFramework-UI">del	&lt;api: #del&gt;	&lt;type: 'void'&gt;	^ self call: #del</body>

<body package="ChromiumEmbeddedFramework-UI">executeJavaScript: code scriptUrl: scriptUrl startLine: startLine	&lt;api: #execute_java_script&gt;	&lt;type: 'void'&gt;	^ self call: #execute_java_script arguments: (OrderedCollection new add: code; add: scriptUrl; add: startLine; yourself)</body>

<body package="ChromiumEmbeddedFramework-UI">getSource: visitor	&lt;api: #get_source&gt;	&lt;type: 'void'&gt;	^ self call: #get_source with: visitor</body>

<body package="ChromiumEmbeddedFramework-UI">getText: visitor	&lt;api: #get_text&gt;	&lt;type: 'void'&gt;	^ self call: #get_text with: visitor</body>

<body package="ChromiumEmbeddedFramework-UI">identifier	&lt;api: #get_identifier&gt;	&lt;type: 'int64'&gt;	^ self call: #get_identifier</body>

<body package="ChromiumEmbeddedFramework-UI">isFocused	&lt;api: #is_focused&gt;	&lt;type: 'int'&gt;	^ (self call: #is_focused) cefAsBoolean</body>

<body package="ChromiumEmbeddedFramework-UI">isMain	&lt;api: #is_main&gt;	&lt;type: 'int'&gt;	^ (self call: #is_main) cefAsBoolean</body>

<body package="ChromiumEmbeddedFramework-UI">isValid	&lt;api: #is_valid&gt;	&lt;type: 'int'&gt;	^ (self call: #is_valid) cefAsBoolean</body>

<body package="ChromiumEmbeddedFramework-UI">loadRequest: request	&lt;api: #load_request&gt;	&lt;type: 'void'&gt;	^ self call: #load_request with: request</body>

<body package="ChromiumEmbeddedFramework-UI">loadString: stringVal url: url	&lt;api: #load_string&gt;	&lt;type: 'void'&gt;	^ self call: #load_string with: stringVal with: url</body>

<body package="ChromiumEmbeddedFramework-UI">loadUrl: url	&lt;api: #load_url&gt;	&lt;type: 'void'&gt;	^ self call: #load_url with: url</body>

<body package="ChromiumEmbeddedFramework-UI">name	&lt;api: #get_name&gt;	&lt;type: 'cef_string_userfree_t'&gt;	^ self call: #get_name</body>

<body package="ChromiumEmbeddedFramework-UI">parent	&lt;api: #get_parent&gt;	&lt;type: 'struct _cef_frame_t *'&gt;	^ self call: #get_parent</body>

<body package="ChromiumEmbeddedFramework-UI">paste	&lt;api: #paste&gt;	&lt;type: 'void'&gt;	^ self call: #paste</body>

<body package="ChromiumEmbeddedFramework-UI">redo	&lt;api: #redo&gt;	&lt;type: 'void'&gt;	^ self call: #redo</body>

<body package="ChromiumEmbeddedFramework-UI">selectAll	&lt;api: #select_all&gt;	&lt;type: 'void'&gt;	^ self call: #select_all</body>

<body package="ChromiumEmbeddedFramework-UI">undo	&lt;api: #undo&gt;	&lt;type: 'void'&gt;	^ self call: #undo</body>

<body package="ChromiumEmbeddedFramework-UI">url	&lt;api: #get_url&gt;	&lt;type: 'cef_string_userfree_t'&gt;	^ self call: #get_url</body>

<body package="ChromiumEmbeddedFramework-UI">v8context	&lt;api: #get_v8context&gt;	&lt;type: 'struct _cef_v8context_t *'&gt;	^ self call: #get_v8context</body>

<body package="ChromiumEmbeddedFramework-UI">viewSource	&lt;api: #view_source&gt;	&lt;type: 'void'&gt;	^ self call: #view_source</body>

<body package="ChromiumEmbeddedFramework-UI">visitDom: visitor	&lt;api: #visit_dom&gt;	&lt;type: 'void'&gt;	^ self call: #visit_dom with: visitor</body>
</methods>

<methods>
<class-id>CEF.BrowserSettings</class-id> <category>accessing-API</category>

<body package="ChromiumEmbeddedFramework-UI">acceptLanguageList	&lt;api: #accept_language_list&gt;	&lt;type: 'cef_string_t'&gt;	^ self memberAt: #accept_language_list</body>

<body package="ChromiumEmbeddedFramework-UI">acceptLanguageList: aString	&lt;api: #accept_language_list&gt;	&lt;type: 'cef_string_t'&gt;	self memberAt: #accept_language_list put: aString</body>

<body package="ChromiumEmbeddedFramework-UI">applicationCache	&lt;api: #application_cache&gt;	&lt;type: 'cef_state_t'&gt;	^ self enumAt: #application_cache</body>

<body package="ChromiumEmbeddedFramework-UI">applicationCache: aSymbol	&lt;api: #application_cache&gt;	&lt;type: 'cef_state_t'&gt;	self enumAt: #application_cache put: aSymbol</body>

<body package="ChromiumEmbeddedFramework-UI">backgroundColor	&lt;api: #background_color&gt;	&lt;type: 'cef_color_t'&gt;	^ self memberAt: #background_color</body>

<body package="ChromiumEmbeddedFramework-UI">backgroundColor: cef_color_t	&lt;api: #background_color&gt;	&lt;type: 'cef_color_t'&gt;	self memberAt: #background_color put: cef_color_t</body>

<body package="ChromiumEmbeddedFramework-UI">cursiveFontFamily	&lt;api: #cursive_font_family&gt;	&lt;type: 'cef_string_t'&gt;	^ self memberAt: #cursive_font_family</body>

<body package="ChromiumEmbeddedFramework-UI">cursiveFontFamily: aString	&lt;api: #cursive_font_family&gt;	&lt;type: 'cef_string_t'&gt;	self memberAt: #cursive_font_family put: aString</body>

<body package="ChromiumEmbeddedFramework-UI">databases	&lt;api: #databases&gt;	&lt;type: 'cef_state_t'&gt;	^ self enumAt: #databases</body>

<body package="ChromiumEmbeddedFramework-UI">databases: aSymbol	&lt;api: #databases&gt;	&lt;type: 'cef_state_t'&gt;	self enumAt: #databases put: aSymbol</body>

<body package="ChromiumEmbeddedFramework-UI">defaultEncoding	&lt;api: #default_encoding&gt;	&lt;type: 'cef_string_t'&gt;	^ self memberAt: #default_encoding</body>

<body package="ChromiumEmbeddedFramework-UI">defaultEncoding: aString	&lt;api: #default_encoding&gt;	&lt;type: 'cef_string_t'&gt;	self memberAt: #default_encoding put: aString</body>

<body package="ChromiumEmbeddedFramework-UI">defaultFixedFontSize	&lt;api: #default_fixed_font_size&gt;	&lt;type: 'int'&gt;	^ self memberAt: #default_fixed_font_size</body>

<body package="ChromiumEmbeddedFramework-UI">defaultFixedFontSize: int	&lt;api: #default_fixed_font_size&gt;	&lt;type: 'int'&gt;	self memberAt: #default_fixed_font_size put: int</body>

<body package="ChromiumEmbeddedFramework-UI">defaultFontSize	&lt;api: #default_font_size&gt;	&lt;type: 'int'&gt;	^ self memberAt: #default_font_size</body>

<body package="ChromiumEmbeddedFramework-UI">defaultFontSize: int	&lt;api: #default_font_size&gt;	&lt;type: 'int'&gt;	self memberAt: #default_font_size put: int</body>

<body package="ChromiumEmbeddedFramework-UI">fantasyFontFamily	&lt;api: #fantasy_font_family&gt;	&lt;type: 'cef_string_t'&gt;	^ self memberAt: #fantasy_font_family</body>

<body package="ChromiumEmbeddedFramework-UI">fantasyFontFamily: aString	&lt;api: #fantasy_font_family&gt;	&lt;type: 'cef_string_t'&gt;	self memberAt: #fantasy_font_family put: aString</body>

<body package="ChromiumEmbeddedFramework-UI">fileAccessFromFileUrls	&lt;api: #file_access_from_file_urls&gt;	&lt;type: 'cef_state_t'&gt;	^ self enumAt: #file_access_from_file_urls</body>

<body package="ChromiumEmbeddedFramework-UI">fileAccessFromFileUrls: aSymbol	&lt;api: #file_access_from_file_urls&gt;	&lt;type: 'cef_state_t'&gt;	self enumAt: #file_access_from_file_urls put: aSymbol</body>

<body package="ChromiumEmbeddedFramework-UI">fixedFontFamily	&lt;api: #fixed_font_family&gt;	&lt;type: 'cef_string_t'&gt;	^ self memberAt: #fixed_font_family</body>

<body package="ChromiumEmbeddedFramework-UI">fixedFontFamily: aString	&lt;api: #fixed_font_family&gt;	&lt;type: 'cef_string_t'&gt;	self memberAt: #fixed_font_family put: aString</body>

<body package="ChromiumEmbeddedFramework-UI">imageLoading	&lt;api: #image_loading&gt;	&lt;type: 'cef_state_t'&gt;	^ self enumAt: #image_loading</body>

<body package="ChromiumEmbeddedFramework-UI">imageLoading: aSymbol	&lt;api: #image_loading&gt;	&lt;type: 'cef_state_t'&gt;	self enumAt: #image_loading put: aSymbol</body>

<body package="ChromiumEmbeddedFramework-UI">imageShrinkStandaloneToFit	&lt;api: #image_shrink_standalone_to_fit&gt;	&lt;type: 'cef_state_t'&gt;	^ self enumAt: #image_shrink_standalone_to_fit</body>

<body package="ChromiumEmbeddedFramework-UI">imageShrinkStandaloneToFit: aSymbol	&lt;api: #image_shrink_standalone_to_fit&gt;	&lt;type: 'cef_state_t'&gt;	self enumAt: #image_shrink_standalone_to_fit put: aSymbol</body>

<body package="ChromiumEmbeddedFramework-UI">javascript	&lt;api: #javascript&gt;	&lt;type: 'cef_state_t'&gt;	^ self enumAt: #javascript</body>

<body package="ChromiumEmbeddedFramework-UI">javascript: aSymbol	&lt;api: #javascript&gt;	&lt;type: 'cef_state_t'&gt;	self enumAt: #javascript put: aSymbol</body>

<body package="ChromiumEmbeddedFramework-UI">javascriptAccessClipboard	&lt;api: #javascript_access_clipboard&gt;	&lt;type: 'cef_state_t'&gt;	^ self enumAt: #javascript_access_clipboard</body>

<body package="ChromiumEmbeddedFramework-UI">javascriptAccessClipboard: aSymbol	&lt;api: #javascript_access_clipboard&gt;	&lt;type: 'cef_state_t'&gt;	self enumAt: #javascript_access_clipboard put: aSymbol</body>

<body package="ChromiumEmbeddedFramework-UI">javascriptCloseWindows	&lt;api: #javascript_close_windows&gt;	&lt;type: 'cef_state_t'&gt;	^ self enumAt: #javascript_close_windows</body>

<body package="ChromiumEmbeddedFramework-UI">javascriptCloseWindows: aSymbol	&lt;api: #javascript_close_windows&gt;	&lt;type: 'cef_state_t'&gt;	self enumAt: #javascript_close_windows put: aSymbol</body>

<body package="ChromiumEmbeddedFramework-UI">javascriptDomPaste	&lt;api: #javascript_dom_paste&gt;	&lt;type: 'cef_state_t'&gt;	^ self enumAt: #javascript_dom_paste</body>

<body package="ChromiumEmbeddedFramework-UI">javascriptDomPaste: aSymbol	&lt;api: #javascript_dom_paste&gt;	&lt;type: 'cef_state_t'&gt;	self enumAt: #javascript_dom_paste put: aSymbol</body>

<body package="ChromiumEmbeddedFramework-UI">localStorage	&lt;api: #local_storage&gt;	&lt;type: 'cef_state_t'&gt;	^ self enumAt: #local_storage</body>

<body package="ChromiumEmbeddedFramework-UI">localStorage: aSymbol	&lt;api: #local_storage&gt;	&lt;type: 'cef_state_t'&gt;	self enumAt: #local_storage put: aSymbol</body>

<body package="ChromiumEmbeddedFramework-UI">minimumFontSize	&lt;api: #minimum_font_size&gt;	&lt;type: 'int'&gt;	^ self memberAt: #minimum_font_size</body>

<body package="ChromiumEmbeddedFramework-UI">minimumFontSize: int	&lt;api: #minimum_font_size&gt;	&lt;type: 'int'&gt;	self memberAt: #minimum_font_size put: int</body>

<body package="ChromiumEmbeddedFramework-UI">minimumLogicalFontSize	&lt;api: #minimum_logical_font_size&gt;	&lt;type: 'int'&gt;	^ self memberAt: #minimum_logical_font_size</body>

<body package="ChromiumEmbeddedFramework-UI">minimumLogicalFontSize: int	&lt;api: #minimum_logical_font_size&gt;	&lt;type: 'int'&gt;	self memberAt: #minimum_logical_font_size put: int</body>

<body package="ChromiumEmbeddedFramework-UI">plugins	&lt;api: #plugins&gt;	&lt;type: 'cef_state_t'&gt;	^ self enumAt: #plugins</body>

<body package="ChromiumEmbeddedFramework-UI">plugins: aSymbol	&lt;api: #plugins&gt;	&lt;type: 'cef_state_t'&gt;	self enumAt: #plugins put: aSymbol</body>

<body package="ChromiumEmbeddedFramework-UI">remoteFonts	&lt;api: #remote_fonts&gt;	&lt;type: 'cef_state_t'&gt;	^ self enumAt: #remote_fonts</body>

<body package="ChromiumEmbeddedFramework-UI">remoteFonts: aSymbol	&lt;api: #remote_fonts&gt;	&lt;type: 'cef_state_t'&gt;	self enumAt: #remote_fonts put: aSymbol</body>

<body package="ChromiumEmbeddedFramework-UI">sansSerifFontFamily	&lt;api: #sans_serif_font_family&gt;	&lt;type: 'cef_string_t'&gt;	^ self memberAt: #sans_serif_font_family</body>

<body package="ChromiumEmbeddedFramework-UI">sansSerifFontFamily: aString	&lt;api: #sans_serif_font_family&gt;	&lt;type: 'cef_string_t'&gt;	self memberAt: #sans_serif_font_family put: aString</body>

<body package="ChromiumEmbeddedFramework-UI">serifFontFamily	&lt;api: #serif_font_family&gt;	&lt;type: 'cef_string_t'&gt;	^ self memberAt: #serif_font_family</body>

<body package="ChromiumEmbeddedFramework-UI">serifFontFamily: aString	&lt;api: #serif_font_family&gt;	&lt;type: 'cef_string_t'&gt;	self memberAt: #serif_font_family put: aString</body>

<body package="ChromiumEmbeddedFramework-UI">standardFontFamily	&lt;api: #standard_font_family&gt;	&lt;type: 'cef_string_t'&gt;	^ self memberAt: #standard_font_family</body>

<body package="ChromiumEmbeddedFramework-UI">standardFontFamily: aString	&lt;api: #standard_font_family&gt;	&lt;type: 'cef_string_t'&gt;	self memberAt: #standard_font_family put: aString</body>

<body package="ChromiumEmbeddedFramework-UI">tabToLinks	&lt;api: #tab_to_links&gt;	&lt;type: 'cef_state_t'&gt;	^ self enumAt: #tab_to_links</body>

<body package="ChromiumEmbeddedFramework-UI">tabToLinks: aSymbol	&lt;api: #tab_to_links&gt;	&lt;type: 'cef_state_t'&gt;	self enumAt: #tab_to_links put: aSymbol</body>

<body package="ChromiumEmbeddedFramework-UI">textAreaResize	&lt;api: #text_area_resize&gt;	&lt;type: 'cef_state_t'&gt;	^ self enumAt: #text_area_resize</body>

<body package="ChromiumEmbeddedFramework-UI">textAreaResize: aSymbol	&lt;api: #text_area_resize&gt;	&lt;type: 'cef_state_t'&gt;	self enumAt: #text_area_resize put: aSymbol</body>

<body package="ChromiumEmbeddedFramework-UI">universalAccessFromFileUrls	&lt;api: #universal_access_from_file_urls&gt;	&lt;type: 'cef_state_t'&gt;	^ self enumAt: #universal_access_from_file_urls</body>

<body package="ChromiumEmbeddedFramework-UI">universalAccessFromFileUrls: aSymbol	&lt;api: #universal_access_from_file_urls&gt;	&lt;type: 'cef_state_t'&gt;	self enumAt: #universal_access_from_file_urls put: aSymbol</body>

<body package="ChromiumEmbeddedFramework-UI">webSecurity	&lt;api: #web_security&gt;	&lt;type: 'cef_state_t'&gt;	^ self enumAt: #web_security</body>

<body package="ChromiumEmbeddedFramework-UI">webSecurity: aSymbol	&lt;api: #web_security&gt;	&lt;type: 'cef_state_t'&gt;	self enumAt: #web_security put: aSymbol</body>

<body package="ChromiumEmbeddedFramework-UI">webgl	&lt;api: #webgl&gt;	&lt;type: 'cef_state_t'&gt;	^ self enumAt: #webgl</body>

<body package="ChromiumEmbeddedFramework-UI">webgl: aSymbol	&lt;api: #webgl&gt;	&lt;type: 'cef_state_t'&gt;	self enumAt: #webgl put: aSymbol</body>

<body package="ChromiumEmbeddedFramework-UI">windowlessFrameRate	&lt;api: #windowless_frame_rate&gt;	&lt;type: 'int'&gt;	^ self memberAt: #windowless_frame_rate</body>

<body package="ChromiumEmbeddedFramework-UI">windowlessFrameRate: int	&lt;api: #windowless_frame_rate&gt;	&lt;type: 'int'&gt;	self memberAt: #windowless_frame_rate put: int</body>
</methods>

<methods>
<class-id>CEF.BrowserHost</class-id> <category>accessing-API</category>

<body package="ChromiumEmbeddedFramework-UI">addWordToDictionary: word	&lt;api: #add_word_to_dictionary&gt;	&lt;type: 'void'&gt;	^ self call: #add_word_to_dictionary with: word</body>

<body package="ChromiumEmbeddedFramework-UI">browser	&lt;api: #get_browser&gt;	&lt;type: 'struct _cef_browser_t *'&gt;	^ self call: #get_browser</body>

<body package="ChromiumEmbeddedFramework-UI">client	&lt;api: #get_client&gt;	&lt;type: 'struct _cef_client_t *'&gt;	^ self call: #get_client</body>

<body package="ChromiumEmbeddedFramework-UI">closeBrowser: forceClose	&lt;api: #close_browser&gt;	&lt;type: 'void'&gt;	^ self call: #close_browser with: forceClose</body>

<body package="ChromiumEmbeddedFramework-UI">closeDevTools	&lt;api: #close_dev_tools&gt;	&lt;type: 'void'&gt;	^ self call: #close_dev_tools</body>

<body package="ChromiumEmbeddedFramework-UI">downloadImage: imageUrl isFavicon: isFavicon maxImageSize: maxImageSize bypassCache: bypassCache callback: callback	&lt;api: #download_image&gt;	&lt;type: 'void'&gt;	^ self call: #download_image arguments: (OrderedCollection new add: imageUrl; add: isFavicon; add: maxImageSize; add: bypassCache; add: callback; yourself)</body>

<body package="ChromiumEmbeddedFramework-UI">dragSourceEndedAt: x y: y op: op	&lt;api: #drag_source_ended_at&gt;	&lt;type: 'void'&gt;	^ self call: #drag_source_ended_at arguments: (OrderedCollection new add: x; add: y; add: op; yourself)</body>

<body package="ChromiumEmbeddedFramework-UI">dragSourceSystemDragEnded	&lt;api: #drag_source_system_drag_ended&gt;	&lt;type: 'void'&gt;	^ self call: #drag_source_system_drag_ended</body>

<body package="ChromiumEmbeddedFramework-UI">dragTargetDragEnter: dragData event: event allowedOps: allowedOps	&lt;api: #drag_target_drag_enter&gt;	&lt;type: 'void'&gt;	^ self call: #drag_target_drag_enter arguments: (OrderedCollection new add: dragData; add: event; add: allowedOps; yourself)</body>

<body package="ChromiumEmbeddedFramework-UI">dragTargetDragLeave	&lt;api: #drag_target_drag_leave&gt;	&lt;type: 'void'&gt;	^ self call: #drag_target_drag_leave</body>

<body package="ChromiumEmbeddedFramework-UI">dragTargetDragOver: event allowedOps: allowedOps	&lt;api: #drag_target_drag_over&gt;	&lt;type: 'void'&gt;	^ self call: #drag_target_drag_over with: event with: allowedOps</body>

<body package="ChromiumEmbeddedFramework-UI">dragTargetDrop: event	&lt;api: #drag_target_drop&gt;	&lt;type: 'void'&gt;	^ self call: #drag_target_drop with: event</body>

<body package="ChromiumEmbeddedFramework-UI">find: identifier searchText: searchText forward: forward matchCase: matchCase findNext: findNext	&lt;api: #find&gt;	&lt;type: 'void'&gt;	^ self call: #find arguments: (OrderedCollection new add: identifier; add: searchText; add: forward; add: matchCase; add: findNext; yourself)</body>

<body package="ChromiumEmbeddedFramework-UI">getNavigationEntries: visitor currentOnly: currentOnly	&lt;api: #get_navigation_entries&gt;	&lt;type: 'void'&gt;	^ self call: #get_navigation_entries with: visitor with: currentOnly</body>

<body package="ChromiumEmbeddedFramework-UI">hasDevTools	&lt;api: #has_dev_tools&gt;	&lt;type: 'int'&gt;	^ (self call: #has_dev_tools) cefAsBoolean</body>

<body package="ChromiumEmbeddedFramework-UI">hasView	&lt;api: #has_view&gt;	&lt;type: 'int'&gt;	^ (self call: #has_view) cefAsBoolean</body>

<body package="ChromiumEmbeddedFramework-UI">imeCancelComposition	&lt;api: #ime_cancel_composition&gt;	&lt;type: 'void'&gt;	^ self call: #ime_cancel_composition</body>

<body package="ChromiumEmbeddedFramework-UI">imeCommitText: text replacementRange: replacementRange relativeCursorPos: relativeCursorPos	&lt;api: #ime_commit_text&gt;	&lt;type: 'void'&gt;	^ self call: #ime_commit_text arguments: (OrderedCollection new add: text; add: replacementRange; add: relativeCursorPos; yourself)</body>

<body package="ChromiumEmbeddedFramework-UI">imeFinishComposingText: keepSelection	&lt;api: #ime_finish_composing_text&gt;	&lt;type: 'void'&gt;	^ self call: #ime_finish_composing_text with: keepSelection</body>

<body package="ChromiumEmbeddedFramework-UI">imeSetComposition: text underlinesCount: underlinesCount underlines: underlines replacementRange: replacementRange selectionRange: selectionRange	&lt;api: #ime_set_composition&gt;	&lt;type: 'void'&gt;	^ self call: #ime_set_composition arguments: (OrderedCollection new add: text; add: underlinesCount; add: underlines; add: replacementRange; add: selectionRange; yourself)</body>

<body package="ChromiumEmbeddedFramework-UI">invalidate: type	&lt;api: #invalidate&gt;	&lt;type: 'void'&gt;	^ self call: #invalidate with: type</body>

<body package="ChromiumEmbeddedFramework-UI">isMouseCursorChangeDisabled	&lt;api: #is_mouse_cursor_change_disabled&gt;	&lt;type: 'int'&gt;	^ (self call: #is_mouse_cursor_change_disabled) cefAsBoolean</body>

<body package="ChromiumEmbeddedFramework-UI">isWindowRenderingDisabled	&lt;api: #is_window_rendering_disabled&gt;	&lt;type: 'int'&gt;	^ (self call: #is_window_rendering_disabled) cefAsBoolean</body>

<body package="ChromiumEmbeddedFramework-UI">notifyMoveOrResizeStarted	&lt;api: #notify_move_or_resize_started&gt;	&lt;type: 'void'&gt;	^ self call: #notify_move_or_resize_started</body>

<body package="ChromiumEmbeddedFramework-UI">notifyScreenInfoChanged	&lt;api: #notify_screen_info_changed&gt;	&lt;type: 'void'&gt;	^ self call: #notify_screen_info_changed</body>

<body package="ChromiumEmbeddedFramework-UI">openerWindowHandle	&lt;api: #get_opener_window_handle&gt;	&lt;type: 'HWND'&gt;	^ self call: #get_opener_window_handle</body>

<body package="ChromiumEmbeddedFramework-UI">print	&lt;api: #print&gt;	&lt;type: 'void'&gt;	^ self call: #print</body>

<body package="ChromiumEmbeddedFramework-UI">printToPdf: path settings: settings callback: callback	&lt;api: #print_to_pdf&gt;	&lt;type: 'void'&gt;	^ self call: #print_to_pdf arguments: (OrderedCollection new add: path; add: settings; add: callback; yourself)</body>

<body package="ChromiumEmbeddedFramework-UI">replaceMisspelling: word	&lt;api: #replace_misspelling&gt;	&lt;type: 'void'&gt;	^ self call: #replace_misspelling with: word</body>

<body package="ChromiumEmbeddedFramework-UI">requestContext	&lt;api: #get_request_context&gt;	&lt;type: 'struct _cef_request_context_t *'&gt;	^ self call: #get_request_context</body>

<body package="ChromiumEmbeddedFramework-UI">runFileDialog: mode title: title defaultFilePath: defaultFilePath acceptFilters: acceptFilters selectedAcceptFilter: selectedAcceptFilter callback: callback	&lt;api: #run_file_dialog&gt;	&lt;type: 'void'&gt;	^ self call: #run_file_dialog arguments: (OrderedCollection new add: mode; add: title; add: defaultFilePath; add: acceptFilters; add: selectedAcceptFilter; add: callback; yourself)</body>

<body package="ChromiumEmbeddedFramework-UI">sendCaptureLostEvent	&lt;api: #send_capture_lost_event&gt;	&lt;type: 'void'&gt;	^ self call: #send_capture_lost_event</body>

<body package="ChromiumEmbeddedFramework-UI">sendFocusEvent: setFocus	&lt;api: #send_focus_event&gt;	&lt;type: 'void'&gt;	^ self call: #send_focus_event with: setFocus</body>

<body package="ChromiumEmbeddedFramework-UI">sendKeyEvent: event	&lt;api: #send_key_event&gt;	&lt;type: 'void'&gt;	^ self call: #send_key_event with: event</body>

<body package="ChromiumEmbeddedFramework-UI">sendMouseClickEvent: event type: type mouseUp: mouseUp clickCount: clickCount	&lt;api: #send_mouse_click_event&gt;	&lt;type: 'void'&gt;	^ self call: #send_mouse_click_event arguments: (OrderedCollection new add: event; add: type; add: mouseUp; add: clickCount; yourself)</body>

<body package="ChromiumEmbeddedFramework-UI">sendMouseMoveEvent: event mouseLeave: mouseLeave	&lt;api: #send_mouse_move_event&gt;	&lt;type: 'void'&gt;	^ self call: #send_mouse_move_event with: event with: mouseLeave</body>

<body package="ChromiumEmbeddedFramework-UI">sendMouseWheelEvent: event deltaX: deltaX deltaY: deltaY	&lt;api: #send_mouse_wheel_event&gt;	&lt;type: 'void'&gt;	^ self call: #send_mouse_wheel_event arguments: (OrderedCollection new add: event; add: deltaX; add: deltaY; yourself)</body>

<body package="ChromiumEmbeddedFramework-UI">setAccessibilityState: accessibilityState	&lt;api: #set_accessibility_state&gt;	&lt;type: 'void'&gt;	^ self call: #set_accessibility_state with: accessibilityState</body>

<body package="ChromiumEmbeddedFramework-UI">setFocus: focus	&lt;api: #set_focus&gt;	&lt;type: 'void'&gt;	^ self call: #set_focus with: focus</body>

<body package="ChromiumEmbeddedFramework-UI">setMouseCursorChangeDisabled: disabled	&lt;api: #set_mouse_cursor_change_disabled&gt;	&lt;type: 'void'&gt;	^ self call: #set_mouse_cursor_change_disabled with: disabled</body>

<body package="ChromiumEmbeddedFramework-UI">setWindowlessFrameRate: frameRate	&lt;api: #set_windowless_frame_rate&gt;	&lt;type: 'void'&gt;	^ self call: #set_windowless_frame_rate with: frameRate</body>

<body package="ChromiumEmbeddedFramework-UI">setZoomLevel: zoomLevel	&lt;api: #set_zoom_level&gt;	&lt;type: 'void'&gt;	^ self call: #set_zoom_level with: zoomLevel</body>

<body package="ChromiumEmbeddedFramework-UI">showDevTools: windowInfo client: client settings: settings inspectElementAt: inspectElementAt	&lt;api: #show_dev_tools&gt;	&lt;type: 'void'&gt;	^ self call: #show_dev_tools arguments: (OrderedCollection new add: windowInfo; add: client; add: settings; add: inspectElementAt; yourself)</body>

<body package="ChromiumEmbeddedFramework-UI">startDownload: url	&lt;api: #start_download&gt;	&lt;type: 'void'&gt;	^ self call: #start_download with: url</body>

<body package="ChromiumEmbeddedFramework-UI">stopFinding: clearSelection	&lt;api: #stop_finding&gt;	&lt;type: 'void'&gt;	^ self call: #stop_finding with: clearSelection</body>

<body package="ChromiumEmbeddedFramework-UI">tryCloseBrowser	&lt;api: #try_close_browser&gt;	&lt;type: 'int'&gt;	^ self call: #try_close_browser</body>

<body package="ChromiumEmbeddedFramework-UI">visibleNavigationEntry	&lt;api: #get_visible_navigation_entry&gt;	&lt;type: 'struct _cef_navigation_entry_t *'&gt;	^ self call: #get_visible_navigation_entry</body>

<body package="ChromiumEmbeddedFramework-UI">wasHidden: hidden	&lt;api: #was_hidden&gt;	&lt;type: 'void'&gt;	^ (self call: #was_hidden with: hidden) cefAsBoolean</body>

<body package="ChromiumEmbeddedFramework-UI">wasResized	&lt;api: #was_resized&gt;	&lt;type: 'void'&gt;	^ (self call: #was_resized) cefAsBoolean</body>

<body package="ChromiumEmbeddedFramework-UI">windowHandle	&lt;api: #get_window_handle&gt;	&lt;type: 'HWND'&gt;	^ self call: #get_window_handle</body>

<body package="ChromiumEmbeddedFramework-UI">windowlessFrameRate	&lt;api: #get_windowless_frame_rate&gt;	&lt;type: 'int'&gt;	^ self call: #get_windowless_frame_rate</body>

<body package="ChromiumEmbeddedFramework-UI">zoomLevel	&lt;api: #get_zoom_level&gt;	&lt;type: 'double'&gt;	^ self call: #get_zoom_level</body>
</methods>

<methods>
<class-id>CEF.SchemeHandlerFactory</class-id> <category>events</category>

<body package="ChromiumEmbeddedFramework-UI">create: browser frame: frame schemeName: schemeName request: request 	&lt;callback: #'create'&gt;		| resHandler handlerClass |	Log debugLog: 'Request: ' , request url.	handlerClass := ResourceHandler allSubclasses detect: [ : class | class schemeName = schemeName ] ifNone: [ nil ].	handlerClass isNil ifTrue: [ ^nil ].	resHandler := handlerClass  request: request factory: self.	" register to avoid GC "	resourceHandlers add: resHandler.	^ resHandler</body>
</methods>

<methods>
<class-id>CEF.Callback</class-id> <category>accessing-API</category>

<body package="ChromiumEmbeddedFramework-UI">cancel	&lt;api: #cancel&gt;	&lt;type: 'void'&gt;	^ self call: #cancel</body>

<body package="ChromiumEmbeddedFramework-UI">cont	&lt;api: #cont&gt;	&lt;type: 'void'&gt;	^ self call: #cont</body>
</methods>

<methods>
<class-id>CEF.Client</class-id> <category>events-lifespan</category>

<body package="ChromiumEmbeddedFramework-UI">onAfterCreated: aBrowser 	&lt;callback: #'on_after_created' handler: #'get_life_span_handler'&gt;		createdBrowser := aBrowser.	" aBrowser is a volatile argument, so register now "	createdBrowser register.	createdBrowser client: self.	aBrowser initializeBrowserWindowHandle.	self areaPart when: #resized send: #resized to: createdBrowser.	self areaPart when: #released send: #stop to: self.	self triggerEvent: #createdBrowser.</body>
</methods>

<methods>
<class-id>CEF.Client</class-id> <category>events-load</category>

<body package="ChromiumEmbeddedFramework-UI">onLoadEnd: theBrowser frame: frame statusCode: statusCode 	&lt;callback: #'on_load_end' handler: #'get_load_handler'&gt;		self triggerEvent: #loaded with: frame with: statusCode.</body>

<body package="ChromiumEmbeddedFramework-UI">onLoadError: theBrowser frame: frame errorCode: errorCode errorText: errorText failedUrl: failedUrl 	&lt;callback: #'on_load_error' handler: #'get_load_handler'&gt;		| arguments |	arguments := OrderedCollection new: 4.	arguments add: frame.	arguments add: errorCode.	arguments add: errorText.	arguments add: failedUrl.	self triggerEvent: #loadError withArguments: arguments asArray</body>

<body package="ChromiumEmbeddedFramework-UI">onLoadStart: cefBrowser frame: frame transitionType: transitionType 	&lt;callback: #'on_load_start' handler: #'get_load_handler'&gt;		self triggerEvent: #loading with: frame with: transitionType.</body>
</methods>

<methods>
<class-id>CEF.Client</class-id> <category>events-focus</category>

<body package="ChromiumEmbeddedFramework-UI">onGotFocus: theBrowser	&lt;callback: #'on_got_focus' handler: #'get_focus_handler'&gt;		self restoreFocus.</body>

<body package="ChromiumEmbeddedFramework-UI">onSetFocus: theBrowser source: source	&lt;callback: #'on_set_focus' handler: #'get_focus_handler'&gt;		self restoreFocus.	^ self lib RV_CONTINUE</body>
</methods>

<methods>
<class-id>CEF.Response</class-id> <category>accessing-API</category>

<body package="ChromiumEmbeddedFramework-UI">error	&lt;api: #get_error&gt;	&lt;type: 'cef_errorcode_t'&gt;	^ self call: #get_error</body>

<body package="ChromiumEmbeddedFramework-UI">getHeader: name	&lt;api: #get_header&gt;	&lt;type: 'cef_string_userfree_t'&gt;	^ self call: #get_header with: name</body>

<body package="ChromiumEmbeddedFramework-UI">getHeaderMap: headerMap	&lt;api: #get_header_map&gt;	&lt;type: 'void'&gt;	^ self call: #get_header_map with: headerMap</body>

<body package="ChromiumEmbeddedFramework-UI">isReadOnly	&lt;api: #is_read_only&gt;	&lt;type: 'int'&gt;	^ (self call: #is_read_only) cefAsBoolean</body>

<body package="ChromiumEmbeddedFramework-UI">mimeType	&lt;api: #get_mime_type&gt;	&lt;type: 'cef_string_userfree_t'&gt;	^ self call: #get_mime_type</body>

<body package="ChromiumEmbeddedFramework-UI">setError: error	&lt;api: #set_error&gt;	&lt;type: 'void'&gt;	^ self call: #set_error with: error</body>

<body package="ChromiumEmbeddedFramework-UI">setHeaderMap: headerMap	&lt;api: #set_header_map&gt;	&lt;type: 'void'&gt;	^ self call: #set_header_map with: headerMap</body>

<body package="ChromiumEmbeddedFramework-UI">setMimeType: mimeType	&lt;api: #set_mime_type&gt;	&lt;type: 'void'&gt;	^ self call: #set_mime_type with: mimeType</body>

<body package="ChromiumEmbeddedFramework-UI">setStatus: status	&lt;api: #set_status&gt;	&lt;type: 'void'&gt;	^ self call: #set_status with: status</body>

<body package="ChromiumEmbeddedFramework-UI">setStatusText: statusText	&lt;api: #set_status_text&gt;	&lt;type: 'void'&gt;	^ self call: #set_status_text with: statusText</body>

<body package="ChromiumEmbeddedFramework-UI">status	&lt;api: #get_status&gt;	&lt;type: 'int'&gt;	^ self call: #get_status</body>

<body package="ChromiumEmbeddedFramework-UI">statusText	&lt;api: #get_status_text&gt;	&lt;type: 'cef_string_userfree_t'&gt;	^ self call: #get_status_text</body>
</methods>

<methods>
<class-id>Core.SystemEventInterest class</class-id> <category>dependencies-pragma</category>

<body package="ChromiumEmbeddedFramework-UI">flushCEF	&lt;triggerAtSystemEvent: #returnFromSnapshot&gt;	CEF.LibChromium flushCurrent.	CEF.OSSupport flushCurrent.	CEF.MainApp flushCurrent.	CEF.Log stop.</body>
</methods>

<methods>
<class-id>CEF.Base</class-id> <category>initialize-release</category>

<body package="ChromiumEmbeddedFramework-UI">initialize	callbacks := Set new.	self initializeExternals.</body>

<body package="ChromiumEmbeddedFramework-UI">initializeWrapped	" called once the associated CEF object is set / created "		self installCallbacks.</body>

<body package="ChromiumEmbeddedFramework-UI">release	self initializeExternals</body>
</methods>

<methods>
<class-id>CEF.Base</class-id> <category>callbacks-private</category>

<body package="ChromiumEmbeddedFramework-UI">callbackBlockForArguments: numberOfArguments selector: selector 	numberOfArguments = 0 		ifTrue: 		[	^ [	self debugCallback: selector.				self performCallback: selector arguments: #()			]		].	numberOfArguments = 1 		ifTrue: 		[	^ [: myself |				self debugCallback: selector.				self performCallback: selector arguments: #()			]		].	numberOfArguments = 2 		ifTrue: 		[	^ [: myself : a1 |				self debugCallback: selector.				self performCallback: selector arguments: ( Array with: a1 )			]		].	numberOfArguments = 3 		ifTrue: 		[	^ [: myself : a1 : a2 |				self debugCallback: selector.				self performCallback: selector arguments: ( Array with: a1 with: a2 )			]		].	numberOfArguments = 4 		ifTrue: 		[	^ [: myself : a1 : a2 : a3 |				self debugCallback: selector.				self performCallback: selector arguments: ( Array with: a1 with: a2 with: a3 )			]		].	numberOfArguments = 5 		ifTrue: 		[	^ [: myself : a1 : a2 : a3 : a4 | | args |				self debugCallback: selector.				args := ( OrderedCollection new: 4 )						add: a1;						add: a2;						add: a3;						add: a4;						asArray.				self performCallback: selector arguments: args			]		].	numberOfArguments = 6 		ifTrue: 		[	^ [: myself : a1 : a2 : a3 : a4 : a5 | | args |				self debugCallback: selector.				args := ( OrderedCollection new: 5 )						add: a1;						add: a2;						add: a3;						add: a4;						add: a5;						asArray.				self performCallback: selector arguments: args			]		].	self error: 'unsupported number of callback arguments, ' , numberOfArguments printString.</body>

<body package="ChromiumEmbeddedFramework-UI">debugCallback: selector	Log debugLog: 'Callback: ', selector</body>

<body package="ChromiumEmbeddedFramework-UI">installCallbackFromPragma: pragma 	self installCallbackFromPragma: pragma on: self cefObject</body>

<body package="ChromiumEmbeddedFramework-UI">installCallbackFromPragma: pragma on: cefObject 	| numberOfArguments callbackProtoype block memberName selector |	memberName := pragma argumentAt: 1.	Log debugLog: 'Installing callback ' , memberName.	callbackProtoype := cefObject 			cefMemberAt: memberName			ifAbsent: [ self error: 'Callback ' , memberName , ' not found' ].	numberOfArguments := callbackProtoype type referentType numArgs.	selector := pragma selector.	selector numArgs = ( numberOfArguments - 1 ) 		ifFalse: 		[	self error: ( numberOfArguments - 1 ) printString , ' arguments expected for #' , selector		].	block := self callbackBlockForArguments: numberOfArguments selector: selector.	self createCallback: block named: memberName of: cefObject.</body>

<body package="ChromiumEmbeddedFramework-UI">installCallbacks	| handlerPragmas |	" callbacks of the object "	( Tools.Pragma allNamed: #callback: from: self class to: Base ) 		do: [: pragma | self installCallbackFromPragma: pragma ].	" generic handlers that dont require a separate wrapper object "	handlerPragmas := Tools.Pragma allNamed: #callback:handler: from: self class to: Base.	( handlerPragmas groupedBy: [: pragma | pragma argumentAt: 2 ]) keysAndValuesDo: 		[: handlerCallbackName : pragmas | | handler handlerType |			" get the handler signature from the callback  "			handlerType := ( self cefObject memberAt: handlerCallbackName ) resultType referentType.			" create a new handler an register all defined callbacks "			handler := self class createCefObjectOfType: handlerType.			pragmas do: [: pragma | self installCallbackFromPragma: pragma on: handler ].			self externalAt: handlerCallbackName put: handler.			" register the callback the returns the handler "			self createCallback: [ 				Log debugLog: 'Creating handler ', self class name, ' &gt;&gt; ', handlerCallbackName  printString.				handler ] named: handlerCallbackName of: self cefObject		].</body>

<body package="ChromiumEmbeddedFramework-UI">performCallback: selector arguments: arguments 	| callbackArguments result |	callbackArguments := arguments collect: [: a | a cefAsSmalltalkArg ].	result := self perform: selector withArguments: callbackArguments.	^ result asCefDatum</body>
</methods>

<methods>
<class-id>CEF.Base</class-id> <category>calls</category>

<body package="ChromiumEmbeddedFramework-UI">call: memberFunctionName 	^ self call: memberFunctionName arguments: #()</body>

<body package="ChromiumEmbeddedFramework-UI">call: memberFunctionName arguments: arguments 	^ (self cefObject cefCall: memberFunctionName arguments: arguments) cefAsSmalltalkArg</body>

<body package="ChromiumEmbeddedFramework-UI">call: memberFunctionName with: anArgument	^ self call: memberFunctionName arguments: (Array with: anArgument)</body>

<body package="ChromiumEmbeddedFramework-UI">call: memberFunctionName with: anArgument1 with: anArgument2	^ self call: memberFunctionName arguments: (Array with: anArgument1 with: anArgument2)</body>
</methods>

<methods>
<class-id>CEF.Base</class-id> <category>externals-utilities</category>

<body package="ChromiumEmbeddedFramework-UI">createCallback: block named: memberName of: cefObject	| newCallback |	newCallback := cefObject cefCallbackNamed: memberName set: block.	" store callbacks to avoid gc "	callbacks add: newCallback.	^ newCallback</body>

<body package="ChromiumEmbeddedFramework-UI">enumNamed: enumName of: memberName 	^ ( self enumTypeOfMemberAt: memberName ) memberNamed: enumName</body>

<body package="ChromiumEmbeddedFramework-UI">enumTypeOfMemberAt: memberName 	^ ( self cefObject refMemberAt: memberName ) type referentType</body>

<body package="ChromiumEmbeddedFramework-UI">fakeRefCount: cefObject 	" fake ref count that never releases stuff "	| refCount base |	self isVolatile 		ifTrue: 		[	" .. except if this is a volatile object (usually a callback argument) "			^ self		].	base := cefObject cefMemberAt: #base ifAbsent: [ nil ].	( base notNil and: [( base cefMemberAt: #'add_ref' ifAbsent: [ nil ]) notNil ]) 		ifTrue: 		[	refCount := 0.			self createCallback: [: s | refCount := refCount + 1 ] named: #'add_ref' of: base.			self 				createCallback: 				[: s |					refCount := refCount - 1.					1				]				named: #release				of: base.			self createCallback: [: s | 1 ] named: #'has_one_ref' of: base.			cefObject cefMemberAt: #base put: base		].</body>
</methods>

<methods>
<class-id>CEF.Base</class-id> <category>finalization</category>

<body package="ChromiumEmbeddedFramework-UI">actAsExecutor	callbacks := #()</body>

<body package="ChromiumEmbeddedFramework-UI">executor	^ self shallowCopy actAsExecutor</body>

<body package="ChromiumEmbeddedFramework-UI">finalize	"Log debugLog: 'Finalize ', self printString."	self release.</body>
</methods>

<methods>
<class-id>CEF.Base</class-id> <category>private</category>

<body package="ChromiumEmbeddedFramework-UI">cefObject	^ self externalAt: #cefObject ifAbsent: [ self error: 'Object has been released' ]</body>

<body package="ChromiumEmbeddedFramework-UI">cefObject: aCefCompositePointer	self externalAt: #cefObject put: aCefCompositePointer.</body>

<body package="ChromiumEmbeddedFramework-UI">cefRefCountFor: owner	" I already keep track of my CEF object "</body>

<body package="ChromiumEmbeddedFramework-UI">debug	^ Log current debug</body>

<body package="ChromiumEmbeddedFramework-UI">isAlive	" true if my CEF object is still alive "	| pointer |	pointer := self externalAt: #cefObject ifAbsent: [ nil ].	^ pointer notNil and: [ pointer isValid ]</body>

<body package="ChromiumEmbeddedFramework-UI">isVolatile	^ isVolatile ifNil: [ false ]</body>

<body package="ChromiumEmbeddedFramework-UI">isVolatile: aBoolean 	isVolatile := aBoolean.</body>

<body package="ChromiumEmbeddedFramework-UI">key	" key for the handle registry " 		^ self cefObject ifNotNil: [: c | c referentAddress ]</body>

<body package="ChromiumEmbeddedFramework-UI">lib	^ LibChromium current</body>

<body package="ChromiumEmbeddedFramework-UI">mainApp	^ MainApp current</body>

<body package="ChromiumEmbeddedFramework-UI">osLib	^ OSSupport current</body>

<body package="ChromiumEmbeddedFramework-UI">register	self isVolatile 		ifTrue: 		[	self isVolatile: false.			self fakeRefCount: self cefObject		].	self class registry registerValueOf: [ self ].</body>
</methods>

<methods>
<class-id>CEF.Base</class-id> <category>externals-private</category>

<body package="ChromiumEmbeddedFramework-UI">externalAt: aSymbol 	^ externals at: aSymbol ifAbsent: [ nil ]</body>

<body package="ChromiumEmbeddedFramework-UI">externalAt: aSymbol ifAbsent: aBlock	^ externals at: aSymbol ifAbsent: aBlock</body>

<body package="ChromiumEmbeddedFramework-UI">externalAt: aSymbol ifAbsentPut: aBlock 	^ externals 		at: aSymbol		ifAbsentPut: 		[ | ext |			ext := aBlock value.			ext cefRefCountFor: self.			ext		]</body>

<body package="ChromiumEmbeddedFramework-UI">externalAt: aSymbol put: anExternal 	externals at: aSymbol put: anExternal.	anExternal cefRefCountFor: self.</body>

<body package="ChromiumEmbeddedFramework-UI">initializeExternals	externals := Dictionary new.</body>

<body package="ChromiumEmbeddedFramework-UI">removeExternalAt: aSymbol 	externals removeKey: aSymbol ifAbsent: [ nil ]</body>
</methods>

<methods>
<class-id>CEF.Base</class-id> <category>accessing</category>

<body package="ChromiumEmbeddedFramework-UI">booleanAt: key	^ self memberAt: key convertedWith: [ : int | int cefAsBoolean]</body>

<body package="ChromiumEmbeddedFramework-UI">enumAt: memberName 	^ ( self cefObject cefMemberAt: memberName ) ifNotNil: 		[: value | | enum |			enum := self enumTypeOfMemberAt: memberName.			enum cefNameOf: value		].</body>

<body package="ChromiumEmbeddedFramework-UI">enumAt: memberName put: enumName	| enumValue |	enumValue := self enumNamed: enumName of: memberName.	self memberAt: memberName put: enumValue.</body>

<body package="ChromiumEmbeddedFramework-UI">memberAt: aKey	^ self memberAt: aKey convertedWith: [ : value | value cefAsSmalltalkArg ]</body>

<body package="ChromiumEmbeddedFramework-UI">memberAt: aKey convertedWith: aBlock	^ (self cefObject cefMemberAt: aKey ) ifNotNil: [ : value | aBlock value: value ]</body>

<body package="ChromiumEmbeddedFramework-UI">memberAt: aKey put: aValue	self cefObject cefMemberAt: aKey put: aValue asCefDatum</body>
</methods>

<methods>
<class-id>CEF.Base</class-id> <category>converting</category>

<body package="ChromiumEmbeddedFramework-UI">asCefDatum	^ self cefObject</body>
</methods>

<methods>
<class-id>CEF.Base class</class-id> <category>pragmas</category>

<body package="ChromiumEmbeddedFramework-UI">apiPragma		^ #api:</body>

<body package="ChromiumEmbeddedFramework-UI">typePragma	^ #type:</body>
</methods>

<methods>
<class-id>CEF.Base class</class-id> <category>accessing</category>

<body package="ChromiumEmbeddedFramework-UI">type	^ self typeName ifNotNil: [ : typeName | CEF.LibChromium current perform: typeName ]</body>

<body package="ChromiumEmbeddedFramework-UI">typeName	^ nil</body>
</methods>

<methods>
<class-id>CEF.Base class</class-id> <category>instance creation</category>

<body package="ChromiumEmbeddedFramework-UI">new	^ super new initialize</body>

<body package="ChromiumEmbeddedFramework-UI">on: aCefObject 	^ self on: aCefObject isVolatile: false</body>

<body package="ChromiumEmbeddedFramework-UI">onNewObject	^ self on: self createCefObject</body>
</methods>

<methods>
<class-id>CEF.Base class</class-id> <category>private</category>

<body package="ChromiumEmbeddedFramework-UI">classForType: aType 	^ self allSubclasses 		detect: [: class | class type ifNotNil: [: classType | classType = aType or: [classType type = aType ] ] ifNil: [ false ]]		ifNone: [ nil ]</body>

<body package="ChromiumEmbeddedFramework-UI">createCefObject	| type |	type := self typeName.	type isNil 		ifTrue: [ self error: 'Cannot create objects of class ' , self fullName ].	^ self createCefObjectOfTypeNamed: type</body>

<body package="ChromiumEmbeddedFramework-UI">createCefObjectOfType: type 	| cefObject base sizeof size |	cefObject := type malloc.	cefObject zeroFill.	" initialize common members "	sizeof := cefObject type referentType sizeof.	base := cefObject cefMemberAt: #base ifAbsent: [ nil ].	base notNil 		ifTrue: 		[	base cefMemberAt: #size put: sizeof.			cefObject cefMemberAt: #base put: base		]		ifFalse: 		[	size := cefObject cefMemberAt: #size ifAbsent: [ nil ].			size notNil 				ifTrue: [ cefObject cefMemberAt: #size put: sizeof ]		].	^ cefObject</body>

<body package="ChromiumEmbeddedFramework-UI">createCefObjectOfTypeNamed: typeName 	^ self createCefObjectOfType: ( CEF.LibChromium current perform: typeName )</body>

<body package="ChromiumEmbeddedFramework-UI">on: aCefObject isVolatile: isVolatile 	| registeredObject newObject |	" try to return the same object "	registeredObject := self registry at: aCefObject cefRegistryKey.	registeredObject notNil 		ifTrue: [ ^ registeredObject ].	newObject := self new			isVolatile: isVolatile;			cefObject: aCefObject;			initializeWrapped;			yourself.	isVolatile 		ifFalse: [ newObject register ].	^ newObject</body>

<body package="ChromiumEmbeddedFramework-UI">registry	Registry isNil 		ifTrue: [ Registry := HandleRegistry new ].	^ Registry</body>
</methods>

<methods>
<class-id>CEF.ResourceHandler</class-id> <category>accessing</category>

<body package="ChromiumEmbeddedFramework-UI">factory	^ self externalAt: #factory</body>

<body package="ChromiumEmbeddedFramework-UI">factory: aFactory	self externalAt: #factory put: aFactory</body>

<body package="ChromiumEmbeddedFramework-UI">request	^ self externalAt: #request</body>

<body package="ChromiumEmbeddedFramework-UI">request: aRequest	self externalAt: #request put: aRequest</body>

<body package="ChromiumEmbeddedFramework-UI">statusCode	^ statusCode ifNil: [ 200 ]</body>

<body package="ChromiumEmbeddedFramework-UI">statusCode: aStatusCode 	statusCode := aStatusCode.</body>
</methods>

<methods>
<class-id>CEF.ResourceHandler</class-id> <category>private</category>

<body package="ChromiumEmbeddedFramework-UI">initializeStream	resourceStream := #[] reading.</body>

<body package="ChromiumEmbeddedFramework-UI">mimeType	^ 'text/html'</body>
</methods>

<methods>
<class-id>CEF.ResourceHandler class</class-id> <category>accessing</category>

<body package="ChromiumEmbeddedFramework-UI">allSchemeHandlerClasses	| handlerClasses |	handlerClasses := Set new.	self allSubclasses 		do: [: class | class schemeName ifNotNil: [: schemeName | handlerClasses add: class ]].	^ handlerClasses</body>

<body package="ChromiumEmbeddedFramework-UI">schemeFlags	^ #( #local standard)</body>

<body package="ChromiumEmbeddedFramework-UI">schemeName	^ nil</body>

<body package="ChromiumEmbeddedFramework-UI">typeName	^ #cef_resource_handler_t</body>
</methods>

<methods>
<class-id>CEF.ResourceHandler class</class-id> <category>instance creation</category>

<body package="ChromiumEmbeddedFramework-UI">request: request factory: factory 	^ self onNewObject		request: request;		factory: factory;		initializeStream;		yourself</body>
</methods>

<methods>
<class-id>CEF.LifecycleBase</class-id> <category>lifecycle</category>

<body package="ChromiumEmbeddedFramework-UI">ensureIsRunning	self isRunning 		ifFalse: [ self start ].</body>

<body package="ChromiumEmbeddedFramework-UI">start	self isReleased 		ifTrue: [ self error: 'Already released' ].	self isRunning 		ifTrue: [ self error: 'Already running' ].	self doStart.	lifecycle := #running.</body>

<body package="ChromiumEmbeddedFramework-UI">stop	self isReleased 		ifFalse: 		[	self doStop.			self initializeExternals.			lifecycle := #released		].</body>
</methods>

<methods>
<class-id>CEF.LifecycleBase</class-id> <category>testing</category>

<body package="ChromiumEmbeddedFramework-UI">isReleased		^ lifecycle = #released</body>

<body package="ChromiumEmbeddedFramework-UI">isRunning		^ lifecycle = #running</body>
</methods>

<methods>
<class-id>CEF.LifecycleBase</class-id> <category>initialize-release</category>

<body package="ChromiumEmbeddedFramework-UI">initialize	super initialize.	lifecycle := #new.</body>

<body package="ChromiumEmbeddedFramework-UI">release	self stop.</body>
</methods>

<methods>
<class-id>CEF.LifecycleBase</class-id> <category>lifecycle-private</category>

<body package="ChromiumEmbeddedFramework-UI">doStart	self subclassResponsibility.</body>

<body package="ChromiumEmbeddedFramework-UI">doStop	self subclassResponsibility</body>
</methods>

<methods>
<class-id>CEF.Browser</class-id> <category>externals</category>

<body package="ChromiumEmbeddedFramework-UI">browserWindowHandle	^ self externalAt: #browserWindowHandle</body>
</methods>

<methods>
<class-id>CEF.Browser</class-id> <category>events</category>

<body package="ChromiumEmbeddedFramework-UI">resized	self isRunning 		ifTrue: [ self mainApp schedule: ( ResizeWork browser: self )].</body>
</methods>

<methods>
<class-id>CEF.Browser</class-id> <category>lifecycle-private</category>

<body package="ChromiumEmbeddedFramework-UI">doStart	" done by the client "</body>

<body package="ChromiumEmbeddedFramework-UI">doStop	self isAlive		ifTrue: [ self host tryCloseBrowser ].	self browserWindowHandle ifNotNil: 		[: handle |			[ handle isValid ifTrue: [ self osLib destroyWindow: handle ]] on: Error do: [ :ex | ].			self removeExternalAt: #browserWindowHandle		].</body>
</methods>

<methods>
<class-id>CEF.Browser</class-id> <category>private</category>

<body package="ChromiumEmbeddedFramework-UI">browserRectangle	^ self client browserRectangle</body>

<body package="ChromiumEmbeddedFramework-UI">client	^ client</body>

<body package="ChromiumEmbeddedFramework-UI">client: aClient 	client := aClient.	lifecycle := #running.</body>

<body package="ChromiumEmbeddedFramework-UI">getBrowserWindowHandle	^ self host windowHandle</body>

<body package="ChromiumEmbeddedFramework-UI">initializeBrowserWindowHandle	self externalAt: #browserWindowHandle put: self getBrowserWindowHandle.</body>

<body package="ChromiumEmbeddedFramework-UI">mainWindow	^ self client mainWindow</body>

<body package="ChromiumEmbeddedFramework-UI">resizeBrowser	| rectangle |	rectangle := self browserRectangle.	self osLib 		setWindowPos: self browserWindowHandle		insertAfter: nil		x: rectangle left		y: rectangle top		cx: rectangle width		cy: rectangle height		flags: self lib SWP_ASYNCWINDOWPOS + self lib SWP_NOREDRAW + self lib SWP_NOACTIVATE 				+ self lib SWP_NOMOVE + self lib SWP_NOZORDER.	self host notifyMoveOrResizeStarted.</body>
</methods>

<methods>
<class-id>CEF.Browser</class-id> <category>accessing</category>

<body package="ChromiumEmbeddedFramework-UI">loadUrl: anUrl 	" convenience "		self mainFrame loadUrl: anUrl</body>
</methods>

<methods>
<class-id>CEF.Browser class</class-id> <category>instance creation</category>

<body package="ChromiumEmbeddedFramework-UI">client: aClient 	^ self new client: aClient; yourself</body>
</methods>

<methods>
<class-id>CEF.Browser class</class-id> <category>private-events</category>

<body package="ChromiumEmbeddedFramework-UI">constructEventsTriggered	^super constructEventsTriggered		add: #closing;		yourself</body>
</methods>

<methods>
<class-id>CEF.Browser class</class-id> <category>accessing</category>

<body package="ChromiumEmbeddedFramework-UI">typeName	^ #cef_browser_t</body>
</methods>

<methods>
<class-id>CEF.Request class</class-id> <category>accessing</category>

<body package="ChromiumEmbeddedFramework-UI">typeName	^ #cef_request_t</body>
</methods>

<methods>
<class-id>CEF.BrowserPart</class-id> <category>bounds accessing</category>

<body package="ChromiumEmbeddedFramework-UI">bounds: aRectangle	super bounds: aRectangle.	self triggerEvent: #resized</body>

<body package="ChromiumEmbeddedFramework-UI">globalBounds	| translation |	translation := self localPointToGlobal: 0 @ 0.	^ self bounds translatedBy: translation</body>

<body package="ChromiumEmbeddedFramework-UI">preferredExtent	^ Point zero</body>
</methods>

<methods>
<class-id>CEF.BrowserPart</class-id> <category>initialize-release</category>

<body package="ChromiumEmbeddedFramework-UI">release	self triggerEvent: #released.	super release.</body>
</methods>

<methods>
<class-id>CEF.BrowserPart class</class-id> <category>private-events</category>

<body package="ChromiumEmbeddedFramework-UI">constructEventsTriggered	^super constructEventsTriggered		add: #resized;		add: #released;		yourself</body>
</methods>

<methods>
<class-id>CEF.SchemeRegistrar</class-id> <category>accessing</category>

<body package="ChromiumEmbeddedFramework-UI">addCustomScheme: schemeName flags: flagSymbols 	| ok |	ok := self 		addCustomScheme: schemeName		isStandard: ( flagSymbols includes: #standard )		isLocal: ( flagSymbols includes: #local )		isDisplayIsolated: ( flagSymbols includes: #displayIsolated )		isSecure: ( flagSymbols includes: #secure )		isCorsEnabled: ( flagSymbols includes: #corsEnabled )		isCspBypassing: ( flagSymbols includes: #cspBypassing ).	ok cefAsBoolean ifFalse: [ self error: 'Scheme could not be registered' ].</body>
</methods>

<methods>
<class-id>CEF.SchemeRegistrar class</class-id> <category>accessing</category>

<body package="ChromiumEmbeddedFramework-UI">typeName	^ #cef_scheme_registrar_t</body>
</methods>

<methods>
<class-id>CEF.MainMessageLoop</class-id> <category>initialize-release</category>

<body package="ChromiumEmbeddedFramework-UI">initialize	loopSemaphore := Semaphore new.	scheduledWork := SortedCollection sortBlock: [: w1 : w2 | w1 targetTime &lt;= w2 targetTime ].	scheduleLock := RecursionLock new.</body>

<body package="ChromiumEmbeddedFramework-UI">start	" cef_run_message_loop wants to run on the main thread, which does not suit VW.	Thus use cef_do_message_loop_work here "	messageProcess :=		[				[ self doMessageLoopWork ] repeat.			messageProcess := nil		] forkAt: Processor userBackgroundPriority.	messageProcess name: 'CEF message loop'.</body>

<body package="ChromiumEmbeddedFramework-UI">stop	( messageProcess notNil and: [ messageProcess isTerminated not ]) 		ifTrue: 		[	messageProcess terminate.			messageProcess := nil		].</body>
</methods>

<methods>
<class-id>CEF.MainMessageLoop</class-id> <category>accessing</category>

<body package="ChromiumEmbeddedFramework-UI">minimalDelay	" do not set this value too low, which results in choppy updates or frequent crashes "		^ minimalDelay ifNil: [ 20 ]</body>

<body package="ChromiumEmbeddedFramework-UI">minimalDelay: anInteger 	minimalDelay := anInteger.</body>
</methods>

<methods>
<class-id>CEF.MainMessageLoop</class-id> <category>scheduling</category>

<body package="ChromiumEmbeddedFramework-UI">schedule: work 	" Schedule the work based on the delay.	Similar work is compressed to avoid unnecessary updates.	A minimal delay is enforced to avoid overload "	self schedule: work now: Time millisecondClockValue</body>
</methods>

<methods>
<class-id>CEF.MainMessageLoop</class-id> <category>private</category>

<body package="ChromiumEmbeddedFramework-UI">doMessageLoopWork	| work |	loopSemaphore wait.	work := scheduleLock critical: 			[	scheduledWork notEmpty 					ifTrue: [ scheduledWork removeFirst ]					ifFalse: [ nil ]			].	work notNil 		ifTrue: 		[	work isScheduled: false.			work doWork		].</body>

<body package="ChromiumEmbeddedFramework-UI">schedule: work now: now	" Schedule the work based on the delay.	Similar work is compressed to avoid unnecessary updates.	A minimal delay is enforced to avoid overload.		'now' is passed as an argument to make debugging test cases easier "	| targetTime timer minDelay |	targetTime := now + work delay.	minDelay := self minimalDelay.	" restrict update frequency "	targetTime := (targetTime / minDelay) ceiling * minDelay.	work targetTime: targetTime.	" avoid duplicate updates "	scheduleLock critical: 		[( scheduledWork includes: work ) 				ifFalse: 				[	scheduledWork add: work.					work isScheduled: true.					timer := Timer after: ( targetTime - now ) milliseconds signal: loopSemaphore.					work timer: timer				]		].</body>
</methods>

<methods>
<class-id>CEF.MainMessageLoop class</class-id> <category>instance creation</category>

<body package="ChromiumEmbeddedFramework-UI">new	^ super new initialize</body>
</methods>

<methods>
<class-id>CEF.Log</class-id> <category>accessing</category>

<body package="ChromiumEmbeddedFramework-UI">debug	^ debug ifNil: [ true ]</body>

<body package="ChromiumEmbeddedFramework-UI">debug: aBoolean 	debug := aBoolean.</body>

<body package="ChromiumEmbeddedFramework-UI">debugLog: aStringOrBlock 	self debug 		ifTrue: [ self addToQueue: aStringOrBlock level: 'CEF-DEBUG' ].</body>

<body package="ChromiumEmbeddedFramework-UI">warnLog: aStringOrBlock 	logQueue nextPut: 'CEF-WARNING' -&gt; aStringOrBlock</body>
</methods>

<methods>
<class-id>CEF.Log</class-id> <category>initialize-release</category>

<body package="ChromiumEmbeddedFramework-UI">initialize	logQueue := SharedQueue new.</body>

<body package="ChromiumEmbeddedFramework-UI">start	logProcess :=		[				[ self showEntry: logQueue next ] repeat		] fork.	logProcess name: 'CEF log process'.</body>

<body package="ChromiumEmbeddedFramework-UI">stop	( logProcess notNil and: [ logProcess isTerminated not ]) 		ifTrue: 		[	logProcess terminate.			logProcess := nil		].</body>
</methods>

<methods>
<class-id>CEF.Log</class-id> <category>private</category>

<body package="ChromiumEmbeddedFramework-UI">addToQueue: aStringOrBlock level: levelString 	| string |	string := aStringOrBlock isCharacters 			ifTrue: [ aStringOrBlock ]			ifFalse: [ aStringOrBlock value ].	logQueue nextPut: 'CEF-DEBUG' -&gt; string.</body>

<body package="ChromiumEmbeddedFramework-UI">logStringForEntry: entry 	| stream |	stream := String new writeStream.	stream		cr;		nextPutAll: '['; 		nextPutAll: entry key; 		nextPutAll: '] '; 		nextPutAll: Time now shortPrintString; 		nextPutAll: ' '; 		nextPutAll: entry value; 		cr.	^ stream contents</body>

<body package="ChromiumEmbeddedFramework-UI">showEntry: entry 	| logString |	" write to Stdout as one entry, so create a temporary string first, then write to Sdtout "	logString := self logStringForEntry: entry.	Stdout nextPutAll: logString; flush.</body>
</methods>

<methods>
<class-id>CEF.Log class</class-id> <category>instance creation</category>

<body package="ChromiumEmbeddedFramework-UI">current	current isNil 		ifTrue: 		[	current := self new.			current start		].	^ current</body>

<body package="ChromiumEmbeddedFramework-UI">new	^super new initialize</body>

<body package="ChromiumEmbeddedFramework-UI">stop	current notNil 		ifTrue: 		[	current stop.			current := nil		].</body>
</methods>

<methods>
<class-id>CEF.Log class</class-id> <category>logging</category>

<body package="ChromiumEmbeddedFramework-UI">debugLog: aStringOrBlock 	self current debugLog: aStringOrBlock.</body>

<body package="ChromiumEmbeddedFramework-UI">warnLog: aStringOrBlock 	self current warnLog: aStringOrBlock</body>
</methods>

<methods>
<class-id>CEF.MainApp</class-id> <category>factory</category>

<body package="ChromiumEmbeddedFramework-UI">createMainArgs	^ self lib createMainArgs</body>

<body package="ChromiumEmbeddedFramework-UI">createSchemeHandlerFactory	^ SchemeHandlerFactory onNewObject</body>

<body package="ChromiumEmbeddedFramework-UI">createSettings	| settings level |	settings := Settings onNewObject.	settings singleProcess: true.	settings multiThreadedMessageLoop: self lib multiThreadedMessageLoop.	settings noSandbox: true.	settings externalMessagePump: true.	settings userAgent: 'VW Chromium'.	self baseDirectory ifNotNil: 		[: baseDir |			settings resourcesDirPath: baseDir asString.			settings localesDirPath: ( baseDir construct: 'locales' ) asString		].	self logFilename 		ifNotNil: [: filename | settings logFile: filename asFilename asAbsoluteFilename asString ].	level := self debug 			ifTrue: [ #'LOGSEVERITY_VERBOSE' ]			ifFalse: [ #'LOGSEVERITY_DEFAULT' ].	settings logSeverity: level.	^ settings</body>
</methods>

<methods>
<class-id>CEF.MainApp</class-id> <category>logging</category>

<body package="ChromiumEmbeddedFramework-UI">logFilename	^ nil	"^ 'cef.' , Time secondClock displayString , '.log'"</body>
</methods>

<methods>
<class-id>CEF.MainApp</class-id> <category>message loop</category>

<body package="ChromiumEmbeddedFramework-UI">messageLoop	^ messageLoop</body>

<body package="ChromiumEmbeddedFramework-UI">restartMessageLoop	messageLoop notNil ifTrue: [ messageLoop stop ].	self initializeMessageLoop.	self runMessageLoop.</body>

<body package="ChromiumEmbeddedFramework-UI">runMessageLoop	self messageLoop start.</body>

<body package="ChromiumEmbeddedFramework-UI">stopMessageLoop	messageLoop notNil 		ifTrue: [ messageLoop stop ].</body>
</methods>

<methods>
<class-id>CEF.MainApp</class-id> <category>initialize-release</category>

<body package="ChromiumEmbeddedFramework-UI">initialize	super initialize.	self initializeMessageLoop.</body>

<body package="ChromiumEmbeddedFramework-UI">initializeMessageLoop	messageLoop := MainMessageLoop new.</body>
</methods>

<methods>
<class-id>CEF.MainApp</class-id> <category>lifecycle-private</category>

<body package="ChromiumEmbeddedFramework-UI">doStart	self runMessageLoop.	self initializeApp.</body>

<body package="ChromiumEmbeddedFramework-UI">doStop	self lib cef_shutdown.	Log stop.</body>

<body package="ChromiumEmbeddedFramework-UI">initializeApp	| settings initialized application mainArgs exitCode |	mainArgs := self mainArgs.	application := self cefObject.	exitCode := self lib cef_execute_process: mainArgs with: application with: nil.	exitCode &gt;= 0 		ifTrue: [ self error: 'cef_execute_process failed with code ' , exitCode printString ].	settings := self settings.	initialized := self lib cef_initialize: mainArgs with: settings cefObject with: application with: nil.	initialized = 0 		ifTrue: [ self error: 'cef_initialize failed' ].</body>
</methods>

<methods>
<class-id>CEF.MainApp</class-id> <category>externals</category>

<body package="ChromiumEmbeddedFramework-UI">mainArgs	^ self externalAt: #mainArgs ifAbsentPut: [ self createMainArgs ]</body>

<body package="ChromiumEmbeddedFramework-UI">schemeHandlerFactory	^ self externalAt: #schemeHandlerFactory ifAbsentPut: [ self createSchemeHandlerFactory ]</body>

<body package="ChromiumEmbeddedFramework-UI">settings	^ self externalAt: #settings ifAbsentPut: [ self createSettings ]</body>
</methods>

<methods>
<class-id>CEF.MainApp</class-id> <category>accessing</category>

<body package="ChromiumEmbeddedFramework-UI">baseDirectory	" base directory for resources / locales " 		^ LibChromium directory</body>

<body package="ChromiumEmbeddedFramework-UI">customSchemeName	^ 'vw'</body>

<body package="ChromiumEmbeddedFramework-UI">schedule: work	self messageLoop schedule: work.</body>

<body package="ChromiumEmbeddedFramework-UI">switches	^ #( 'no-proxy-server' )</body>
</methods>

<methods>
<class-id>CEF.MainApp class</class-id> <category>instance creation</category>

<body package="ChromiumEmbeddedFramework-UI">current	" CEF apps are initialized once per process, so we need a singleton "		current isNil 		ifTrue: [ current := self onNewObject ].	^ current</body>

<body package="ChromiumEmbeddedFramework-UI">ensureIsRunning		self current ensureIsRunning</body>
</methods>

<methods>
<class-id>CEF.MainApp class</class-id> <category>accessing</category>

<body package="ChromiumEmbeddedFramework-UI">flushCurrent	current := nil.</body>

<body package="ChromiumEmbeddedFramework-UI">stop	current notNil 		ifTrue: 		[	" does nto reset current, because CEF apps can only be initialize once per OS process "			current stop		].</body>

<body package="ChromiumEmbeddedFramework-UI">typeName	^ #cef_app_t</body>
</methods>

<methods>
<class-id>CEF.Settings class</class-id> <category>instance creation</category>

<body package="ChromiumEmbeddedFramework-UI">typeName	^ #cef_settings_t</body>
</methods>

<methods>
<class-id>CEF.Frame class</class-id> <category>accessing</category>

<body package="ChromiumEmbeddedFramework-UI">typeName	^ #cef_frame_t</body>
</methods>

<methods>
<class-id>CEF.BrowserSettings class</class-id> <category>accessing</category>

<body package="ChromiumEmbeddedFramework-UI">typeName	^ #cef_browser_settings_t</body>
</methods>

<methods>
<class-id>CEF.BrowserHost class</class-id> <category>accessing</category>

<body package="ChromiumEmbeddedFramework-UI">typeName	^ #cef_browser_host_t</body>
</methods>

<methods>
<class-id>CEF.ScheduledWork</class-id> <category>accessing</category>

<body package="ChromiumEmbeddedFramework-UI">delay	^ delay</body>

<body package="ChromiumEmbeddedFramework-UI">delay: milliseconds 	delay := milliseconds.</body>

<body package="ChromiumEmbeddedFramework-UI">isScheduled	^ isScheduled ifNil: [ false ].</body>

<body package="ChromiumEmbeddedFramework-UI">isScheduled: aIsScheduled 	isScheduled := aIsScheduled.</body>
</methods>

<methods>
<class-id>CEF.ScheduledWork</class-id> <category>comparing</category>

<body package="ChromiumEmbeddedFramework-UI">= anotherWork 	^ self class = anotherWork class and: [ self targetTime = anotherWork targetTime ]</body>

<body package="ChromiumEmbeddedFramework-UI">hash	^ targetTime hash</body>
</methods>

<methods>
<class-id>CEF.ScheduledWork</class-id> <category>work</category>

<body package="ChromiumEmbeddedFramework-UI">doWork	self subclassResponsibility</body>
</methods>

<methods>
<class-id>CEF.ScheduledWork</class-id> <category>private</category>

<body package="ChromiumEmbeddedFramework-UI">stopTimer	timer notNil 		ifTrue: 		[	timer stop.			timer := nil		].</body>

<body package="ChromiumEmbeddedFramework-UI">targetTime	^ targetTime</body>

<body package="ChromiumEmbeddedFramework-UI">targetTime: aTargetTime 	" set by the message loop "	targetTime := aTargetTime.</body>

<body package="ChromiumEmbeddedFramework-UI">timer	^ timer</body>

<body package="ChromiumEmbeddedFramework-UI">timer: aTimer 	timer := aTimer.</body>
</methods>

<methods>
<class-id>CEF.ScheduledWork class</class-id> <category>instance creation</category>

<body package="ChromiumEmbeddedFramework-UI">delay: milliseconds 	^ self new delay: milliseconds;		yourself</body>

<body package="ChromiumEmbeddedFramework-UI">fps: framesPerSecond	^ self delay: (1000 // framesPerSecond)</body>
</methods>

<methods>
<class-id>CEF.PumpWork</class-id> <category>work</category>

<body package="ChromiumEmbeddedFramework-UI">doWork	LibChromium current cef_do_message_loop_work</body>
</methods>

<methods>
<class-id>CEF.ResizeWork</class-id> <category>accessing</category>

<body package="ChromiumEmbeddedFramework-UI">browser	^ browser</body>

<body package="ChromiumEmbeddedFramework-UI">browser: aBrowser 	browser := aBrowser.</body>
</methods>

<methods>
<class-id>CEF.ResizeWork</class-id> <category>work</category>

<body package="ChromiumEmbeddedFramework-UI">doWork	self browser resizeBrowser</body>
</methods>

<methods>
<class-id>CEF.ResizeWork</class-id> <category>comparing</category>

<body package="ChromiumEmbeddedFramework-UI">= anotherWork 	^ super = anotherWork and: [ self browser = anotherWork browser ]</body>
</methods>

<methods>
<class-id>CEF.ResizeWork class</class-id> <category>instance creation</category>

<body package="ChromiumEmbeddedFramework-UI">browser: aBrowser 	^ ( self fps: 30)		browser: aBrowser;		yourself</body>
</methods>

<methods>
<class-id>CEF.SchemeHandlerFactory</class-id> <category>initialize-release</category>

<body package="ChromiumEmbeddedFramework-UI">initialize	super initialize.	resourceHandlers := IdentitySet new.</body>
</methods>

<methods>
<class-id>CEF.SchemeHandlerFactory</class-id> <category>accessing</category>

<body package="ChromiumEmbeddedFramework-UI">finishedHandler: aResourceHandler	resourceHandlers remove: aResourceHandler ifAbsent: [ nil ]</body>
</methods>

<methods>
<class-id>CEF.SchemeHandlerFactory class</class-id> <category>accessing</category>

<body package="ChromiumEmbeddedFramework-UI">typeName	^ #cef_scheme_handler_factory_t</body>
</methods>

<methods>
<class-id>CEF.Callback class</class-id> <category>instance creation</category>

<body package="ChromiumEmbeddedFramework-UI">typeName	^ #cef_callback_t</body>
</methods>

<methods>
<class-id>CEF.Client</class-id> <category>factory</category>

<body package="ChromiumEmbeddedFramework-UI">createBrowserSettings	^ BrowserSettings onNewObject		localStorage: #STATE_DISABLED;		plugins: #STATE_DISABLED;		yourself</body>

<body package="ChromiumEmbeddedFramework-UI">createWindowInfo	^ self lib createWindowInfoFor: self mainWindow bounds: self browserRectangle</body>
</methods>

<methods>
<class-id>CEF.Client</class-id> <category>private</category>

<body package="ChromiumEmbeddedFramework-UI">browserRectangle	^ self areaPart globalBounds</body>

<body package="ChromiumEmbeddedFramework-UI">mainWindow	^ self areaPart topComponent</body>

<body package="ChromiumEmbeddedFramework-UI">restoreFocus	" CEF got the keyboard focus, let's take it back "	| win |	win := self mainWindow.	[	self osLib setFocus: 0;			setFocus: win windowHandle	] uiEventFor: win.</body>
</methods>

<methods>
<class-id>CEF.Client</class-id> <category>accessing</category>

<body package="ChromiumEmbeddedFramework-UI">areaPart	^ areaPart</body>

<body package="ChromiumEmbeddedFramework-UI">areaPart: aAreaPart 	areaPart := aAreaPart.</body>

<body package="ChromiumEmbeddedFramework-UI">browser	" this will be populated in #onAfterCreated, not immediately "		^ createdBrowser</body>
</methods>

<methods>
<class-id>CEF.Client</class-id> <category>externals</category>

<body package="ChromiumEmbeddedFramework-UI">browserSettings	^ self externalAt: #browserSettings ifAbsentPut: [ self createBrowserSettings ]</body>

<body package="ChromiumEmbeddedFramework-UI">windowInfo	^ self externalAt: #windowInfo ifAbsentPut: [ self createWindowInfo ]</body>
</methods>

<methods>
<class-id>CEF.Client</class-id> <category>lifecycle-private</category>

<body package="ChromiumEmbeddedFramework-UI">doStart	MainApp ensureIsRunning.	self startBrowser.</body>

<body package="ChromiumEmbeddedFramework-UI">doStop	self browser ifNotNil: [ :b |b stop ].</body>

<body package="ChromiumEmbeddedFramework-UI">startBrowser	| win client browserSettings |	win := self windowInfo.	client := self cefObject.	browserSettings := self browserSettings cefObject.	self lib cef_browser_host_create_browser: win with: client with: nil with: browserSettings with: nil.</body>
</methods>

<methods>
<class-id>CEF.Client class</class-id> <category>accessing</category>

<body package="ChromiumEmbeddedFramework-UI">typeName	^ #cef_client_t</body>
</methods>

<methods>
<class-id>CEF.Client class</class-id> <category>private-events</category>

<body package="ChromiumEmbeddedFramework-UI">constructEventsTriggered	^super constructEventsTriggered		add: #createdBrowser;		add: #loading;		add: #loaded;		add: #loadError;		yourself</body>
</methods>

<methods>
<class-id>CEF.Client class</class-id> <category>instance creation</category>

<body package="ChromiumEmbeddedFramework-UI">areaPart: aAreaPart 	^ self onNewObject areaPart: aAreaPart;		yourself</body>
</methods>

<methods>
<class-id>CEF.Response class</class-id> <category>accessing</category>

<body package="ChromiumEmbeddedFramework-UI">typeName	^ #'cef_response_t'</body>
</methods>

<methods>
<class-id>External.CCompositePointer</class-id> <category>converting</category>

<body package="ChromiumEmbeddedFramework-UI">cefAsSmalltalkArg	( CEF.Base classForType: self type referentType ) 		ifNotNil: 		[: wrapperClass |			"CEF.Log debugLog: 'auto wrapping ' , wrapperClass fullName."			^ wrapperClass on: self isVolatile: true		].	self type cefIsString		ifTrue: [ ^ self cefAsString ].	^ super cefAsSmalltalkArg</body>
</methods>

<methods>
<class-id>External.CCompositePointer</class-id> <category>accessing</category>

<body package="ChromiumEmbeddedFramework-UI">cefRegistryKey	^ self referentAddress</body>
</methods>

<do-it>"Imported Classes:"</do-it>

<do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it>

<class>
<name>Object</name>
<environment>Core</environment>
<super></super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars></inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category>Kernel-Objects</category>
<attributes>
<package>Kernel-Objects</package>
</attributes>
</class>

<class>
<name>VisualPart</name>
<environment>Graphics</environment>
<super>Graphics.VisualComponent</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>container eventHandlers properties </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category>Graphics-Visual Objects</category>
<attributes>
<package>Graphics-Visual Objects</package>
</attributes>
</class>

<class>
<name>CCompositePointer</name>
<environment>External</environment>
<super>External.CPointer</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars></inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category>External-Data</category>
<attributes>
<package>External-Data</package>
</attributes>
</class>

</st-source>
