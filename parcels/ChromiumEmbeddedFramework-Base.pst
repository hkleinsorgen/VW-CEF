<?xml version="1.0"?>

<st-source>
<!-- 
Name: ChromiumEmbeddedFramework-Base
Notice: Licensed under the MIT license

Copyright (c) 2017 Holger Kleinsorgen

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
Comment: Chromium Embedded Framework (CEF) for VisualWorks.
Base package containing the library and some base extensions.

See 
https://bitbucket.org/chromiumembedded/cef

Still at an very early stage. 
Windows only.

Based on CEF 3.3112.1659.gfef43e0 (2017-09-06)

Contact: h . kleinsorgen - at - gmail . com

Licensed under the MIT license (see Copyright)
DevelopmentPrerequisites: #(#(#any 'ExternalInterfaceBashing' '') #(#any 'DLLCC' ''))
KSignature: #('definedClasses' 1 'definedClassesHash' 74454231050 'extendedClasses' 14 'extendedClassesHash' 4231070110)
KSignatureV2: #('definedClasses' 1 'definedClassesHash' 66634394766601591088516005686375011569720097767 'extendedClasses' 14 'extendedClassesHash' 1170063511041380387315990253139361142675030823089)
PackageName: ChromiumEmbeddedFramework-Base
Parcel: #('ChromiumEmbeddedFramework-Base')
ParcelDirectory: e:\develop\git\cef\parcels\ChromiumEmbeddedFramework-Base
PrerequisiteDescriptions: #(#(#name 'ExternalInterfaceBashing' #componentType #package) #(#name 'DLLCC' #componentType #package))
PrerequisiteParcels: #(#('ExternalInterfaceBashing' '') #('DLLCC' ''))
Version: 0.1.30
Date: 2:52:57 PM September 16, 2017
 -->
<time-stamp>From VisualWorks®, 8.1.1 of 10. März 2016 on 16. September 2017 at 14:52:57</time-stamp>


<do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it>

<name-space>
<name>CEF</name>
<environment>Smalltalk</environment>
<private>false</private>
<imports>
			private External.*
			private OS.*
			private Core.*
			</imports>
<category></category>
<attributes>
<package>ChromiumEmbeddedFramework-Base</package>
</attributes>
</name-space>

<class>
<name>LibChromium</name>
<environment>CEF</environment>
<super>External.ExternalInterface</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars></inst-vars>
<class-inst-vars>current </class-inst-vars>
<imports>
			private CEF.LibChromiumDictionary.*
			</imports>
<category>ExternalInterface-New</category>
<attributes>
<includeFiles><item>include/fixes.h</item> <item>include/window-styles.h</item></includeFiles>
<includeDirectories><item>include/capi</item> <item>include/c</item> <item>.</item></includeDirectories>
<libraryFiles><item>libcef.dll</item></libraryFiles>
<libraryDirectories><item>.</item></libraryDirectories>
<beVirtual>false</beVirtual>
<optimizationLevel>full</optimizationLevel>
<package>ChromiumEmbeddedFramework-Base</package>
</attributes>
</class>

<comment>
<class-id>CEF.LibChromium</class-id>
<body>C API of the Chromium Embedded Framework.</body>
</comment>

<shared-variable>
<name>LibChromiumDictionary</name>
<environment>CEF</environment>
<private>false</private>
<constant>false</constant>
<category>external dictionaries</category>
<attributes>
<package>ChromiumEmbeddedFramework-Base</package>
</attributes>
</shared-variable>

<methods>
<class-id>CEF.LibChromium</class-id> <category>procedures</category>

<body package="ChromiumEmbeddedFramework-Base">cef_binary_value_create: data with: data_size	&lt;C: cef_binary_value_t *  cef_binary_value_create(const void * data, size_t data_size)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_browser_host_create_browser: windowInfo with: client with: url with: settings with: request_context	&lt;C: int _threaded cef_browser_host_create_browser(const cef_window_info_t * windowInfo, struct _cef_client_t * client, const cef_string_t * url, const struct _cef_browser_settings_t * settings, struct _cef_request_context_t * request_context)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_browser_host_create_browser_sync: windowInfo with: client with: url with: settings with: request_context	&lt;C: cef_browser_t * cef_browser_host_create_browser_sync(const cef_window_info_t * windowInfo, struct _cef_client_t * client, const cef_string_t * url, const struct _cef_browser_settings_t * settings, struct _cef_request_context_t * request_context)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_clear_scheme_handler_factories	&lt;C: int cef_clear_scheme_handler_factories(void)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_command_line_create	&lt;C: cef_command_line_t *  cef_command_line_create(void)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_command_line_get_global	&lt;C: cef_command_line_t *  cef_command_line_get_global(void)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_cookie_manager_create_manager: path with: persist_session_cookies with: callback	&lt;C: cef_cookie_manager_t *  cef_cookie_manager_create_manager(const cef_string_t * path, int persist_session_cookies, struct _cef_completion_callback_t * callback)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_cookie_manager_get_global_manager: callback	&lt;C: cef_cookie_manager_t *  cef_cookie_manager_get_global_manager(struct _cef_completion_callback_t * callback)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_create_context_shared: other with: handler	&lt;C: cef_request_context_t *  cef_create_context_shared(cef_request_context_t * other, struct _cef_request_context_handler_t * handler)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_currently_on: threadId	&lt;C: int cef_currently_on(cef_thread_id_t threadId)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_dictionary_value_create	&lt;C: cef_dictionary_value_t *  cef_dictionary_value_create(void)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_do_message_loop_work	&lt;C: void cef_do_message_loop_work(void)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_drag_data_create	&lt;C: cef_drag_data_t *  cef_drag_data_create(void)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_enable_highdpi_support	&lt;C: void cef_enable_highdpi_support(void)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_execute_process: args with: application with: windows_sandbox_info	&lt;C: int cef_execute_process(const struct _cef_main_args_t * args, cef_app_t * application, void * windows_sandbox_info)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_image_create	&lt;C: cef_image_t *  cef_image_create(void)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_initialize: args with: settings with: application with: windows_sandbox_info	&lt;C: int cef_initialize(const struct _cef_main_args_t * args, const struct _cef_settings_t * settings, cef_app_t * application, void * windows_sandbox_info)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_is_cert_status_error: status	&lt;C: int cef_is_cert_status_error(cef_cert_status_t status)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_is_cert_status_minor_error: status	&lt;C: int cef_is_cert_status_minor_error(cef_cert_status_t status)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_is_web_plugin_unstable: path with: callback	&lt;C: void cef_is_web_plugin_unstable(const cef_string_t * path, cef_web_plugin_unstable_callback_t * callback)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_list_value_create	&lt;C: cef_list_value_t *  cef_list_value_create(void)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_menu_model_create: delegate	&lt;C: cef_menu_model_t *  cef_menu_model_create(struct _cef_menu_model_delegate_t * delegate)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_post_data_create	&lt;C: cef_post_data_t *  cef_post_data_create(void)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_post_data_element_create	&lt;C: cef_post_data_element_t *  cef_post_data_element_create(void)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_post_delayed_task: threadId with: task with: delay_ms	&lt;C: int cef_post_delayed_task(cef_thread_id_t threadId, cef_task_t * task, int64 delay_ms)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_post_task: threadId with: task	&lt;C: int cef_post_task(cef_thread_id_t threadId, cef_task_t * task)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_print_settings_create	&lt;C: cef_print_settings_t *  cef_print_settings_create(void)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_process_message_create: name	&lt;C: cef_process_message_t *  cef_process_message_create(const cef_string_t * name)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_quit_message_loop	&lt;C: void cef_quit_message_loop(void)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_refresh_web_plugins	&lt;C: void cef_refresh_web_plugins(void)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_register_extension: extension_name with: javascript_code with: handler	&lt;C: int cef_register_extension(const cef_string_t * extension_name, const cef_string_t * javascript_code, cef_v8handler_t * handler)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_register_scheme_handler_factory: scheme_name with: domain_name with: factory	&lt;C: int cef_register_scheme_handler_factory(const cef_string_t * scheme_name, const cef_string_t * domain_name, cef_scheme_handler_factory_t * factory)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_register_web_plugin_crash: path	&lt;C: void cef_register_web_plugin_crash(const cef_string_t * path)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_register_widevine_cdm: path with: callback	&lt;C: void cef_register_widevine_cdm(const cef_string_t * path, cef_register_cdm_callback_t * callback)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_request_context_create_context: settings with: handler	&lt;C: cef_request_context_t *  cef_request_context_create_context(const struct _cef_request_context_settings_t * settings, struct _cef_request_context_handler_t * handler)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_request_context_get_global_context	&lt;C: cef_request_context_t *  cef_request_context_get_global_context(void)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_request_create	&lt;C: cef_request_t *  cef_request_create(void)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_response_create	&lt;C: cef_response_t *  cef_response_create(void)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_run_message_loop	&lt;C: void cef_run_message_loop(void)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_set_osmodal_loop: osModalLoop	&lt;C: void cef_set_osmodal_loop(int osModalLoop)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_shutdown	&lt;C: void cef_shutdown(void)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_stream_reader_create_for_data: data with: size	&lt;C: cef_stream_reader_t *  cef_stream_reader_create_for_data(void * data, size_t size)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_stream_reader_create_for_file: fileName	&lt;C: cef_stream_reader_t *  cef_stream_reader_create_for_file(const cef_string_t * fileName)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_stream_reader_create_for_handler: handler	&lt;C: cef_stream_reader_t *  cef_stream_reader_create_for_handler(cef_read_handler_t * handler)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_stream_writer_create_for_file: fileName	&lt;C: cef_stream_writer_t *  cef_stream_writer_create_for_file(const cef_string_t * fileName)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_stream_writer_create_for_handler: handler	&lt;C: cef_stream_writer_t *  cef_stream_writer_create_for_handler(cef_write_handler_t * handler)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_string_ascii_to_utf16: src with: src_len with: output	&lt;C: int cef_string_ascii_to_utf16(const char * src, size_t src_len, cef_string_utf16_t * output)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_string_ascii_to_wide: src with: src_len with: output	&lt;C: int cef_string_ascii_to_wide(const char * src, size_t src_len, cef_string_wide_t * output)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_string_list_alloc	&lt;C: cef_string_list_t cef_string_list_alloc(void)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_string_list_append: list with: value	&lt;C: void cef_string_list_append(cef_string_list_t list, const cef_string_t * value)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_string_list_clear: list	&lt;C: void cef_string_list_clear(cef_string_list_t list)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_string_list_copy: list	&lt;C: cef_string_list_t cef_string_list_copy(cef_string_list_t list)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_string_list_free: list	&lt;C: void cef_string_list_free(cef_string_list_t list)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_string_list_size: list	&lt;C: size_t cef_string_list_size(cef_string_list_t list)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_string_list_value: list with: index with: value	&lt;C: int cef_string_list_value(cef_string_list_t list, size_t index, cef_string_t * value)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_string_map_alloc	&lt;C: cef_string_map_t cef_string_map_alloc(void)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_string_map_append: map with: key with: value	&lt;C: int cef_string_map_append(cef_string_map_t map, const cef_string_t * key, const cef_string_t * value)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_string_map_clear: map	&lt;C: void cef_string_map_clear(cef_string_map_t map)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_string_map_find: map with: key with: value	&lt;C: int cef_string_map_find(cef_string_map_t map, const cef_string_t * key, cef_string_t * value)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_string_map_free: map	&lt;C: void cef_string_map_free(cef_string_map_t map)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_string_map_key: map with: index with: key	&lt;C: int cef_string_map_key(cef_string_map_t map, size_t index, cef_string_t * key)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_string_map_size: map	&lt;C: size_t cef_string_map_size(cef_string_map_t map)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_string_map_value: map with: index with: value	&lt;C: int cef_string_map_value(cef_string_map_t map, size_t index, cef_string_t * value)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_string_multimap_alloc	&lt;C: cef_string_multimap_t cef_string_multimap_alloc(void)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_string_multimap_append: map with: key with: value	&lt;C: int cef_string_multimap_append(cef_string_multimap_t map, const cef_string_t * key, const cef_string_t * value)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_string_multimap_clear: map	&lt;C: void cef_string_multimap_clear(cef_string_multimap_t map)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_string_multimap_enumerate: map with: key with: value_index with: value	&lt;C: int cef_string_multimap_enumerate(cef_string_multimap_t map, const cef_string_t * key, size_t value_index, cef_string_t * value)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_string_multimap_find_count: map with: key	&lt;C: size_t cef_string_multimap_find_count(cef_string_multimap_t map, const cef_string_t * key)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_string_multimap_free: map	&lt;C: void cef_string_multimap_free(cef_string_multimap_t map)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_string_multimap_key: map with: index with: key	&lt;C: int cef_string_multimap_key(cef_string_multimap_t map, size_t index, cef_string_t * key)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_string_multimap_size: map	&lt;C: size_t cef_string_multimap_size(cef_string_multimap_t map)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_string_multimap_value: map with: index with: value	&lt;C: int cef_string_multimap_value(cef_string_multimap_t map, size_t index, cef_string_t * value)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_string_userfree_utf16_alloc	&lt;C: cef_string_userfree_utf16_t cef_string_userfree_utf16_alloc(void)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_string_userfree_utf16_free: str	&lt;C: void cef_string_userfree_utf16_free(cef_string_userfree_utf16_t str)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_string_userfree_utf8_alloc	&lt;C: cef_string_userfree_utf8_t cef_string_userfree_utf8_alloc(void)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_string_userfree_utf8_free: str	&lt;C: void cef_string_userfree_utf8_free(cef_string_userfree_utf8_t str)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_string_userfree_wide_alloc	&lt;C: cef_string_userfree_wide_t cef_string_userfree_wide_alloc(void)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_string_userfree_wide_free: str	&lt;C: void cef_string_userfree_wide_free(cef_string_userfree_wide_t str)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_string_utf16_clear: str	&lt;C: void cef_string_utf16_clear(cef_string_utf16_t * str)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_string_utf16_cmp: str1 with: str2	&lt;C: int cef_string_utf16_cmp(const cef_string_utf16_t * str1, const cef_string_utf16_t * str2)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_string_utf16_set: src with: src_len with: output with: copy	&lt;C: int cef_string_utf16_set(const char16 * src, size_t src_len, cef_string_utf16_t * output, int copy)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_string_utf16_to_lower: src with: src_len with: output	&lt;C: int cef_string_utf16_to_lower(const char16 * src, size_t src_len, cef_string_utf16_t * output)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_string_utf16_to_upper: src with: src_len with: output	&lt;C: int cef_string_utf16_to_upper(const char16 * src, size_t src_len, cef_string_utf16_t * output)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_string_utf16_to_utf8: src with: src_len with: output	&lt;C: int cef_string_utf16_to_utf8(const char16 * src, size_t src_len, cef_string_utf8_t * output)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_string_utf16_to_wide: src with: src_len with: output	&lt;C: int cef_string_utf16_to_wide(const char16 * src, size_t src_len, cef_string_wide_t * output)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_string_utf8_clear: str	&lt;C: void cef_string_utf8_clear(cef_string_utf8_t * str)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_string_utf8_cmp: str1 with: str2	&lt;C: int cef_string_utf8_cmp(const cef_string_utf8_t * str1, const cef_string_utf8_t * str2)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_string_utf8_set: src with: src_len with: output with: copy	&lt;C: int cef_string_utf8_set(const char * src, size_t src_len, cef_string_utf8_t * output, int copy)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_string_utf8_to_utf16: src with: src_len with: output	&lt;C: int cef_string_utf8_to_utf16(const char * src, size_t src_len, cef_string_utf16_t * output)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_string_utf8_to_wide: src with: src_len with: output	&lt;C: int cef_string_utf8_to_wide(const char * src, size_t src_len, cef_string_wide_t * output)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_string_wide_clear: str	&lt;C: void cef_string_wide_clear(cef_string_wide_t * str)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_string_wide_cmp: str1 with: str2	&lt;C: int cef_string_wide_cmp(const cef_string_wide_t * str1, const cef_string_wide_t * str2)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_string_wide_set: src with: src_len with: output with: copy	&lt;C: int cef_string_wide_set(const wchar_t * src, size_t src_len, cef_string_wide_t * output, int copy)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_string_wide_to_utf16: src with: src_len with: output	&lt;C: int cef_string_wide_to_utf16(const wchar_t * src, size_t src_len, cef_string_utf16_t * output)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_string_wide_to_utf8: src with: src_len with: output	&lt;C: int cef_string_wide_to_utf8(const wchar_t * src, size_t src_len, cef_string_utf8_t * output)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_task_runner_get_for_current_thread	&lt;C: cef_task_runner_t *  cef_task_runner_get_for_current_thread(void)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_task_runner_get_for_thread: threadId	&lt;C: cef_task_runner_t *  cef_task_runner_get_for_thread(cef_thread_id_t threadId)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_time_delta: cef_time1 with: cef_time2 with: delta	&lt;C: int cef_time_delta(const cef_time_t * cef_time1, const cef_time_t * cef_time2, long long * delta)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_time_from_doublet: time with: cef_time	&lt;C: int cef_time_from_doublet(double time, cef_time_t * cef_time)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_time_from_timet: time with: cef_time	&lt;C: int cef_time_from_timet(time_t time, cef_time_t * cef_time)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_time_now: cef_time	&lt;C: int cef_time_now(cef_time_t * cef_time)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_time_to_doublet: cef_time with: time	&lt;C: int cef_time_to_doublet(const cef_time_t * cef_time, double * time)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_time_to_timet: cef_time with: time	&lt;C: int cef_time_to_timet(const cef_time_t * cef_time, time_t * time)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_unregister_internal_web_plugin: path	&lt;C: void cef_unregister_internal_web_plugin(const cef_string_t * path)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_v8context_get_current_context	&lt;C: cef_v8context_t *  cef_v8context_get_current_context(void)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_v8context_get_entered_context	&lt;C: cef_v8context_t *  cef_v8context_get_entered_context(void)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_v8context_in_context	&lt;C: int cef_v8context_in_context(void)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_v8stack_trace_get_current: frame_limit	&lt;C: cef_v8stack_trace_t *  cef_v8stack_trace_get_current(int frame_limit)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_v8value_create_array: length	&lt;C: cef_v8value_t *  cef_v8value_create_array(int length)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_v8value_create_bool: value	&lt;C: cef_v8value_t *  cef_v8value_create_bool(int value)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_v8value_create_date: date	&lt;C: cef_v8value_t *  cef_v8value_create_date(const cef_time_t * date)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_v8value_create_double: value	&lt;C: cef_v8value_t *  cef_v8value_create_double(double value)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_v8value_create_function: name with: handler	&lt;C: cef_v8value_t *  cef_v8value_create_function(const cef_string_t * name, cef_v8handler_t * handler)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_v8value_create_int: value	&lt;C: cef_v8value_t *  cef_v8value_create_int(int32 value)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_v8value_create_null	&lt;C: cef_v8value_t *  cef_v8value_create_null(void)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_v8value_create_object: accessor with: interceptor	&lt;C: cef_v8value_t *  cef_v8value_create_object(cef_v8accessor_t * accessor, cef_v8interceptor_t * interceptor)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_v8value_create_string: value	&lt;C: cef_v8value_t *  cef_v8value_create_string(const cef_string_t * value)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_v8value_create_uint: value	&lt;C: cef_v8value_t *  cef_v8value_create_uint(uint32 value)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_v8value_create_undefined	&lt;C: cef_v8value_t *  cef_v8value_create_undefined(void)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_value_create	&lt;C: cef_value_t *  cef_value_create(void)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cef_visit_web_plugin_info: visitor	&lt;C: void cef_visit_web_plugin_info(cef_web_plugin_info_visitor_t * visitor)&gt;	^self externalAccessFailedWith: _errorCode</body>
</methods>

<methods>
<class-id>OS.Win32SystemSupport</class-id> <category>procedures</category>

<body package="ChromiumEmbeddedFramework-Base">cefDestroyWindow: hWnd 	&lt;C: BOOL DestroyWindow(HWND hWnd )&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cefGetModuleHandle: lpModuleName	&lt;C: HMODULE GetModuleHandleA(LPCTSTR lpModuleName)&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cefSetFocus: hWnd 	&lt;C: HWND SetFocus(HWND hWnd )&gt;	^self externalAccessFailedWith: _errorCode</body>

<body package="ChromiumEmbeddedFramework-Base">cefSetWindowPos: hWnd insertAfter: hWndInsertAfter x: X y: Y cx: cx cy: cy flags: uFlags	&lt;C: BOOL SetWindowPos(          HWND hWnd,    HWND hWndInsertAfter,    int X,    int Y,    int cx,    int cy,    UINT uFlags)&gt;	^self externalAccessFailedWith: _errorCode</body>
</methods>

<methods>
<class-id>CEF.LibChromium</class-id> <category>types</category>

<body package="ChromiumEmbeddedFramework-Base">DWORD	&lt;C: typedef unsigned long DWORD&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">HCURSOR	&lt;C: typedef void * HCURSOR&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">HINSTANCE	&lt;C: typedef void * HINSTANCE&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">HMENU	&lt;C: typedef void * HMENU&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">HWND	&lt;C: typedef void * HWND&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">LONG	&lt;C: typedef long LONG&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">LPARAM	&lt;C: typedef LONG LPARAM&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">MSG	&lt;C: typedef struct tagMSG MSG&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">POINT	&lt;C: typedef struct tagPOINT POINT&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">UINT	&lt;C: typedef unsigned int UINT&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">ULONG	&lt;C: typedef DWORD ULONG&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">WORD	&lt;C: typedef unsigned short WORD&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">WPARAM	&lt;C: typedef UINT WPARAM&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_accessibility_handler_t	&lt;C: typedef struct _cef_accessibility_handler_t cef_accessibility_handler_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_alpha_type_t	&lt;C: typedef enum {			CEF_ALPHA_TYPE_OPAQUE, 			CEF_ALPHA_TYPE_PREMULTIPLIED, 			CEF_ALPHA_TYPE_POSTMULTIPLIED		} cef_alpha_type_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_app_t	&lt;C: typedef struct _cef_app_t cef_app_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_auth_callback_t	&lt;C: typedef struct _cef_auth_callback_t cef_auth_callback_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_base_ref_counted_t	&lt;C: typedef struct _cef_base_ref_counted_t cef_base_ref_counted_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_base_scoped_t	&lt;C: typedef struct _cef_base_scoped_t cef_base_scoped_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_before_download_callback_t	&lt;C: typedef struct _cef_before_download_callback_t cef_before_download_callback_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_binary_value_t	&lt;C: typedef struct _cef_binary_value_t cef_binary_value_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_box_layout_settings_t	&lt;C: typedef struct _cef_box_layout_settings_t cef_box_layout_settings_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_browser_host_t	&lt;C: typedef struct _cef_browser_host_t cef_browser_host_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_browser_process_handler_t	&lt;C: typedef struct _cef_browser_process_handler_t cef_browser_process_handler_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_browser_settings_t	&lt;C: typedef struct _cef_browser_settings_t cef_browser_settings_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_browser_t	&lt;C: typedef struct _cef_browser_t cef_browser_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_button_state_t	&lt;C: typedef enum {			CEF_BUTTON_STATE_NORMAL, 			CEF_BUTTON_STATE_HOVERED, 			CEF_BUTTON_STATE_PRESSED, 			CEF_BUTTON_STATE_DISABLED		} cef_button_state_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_callback_t	&lt;C: typedef struct _cef_callback_t cef_callback_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_cdm_registration_error_t	&lt;C: typedef enum {			CEF_CDM_REGISTRATION_ERROR_NONE, 			CEF_CDM_REGISTRATION_ERROR_INCORRECT_CONTENTS, 			CEF_CDM_REGISTRATION_ERROR_INCOMPATIBLE, 			CEF_CDM_REGISTRATION_ERROR_NOT_SUPPORTED		} cef_cdm_registration_error_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_cert_status_t	&lt;C: typedef enum {			CERT_STATUS_NONE, 			CERT_STATUS_COMMON_NAME_INVALID, 			CERT_STATUS_DATE_INVALID, 			CERT_STATUS_AUTHORITY_INVALID = 4, 			CERT_STATUS_NO_REVOCATION_MECHANISM = 16, 			CERT_STATUS_UNABLE_TO_CHECK_REVOCATION = 32, 			CERT_STATUS_REVOKED = 64, 			CERT_STATUS_INVALID = 128, 			CERT_STATUS_WEAK_SIGNATURE_ALGORITHM = 256, 			CERT_STATUS_NON_UNIQUE_NAME = 1024, 			CERT_STATUS_WEAK_KEY = 2048, 			CERT_STATUS_PINNED_KEY_MISSING = 8192, 			CERT_STATUS_NAME_CONSTRAINT_VIOLATION = 16384, 			CERT_STATUS_VALIDITY_TOO_LONG = 32768, 			CERT_STATUS_IS_EV = 65536, 			CERT_STATUS_REV_CHECKING_ENABLED = 131072, 			CERT_STATUS_SHA1_SIGNATURE_PRESENT = 524288, 			CERT_STATUS_CT_COMPLIANCE_FAILED = 1048576		} cef_cert_status_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_char_t	&lt;C: typedef char16 cef_char_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_client_t	&lt;C: typedef struct _cef_client_t cef_client_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_color_model_t	&lt;C: typedef enum {			COLOR_MODEL_UNKNOWN, 			COLOR_MODEL_GRAY, 			COLOR_MODEL_COLOR, 			COLOR_MODEL_CMYK, 			COLOR_MODEL_CMY, 			COLOR_MODEL_KCMY, 			COLOR_MODEL_CMY_K, 			COLOR_MODEL_BLACK, 			COLOR_MODEL_GRAYSCALE, 			COLOR_MODEL_RGB, 			COLOR_MODEL_RGB16, 			COLOR_MODEL_RGBA, 			COLOR_MODEL_COLORMODE_COLOR, 			COLOR_MODEL_COLORMODE_MONOCHROME, 			COLOR_MODEL_HP_COLOR_COLOR, 			COLOR_MODEL_HP_COLOR_BLACK, 			COLOR_MODEL_PRINTOUTMODE_NORMAL, 			COLOR_MODEL_PRINTOUTMODE_NORMAL_GRAY, 			COLOR_MODEL_PROCESSCOLORMODEL_CMYK, 			COLOR_MODEL_PROCESSCOLORMODEL_GREYSCALE, 			COLOR_MODEL_PROCESSCOLORMODEL_RGB		} cef_color_model_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_color_t	&lt;C: typedef uint32 cef_color_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_color_type_t	&lt;C: typedef enum {			CEF_COLOR_TYPE_RGBA_8888, 			CEF_COLOR_TYPE_BGRA_8888		} cef_color_type_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_com_init_mode_t	&lt;C: typedef enum {			COM_INIT_MODE_NONE, 			COM_INIT_MODE_STA, 			COM_INIT_MODE_MTA		} cef_com_init_mode_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_command_line_t	&lt;C: typedef struct _cef_command_line_t cef_command_line_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_completion_callback_t	&lt;C: typedef struct _cef_completion_callback_t cef_completion_callback_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_composition_underline_t	&lt;C: typedef struct _cef_composition_underline_t cef_composition_underline_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_context_menu_edit_state_flags_t	&lt;C: typedef enum {			CM_EDITFLAG_NONE, 			CM_EDITFLAG_CAN_UNDO, 			CM_EDITFLAG_CAN_REDO, 			CM_EDITFLAG_CAN_CUT = 4, 			CM_EDITFLAG_CAN_COPY = 8, 			CM_EDITFLAG_CAN_PASTE = 16, 			CM_EDITFLAG_CAN_DELETE = 32, 			CM_EDITFLAG_CAN_SELECT_ALL = 64, 			CM_EDITFLAG_CAN_TRANSLATE = 128		} cef_context_menu_edit_state_flags_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_context_menu_handler_t	&lt;C: typedef struct _cef_context_menu_handler_t cef_context_menu_handler_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_context_menu_media_state_flags_t	&lt;C: typedef enum {			CM_MEDIAFLAG_NONE, 			CM_MEDIAFLAG_ERROR, 			CM_MEDIAFLAG_PAUSED, 			CM_MEDIAFLAG_MUTED = 4, 			CM_MEDIAFLAG_LOOP = 8, 			CM_MEDIAFLAG_CAN_SAVE = 16, 			CM_MEDIAFLAG_HAS_AUDIO = 32, 			CM_MEDIAFLAG_HAS_VIDEO = 64, 			CM_MEDIAFLAG_CONTROL_ROOT_ELEMENT = 128, 			CM_MEDIAFLAG_CAN_PRINT = 256, 			CM_MEDIAFLAG_CAN_ROTATE = 512		} cef_context_menu_media_state_flags_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_context_menu_media_type_t	&lt;C: typedef enum {			CM_MEDIATYPE_NONE, 			CM_MEDIATYPE_IMAGE, 			CM_MEDIATYPE_VIDEO, 			CM_MEDIATYPE_AUDIO, 			CM_MEDIATYPE_FILE, 			CM_MEDIATYPE_PLUGIN		} cef_context_menu_media_type_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_context_menu_params_t	&lt;C: typedef struct _cef_context_menu_params_t cef_context_menu_params_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_context_menu_type_flags_t	&lt;C: typedef enum {			CM_TYPEFLAG_NONE, 			CM_TYPEFLAG_PAGE, 			CM_TYPEFLAG_FRAME, 			CM_TYPEFLAG_LINK = 4, 			CM_TYPEFLAG_MEDIA = 8, 			CM_TYPEFLAG_SELECTION = 16, 			CM_TYPEFLAG_EDITABLE = 32		} cef_context_menu_type_flags_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_cookie_manager_t	&lt;C: typedef struct _cef_cookie_manager_t cef_cookie_manager_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_cookie_t	&lt;C: typedef struct _cef_cookie_t cef_cookie_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_cookie_visitor_t	&lt;C: typedef struct _cef_cookie_visitor_t cef_cookie_visitor_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_cross_axis_alignment_t	&lt;C: typedef enum {			CEF_CROSS_AXIS_ALIGNMENT_STRETCH, 			CEF_CROSS_AXIS_ALIGNMENT_START, 			CEF_CROSS_AXIS_ALIGNMENT_CENTER, 			CEF_CROSS_AXIS_ALIGNMENT_END		} cef_cross_axis_alignment_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_cursor_info_t	&lt;C: typedef struct _cef_cursor_info_t cef_cursor_info_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_cursor_type_t	&lt;C: typedef enum {			CT_POINTER, 			CT_CROSS, 			CT_HAND, 			CT_IBEAM, 			CT_WAIT, 			CT_HELP, 			CT_EASTRESIZE, 			CT_NORTHRESIZE, 			CT_NORTHEASTRESIZE, 			CT_NORTHWESTRESIZE, 			CT_SOUTHRESIZE, 			CT_SOUTHEASTRESIZE, 			CT_SOUTHWESTRESIZE, 			CT_WESTRESIZE, 			CT_NORTHSOUTHRESIZE, 			CT_EASTWESTRESIZE, 			CT_NORTHEASTSOUTHWESTRESIZE, 			CT_NORTHWESTSOUTHEASTRESIZE, 			CT_COLUMNRESIZE, 			CT_ROWRESIZE, 			CT_MIDDLEPANNING, 			CT_EASTPANNING, 			CT_NORTHPANNING, 			CT_NORTHEASTPANNING, 			CT_NORTHWESTPANNING, 			CT_SOUTHPANNING, 			CT_SOUTHEASTPANNING, 			CT_SOUTHWESTPANNING, 			CT_WESTPANNING, 			CT_MOVE, 			CT_VERTICALTEXT, 			CT_CELL, 			CT_CONTEXTMENU, 			CT_ALIAS, 			CT_PROGRESS, 			CT_NODROP, 			CT_COPY, 			CT_NONE, 			CT_NOTALLOWED, 			CT_ZOOMIN, 			CT_ZOOMOUT, 			CT_GRAB, 			CT_GRABBING, 			CT_CUSTOM		} cef_cursor_type_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_delete_cookies_callback_t	&lt;C: typedef struct _cef_delete_cookies_callback_t cef_delete_cookies_callback_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_dialog_handler_t	&lt;C: typedef struct _cef_dialog_handler_t cef_dialog_handler_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_dictionary_value_t	&lt;C: typedef struct _cef_dictionary_value_t cef_dictionary_value_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_display_handler_t	&lt;C: typedef struct _cef_display_handler_t cef_display_handler_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_dom_document_type_t	&lt;C: typedef enum {			DOM_DOCUMENT_TYPE_UNKNOWN, 			DOM_DOCUMENT_TYPE_HTML, 			DOM_DOCUMENT_TYPE_XHTML, 			DOM_DOCUMENT_TYPE_PLUGIN		} cef_dom_document_type_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_dom_event_category_t	&lt;C: typedef enum {			DOM_EVENT_CATEGORY_UNKNOWN, 			DOM_EVENT_CATEGORY_UI, 			DOM_EVENT_CATEGORY_MOUSE, 			DOM_EVENT_CATEGORY_MUTATION = 4, 			DOM_EVENT_CATEGORY_KEYBOARD = 8, 			DOM_EVENT_CATEGORY_TEXT = 16, 			DOM_EVENT_CATEGORY_COMPOSITION = 32, 			DOM_EVENT_CATEGORY_DRAG = 64, 			DOM_EVENT_CATEGORY_CLIPBOARD = 128, 			DOM_EVENT_CATEGORY_MESSAGE = 256, 			DOM_EVENT_CATEGORY_WHEEL = 512, 			DOM_EVENT_CATEGORY_BEFORE_TEXT_INSERTED = 1024, 			DOM_EVENT_CATEGORY_OVERFLOW = 2048, 			DOM_EVENT_CATEGORY_PAGE_TRANSITION = 4096, 			DOM_EVENT_CATEGORY_POPSTATE = 8192, 			DOM_EVENT_CATEGORY_PROGRESS = 16384, 			DOM_EVENT_CATEGORY_XMLHTTPREQUEST_PROGRESS = 32768		} cef_dom_event_category_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_dom_event_phase_t	&lt;C: typedef enum {			DOM_EVENT_PHASE_UNKNOWN, 			DOM_EVENT_PHASE_CAPTURING, 			DOM_EVENT_PHASE_AT_TARGET, 			DOM_EVENT_PHASE_BUBBLING		} cef_dom_event_phase_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_dom_node_type_t	&lt;C: typedef enum {			DOM_NODE_TYPE_UNSUPPORTED, 			DOM_NODE_TYPE_ELEMENT, 			DOM_NODE_TYPE_ATTRIBUTE, 			DOM_NODE_TYPE_TEXT, 			DOM_NODE_TYPE_CDATA_SECTION, 			DOM_NODE_TYPE_PROCESSING_INSTRUCTIONS, 			DOM_NODE_TYPE_COMMENT, 			DOM_NODE_TYPE_DOCUMENT, 			DOM_NODE_TYPE_DOCUMENT_TYPE, 			DOM_NODE_TYPE_DOCUMENT_FRAGMENT		} cef_dom_node_type_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_domdocument_t	&lt;C: typedef struct _cef_domdocument_t cef_domdocument_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_domnode_t	&lt;C: typedef struct _cef_domnode_t cef_domnode_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_domvisitor_t	&lt;C: typedef struct _cef_domvisitor_t cef_domvisitor_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_download_handler_t	&lt;C: typedef struct _cef_download_handler_t cef_download_handler_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_download_image_callback_t	&lt;C: typedef struct _cef_download_image_callback_t cef_download_image_callback_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_download_item_callback_t	&lt;C: typedef struct _cef_download_item_callback_t cef_download_item_callback_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_download_item_t	&lt;C: typedef struct _cef_download_item_t cef_download_item_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_drag_data_t	&lt;C: typedef struct _cef_drag_data_t cef_drag_data_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_drag_handler_t	&lt;C: typedef struct _cef_drag_handler_t cef_drag_handler_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_drag_operations_mask_t	&lt;C: typedef enum {			DRAG_OPERATION_NONE, 			DRAG_OPERATION_COPY, 			DRAG_OPERATION_LINK, 			DRAG_OPERATION_GENERIC = 4, 			DRAG_OPERATION_PRIVATE = 8, 			DRAG_OPERATION_MOVE = 16, 			DRAG_OPERATION_DELETE = 32, 			DRAG_OPERATION_EVERY = 1		} cef_drag_operations_mask_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_draggable_region_t	&lt;C: typedef struct _cef_draggable_region_t cef_draggable_region_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_duplex_mode_t	&lt;C: typedef enum {			DUPLEX_MODE_UNKNOWN = -1, 			DUPLEX_MODE_SIMPLEX, 			DUPLEX_MODE_LONG_EDGE, 			DUPLEX_MODE_SHORT_EDGE		} cef_duplex_mode_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_errorcode_t	&lt;C: typedef enum {			ERR_NONE, 			ERR_FAILED = -2, 			ERR_ABORTED = -3, 			ERR_INVALID_ARGUMENT = -4, 			ERR_INVALID_HANDLE = -5, 			ERR_FILE_NOT_FOUND = -6, 			ERR_TIMED_OUT = -7, 			ERR_FILE_TOO_BIG = -8, 			ERR_UNEXPECTED = -9, 			ERR_ACCESS_DENIED = -10, 			ERR_NOT_IMPLEMENTED = -11, 			ERR_CONNECTION_CLOSED = -100, 			ERR_CONNECTION_RESET = -101, 			ERR_CONNECTION_REFUSED = -102, 			ERR_CONNECTION_ABORTED = -103, 			ERR_CONNECTION_FAILED = -104, 			ERR_NAME_NOT_RESOLVED = -105, 			ERR_INTERNET_DISCONNECTED = -106, 			ERR_SSL_PROTOCOL_ERROR = -107, 			ERR_ADDRESS_INVALID = -108, 			ERR_ADDRESS_UNREACHABLE = -109, 			ERR_SSL_CLIENT_AUTH_CERT_NEEDED = -110, 			ERR_TUNNEL_CONNECTION_FAILED = -111, 			ERR_NO_SSL_VERSIONS_ENABLED = -112, 			ERR_SSL_VERSION_OR_CIPHER_MISMATCH = -113, 			ERR_SSL_RENEGOTIATION_REQUESTED = -114, 			ERR_CERT_COMMON_NAME_INVALID = -200, 			ERR_CERT_BEGIN = 0, 			ERR_CERT_DATE_INVALID = -201, 			ERR_CERT_AUTHORITY_INVALID = -202, 			ERR_CERT_CONTAINS_ERRORS = -203, 			ERR_CERT_NO_REVOCATION_MECHANISM = -204, 			ERR_CERT_UNABLE_TO_CHECK_REVOCATION = -205, 			ERR_CERT_REVOKED = -206, 			ERR_CERT_INVALID = -207, 			ERR_CERT_WEAK_SIGNATURE_ALGORITHM = -208, 			ERR_CERT_NON_UNIQUE_NAME = -210, 			ERR_CERT_WEAK_KEY = -211, 			ERR_CERT_NAME_CONSTRAINT_VIOLATION = -212, 			ERR_CERT_VALIDITY_TOO_LONG = -213, 			ERR_CERT_END = 0, 			ERR_INVALID_URL = -300, 			ERR_DISALLOWED_URL_SCHEME = -301, 			ERR_UNKNOWN_URL_SCHEME = -302, 			ERR_TOO_MANY_REDIRECTS = -310, 			ERR_UNSAFE_REDIRECT = -311, 			ERR_UNSAFE_PORT = -312, 			ERR_INVALID_RESPONSE = -320, 			ERR_INVALID_CHUNKED_ENCODING = -321, 			ERR_METHOD_NOT_SUPPORTED = -322, 			ERR_UNEXPECTED_PROXY_AUTH = -323, 			ERR_EMPTY_RESPONSE = -324, 			ERR_RESPONSE_HEADERS_TOO_BIG = -325, 			ERR_CACHE_MISS = -400, 			ERR_INSECURE_RESPONSE = -501		} cef_errorcode_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_event_flags_t	&lt;C: typedef enum {			EVENTFLAG_NONE, 			EVENTFLAG_CAPS_LOCK_ON, 			EVENTFLAG_SHIFT_DOWN, 			EVENTFLAG_CONTROL_DOWN = 4, 			EVENTFLAG_ALT_DOWN = 8, 			EVENTFLAG_LEFT_MOUSE_BUTTON = 16, 			EVENTFLAG_MIDDLE_MOUSE_BUTTON = 32, 			EVENTFLAG_RIGHT_MOUSE_BUTTON = 64, 			EVENTFLAG_COMMAND_DOWN = 128, 			EVENTFLAG_NUM_LOCK_ON = 256, 			EVENTFLAG_IS_KEY_PAD = 512, 			EVENTFLAG_IS_LEFT = 1024, 			EVENTFLAG_IS_RIGHT = 2048		} cef_event_flags_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_file_dialog_callback_t	&lt;C: typedef struct _cef_file_dialog_callback_t cef_file_dialog_callback_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_file_dialog_mode_t	&lt;C: typedef enum {			FILE_DIALOG_OPEN, 			FILE_DIALOG_OPEN_MULTIPLE, 			FILE_DIALOG_OPEN_FOLDER, 			FILE_DIALOG_SAVE, 			FILE_DIALOG_TYPE_MASK = 255, 			FILE_DIALOG_OVERWRITEPROMPT_FLAG = 16777216, 			FILE_DIALOG_HIDEREADONLY_FLAG = 33554432		} cef_file_dialog_mode_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_find_handler_t	&lt;C: typedef struct _cef_find_handler_t cef_find_handler_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_focus_handler_t	&lt;C: typedef struct _cef_focus_handler_t cef_focus_handler_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_focus_source_t	&lt;C: typedef enum {			FOCUS_SOURCE_NAVIGATION, 			FOCUS_SOURCE_SYSTEM		} cef_focus_source_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_frame_t	&lt;C: typedef struct _cef_frame_t cef_frame_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_geolocation_callback_t	&lt;C: typedef struct _cef_geolocation_callback_t cef_geolocation_callback_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_geolocation_handler_t	&lt;C: typedef struct _cef_geolocation_handler_t cef_geolocation_handler_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_geoposition_error_code_t	&lt;C: typedef enum {			GEOPOSITON_ERROR_NONE, 			GEOPOSITON_ERROR_PERMISSION_DENIED, 			GEOPOSITON_ERROR_POSITION_UNAVAILABLE, 			GEOPOSITON_ERROR_TIMEOUT		} cef_geoposition_error_code_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_geoposition_t	&lt;C: typedef struct _cef_geoposition_t cef_geoposition_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_horizontal_alignment_t	&lt;C: typedef enum {			CEF_HORIZONTAL_ALIGNMENT_LEFT, 			CEF_HORIZONTAL_ALIGNMENT_CENTER, 			CEF_HORIZONTAL_ALIGNMENT_RIGHT		} cef_horizontal_alignment_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_image_t	&lt;C: typedef struct _cef_image_t cef_image_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_insets_t	&lt;C: typedef struct _cef_insets_t cef_insets_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_jsdialog_callback_t	&lt;C: typedef struct _cef_jsdialog_callback_t cef_jsdialog_callback_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_jsdialog_handler_t	&lt;C: typedef struct _cef_jsdialog_handler_t cef_jsdialog_handler_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_jsdialog_type_t	&lt;C: typedef enum {			JSDIALOGTYPE_ALERT, 			JSDIALOGTYPE_CONFIRM, 			JSDIALOGTYPE_PROMPT		} cef_jsdialog_type_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_json_parser_error_t	&lt;C: typedef enum {			JSON_NO_ERROR, 			JSON_INVALID_ESCAPE, 			JSON_SYNTAX_ERROR, 			JSON_UNEXPECTED_TOKEN, 			JSON_TRAILING_COMMA, 			JSON_TOO_MUCH_NESTING, 			JSON_UNEXPECTED_DATA_AFTER_ROOT, 			JSON_UNSUPPORTED_ENCODING, 			JSON_UNQUOTED_DICTIONARY_KEY, 			JSON_PARSE_ERROR_COUNT		} cef_json_parser_error_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_json_parser_options_t	&lt;C: typedef enum {			JSON_PARSER_RFC, 			JSON_PARSER_ALLOW_TRAILING_COMMAS		} cef_json_parser_options_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_json_writer_options_t	&lt;C: typedef enum {			JSON_WRITER_DEFAULT, 			JSON_WRITER_OMIT_BINARY_VALUES, 			JSON_WRITER_OMIT_DOUBLE_TYPE_PRESERVATION, 			JSON_WRITER_PRETTY_PRINT = 4		} cef_json_writer_options_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_key_event_t	&lt;C: typedef struct _cef_key_event_t cef_key_event_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_key_event_type_t	&lt;C: typedef enum {			KEYEVENT_RAWKEYDOWN, 			KEYEVENT_KEYDOWN, 			KEYEVENT_KEYUP, 			KEYEVENT_CHAR		} cef_key_event_type_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_keyboard_handler_t	&lt;C: typedef struct _cef_keyboard_handler_t cef_keyboard_handler_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_life_span_handler_t	&lt;C: typedef struct _cef_life_span_handler_t cef_life_span_handler_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_list_value_t	&lt;C: typedef struct _cef_list_value_t cef_list_value_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_load_handler_t	&lt;C: typedef struct _cef_load_handler_t cef_load_handler_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_log_severity_t	&lt;C: typedef enum {			LOGSEVERITY_DEFAULT, 			LOGSEVERITY_VERBOSE, 			LOGSEVERITY_INFO, 			LOGSEVERITY_WARNING, 			LOGSEVERITY_ERROR, 			LOGSEVERITY_DISABLE = 99		} cef_log_severity_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_main_args_t	&lt;C: typedef struct _cef_main_args_t cef_main_args_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_main_axis_alignment_t	&lt;C: typedef enum {			CEF_MAIN_AXIS_ALIGNMENT_START, 			CEF_MAIN_AXIS_ALIGNMENT_CENTER, 			CEF_MAIN_AXIS_ALIGNMENT_END		} cef_main_axis_alignment_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_menu_anchor_position_t	&lt;C: typedef enum {			CEF_MENU_ANCHOR_TOPLEFT, 			CEF_MENU_ANCHOR_TOPRIGHT, 			CEF_MENU_ANCHOR_BOTTOMCENTER		} cef_menu_anchor_position_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_menu_color_type_t	&lt;C: typedef enum {			CEF_MENU_COLOR_TEXT, 			CEF_MENU_COLOR_TEXT_HOVERED, 			CEF_MENU_COLOR_TEXT_ACCELERATOR, 			CEF_MENU_COLOR_TEXT_ACCELERATOR_HOVERED, 			CEF_MENU_COLOR_BACKGROUND, 			CEF_MENU_COLOR_BACKGROUND_HOVERED, 			CEF_MENU_COLOR_COUNT		} cef_menu_color_type_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_menu_id_t	&lt;C: typedef enum {			MENU_ID_BACK = 100, 			MENU_ID_FORWARD, 			MENU_ID_RELOAD, 			MENU_ID_RELOAD_NOCACHE, 			MENU_ID_STOPLOAD, 			MENU_ID_UNDO = 110, 			MENU_ID_REDO, 			MENU_ID_CUT, 			MENU_ID_COPY, 			MENU_ID_PASTE, 			MENU_ID_DELETE, 			MENU_ID_SELECT_ALL, 			MENU_ID_FIND = 130, 			MENU_ID_PRINT, 			MENU_ID_VIEW_SOURCE, 			MENU_ID_SPELLCHECK_SUGGESTION_0 = 200, 			MENU_ID_SPELLCHECK_SUGGESTION_1, 			MENU_ID_SPELLCHECK_SUGGESTION_2, 			MENU_ID_SPELLCHECK_SUGGESTION_3, 			MENU_ID_SPELLCHECK_SUGGESTION_4, 			MENU_ID_SPELLCHECK_SUGGESTION_LAST = 204, 			MENU_ID_NO_SPELLING_SUGGESTIONS, 			MENU_ID_ADD_TO_DICTIONARY, 			MENU_ID_CUSTOM_FIRST = 220, 			MENU_ID_CUSTOM_LAST = 250, 			MENU_ID_USER_FIRST = 26500, 			MENU_ID_USER_LAST = 28500		} cef_menu_id_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_menu_item_type_t	&lt;C: typedef enum {			MENUITEMTYPE_NONE, 			MENUITEMTYPE_COMMAND, 			MENUITEMTYPE_CHECK, 			MENUITEMTYPE_RADIO, 			MENUITEMTYPE_SEPARATOR, 			MENUITEMTYPE_SUBMENU		} cef_menu_item_type_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_menu_model_delegate_t	&lt;C: typedef struct _cef_menu_model_delegate_t cef_menu_model_delegate_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_menu_model_t	&lt;C: typedef struct _cef_menu_model_t cef_menu_model_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_message_loop_type_t	&lt;C: typedef enum {			ML_TYPE_DEFAULT, 			ML_TYPE_UI, 			ML_TYPE_IO		} cef_message_loop_type_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_mouse_button_type_t	&lt;C: typedef enum {			MBT_LEFT, 			MBT_MIDDLE, 			MBT_RIGHT		} cef_mouse_button_type_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_mouse_event_t	&lt;C: typedef struct _cef_mouse_event_t cef_mouse_event_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_navigation_entry_t	&lt;C: typedef struct _cef_navigation_entry_t cef_navigation_entry_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_navigation_entry_visitor_t	&lt;C: typedef struct _cef_navigation_entry_visitor_t cef_navigation_entry_visitor_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_navigation_type_t	&lt;C: typedef enum {			NAVIGATION_LINK_CLICKED, 			NAVIGATION_FORM_SUBMITTED, 			NAVIGATION_BACK_FORWARD, 			NAVIGATION_RELOAD, 			NAVIGATION_FORM_RESUBMITTED, 			NAVIGATION_OTHER		} cef_navigation_type_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_paint_element_type_t	&lt;C: typedef enum {			PET_VIEW, 			PET_POPUP		} cef_paint_element_type_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_path_key_t	&lt;C: typedef enum {			PK_DIR_CURRENT, 			PK_DIR_EXE, 			PK_DIR_MODULE, 			PK_DIR_TEMP, 			PK_FILE_EXE, 			PK_FILE_MODULE, 			PK_LOCAL_APP_DATA, 			PK_USER_DATA		} cef_path_key_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_pdf_print_callback_t	&lt;C: typedef struct _cef_pdf_print_callback_t cef_pdf_print_callback_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_pdf_print_margin_type_t	&lt;C: typedef enum {			PDF_PRINT_MARGIN_DEFAULT, 			PDF_PRINT_MARGIN_NONE, 			PDF_PRINT_MARGIN_MINIMUM, 			PDF_PRINT_MARGIN_CUSTOM		} cef_pdf_print_margin_type_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_pdf_print_settings_t	&lt;C: typedef struct _cef_pdf_print_settings_t cef_pdf_print_settings_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_plugin_policy_t	&lt;C: typedef enum {			PLUGIN_POLICY_ALLOW, 			PLUGIN_POLICY_DETECT_IMPORTANT, 			PLUGIN_POLICY_BLOCK, 			PLUGIN_POLICY_DISABLE		} cef_plugin_policy_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_point_t	&lt;C: typedef struct _cef_point_t cef_point_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_popup_features_t	&lt;C: typedef struct _cef_popup_features_t cef_popup_features_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_post_data_element_t	&lt;C: typedef struct _cef_post_data_element_t cef_post_data_element_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_post_data_t	&lt;C: typedef struct _cef_post_data_t cef_post_data_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_postdataelement_type_t	&lt;C: typedef enum {			PDE_TYPE_EMPTY, 			PDE_TYPE_BYTES, 			PDE_TYPE_FILE		} cef_postdataelement_type_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_print_dialog_callback_t	&lt;C: typedef struct _cef_print_dialog_callback_t cef_print_dialog_callback_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_print_handler_t	&lt;C: typedef struct _cef_print_handler_t cef_print_handler_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_print_job_callback_t	&lt;C: typedef struct _cef_print_job_callback_t cef_print_job_callback_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_print_settings_t	&lt;C: typedef struct _cef_print_settings_t cef_print_settings_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_process_id_t	&lt;C: typedef enum {			PID_BROWSER, 			PID_RENDERER		} cef_process_id_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_process_message_t	&lt;C: typedef struct _cef_process_message_t cef_process_message_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_range_t	&lt;C: typedef struct _cef_range_t cef_range_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_read_handler_t	&lt;C: typedef struct _cef_read_handler_t cef_read_handler_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_rect_t	&lt;C: typedef struct _cef_rect_t cef_rect_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_referrer_policy_t	&lt;C: typedef enum {			REFERRER_POLICY_ALWAYS, 			REFERRER_POLICY_DEFAULT, 			REFERRER_POLICY_NO_REFERRER_WHEN_DOWNGRADE, 			REFERRER_POLICY_NEVER, 			REFERRER_POLICY_ORIGIN, 			REFERRER_POLICY_ORIGIN_WHEN_CROSS_ORIGIN		} cef_referrer_policy_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_register_cdm_callback_t	&lt;C: typedef struct _cef_register_cdm_callback_t cef_register_cdm_callback_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_render_handler_t	&lt;C: typedef struct _cef_render_handler_t cef_render_handler_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_render_process_handler_t	&lt;C: typedef struct _cef_render_process_handler_t cef_render_process_handler_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_request_callback_t	&lt;C: typedef struct _cef_request_callback_t cef_request_callback_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_request_context_handler_t	&lt;C: typedef struct _cef_request_context_handler_t cef_request_context_handler_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_request_context_settings_t	&lt;C: typedef struct _cef_request_context_settings_t cef_request_context_settings_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_request_context_t	&lt;C: typedef struct _cef_request_context_t cef_request_context_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_request_handler_t	&lt;C: typedef struct _cef_request_handler_t cef_request_handler_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_request_t	&lt;C: typedef struct _cef_request_t cef_request_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_resolve_callback_t	&lt;C: typedef struct _cef_resolve_callback_t cef_resolve_callback_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_resource_bundle_handler_t	&lt;C: typedef struct _cef_resource_bundle_handler_t cef_resource_bundle_handler_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_resource_handler_t	&lt;C: typedef struct _cef_resource_handler_t cef_resource_handler_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_resource_type_t	&lt;C: typedef enum {			RT_MAIN_FRAME, 			RT_SUB_FRAME, 			RT_STYLESHEET, 			RT_SCRIPT, 			RT_IMAGE, 			RT_FONT_RESOURCE, 			RT_SUB_RESOURCE, 			RT_OBJECT, 			RT_MEDIA, 			RT_WORKER, 			RT_SHARED_WORKER, 			RT_PREFETCH, 			RT_FAVICON, 			RT_XHR, 			RT_PING, 			RT_SERVICE_WORKER, 			RT_CSP_REPORT, 			RT_PLUGIN_RESOURCE		} cef_resource_type_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_response_filter_status_t	&lt;C: typedef enum {			RESPONSE_FILTER_NEED_MORE_DATA, 			RESPONSE_FILTER_DONE, 			RESPONSE_FILTER_ERROR		} cef_response_filter_status_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_response_filter_t	&lt;C: typedef struct _cef_response_filter_t cef_response_filter_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_response_t	&lt;C: typedef struct _cef_response_t cef_response_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_return_value_t	&lt;C: typedef enum {			RV_CANCEL, 			RV_CONTINUE, 			RV_CONTINUE_ASYNC		} cef_return_value_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_run_context_menu_callback_t	&lt;C: typedef struct _cef_run_context_menu_callback_t cef_run_context_menu_callback_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_run_file_dialog_callback_t	&lt;C: typedef struct _cef_run_file_dialog_callback_t cef_run_file_dialog_callback_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_scale_factor_t	&lt;C: typedef enum {			SCALE_FACTOR_NONE, 			SCALE_FACTOR_100P, 			SCALE_FACTOR_125P, 			SCALE_FACTOR_133P, 			SCALE_FACTOR_140P, 			SCALE_FACTOR_150P, 			SCALE_FACTOR_180P, 			SCALE_FACTOR_200P, 			SCALE_FACTOR_250P, 			SCALE_FACTOR_300P		} cef_scale_factor_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_scheme_handler_factory_t	&lt;C: typedef struct _cef_scheme_handler_factory_t cef_scheme_handler_factory_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_scheme_registrar_t	&lt;C: typedef struct _cef_scheme_registrar_t cef_scheme_registrar_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_screen_info_t	&lt;C: typedef struct _cef_screen_info_t cef_screen_info_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_select_client_certificate_callback_t	&lt;C: typedef struct _cef_select_client_certificate_callback_t cef_select_client_certificate_callback_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_set_cookie_callback_t	&lt;C: typedef struct _cef_set_cookie_callback_t cef_set_cookie_callback_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_settings_t	&lt;C: typedef struct _cef_settings_t cef_settings_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_size_t	&lt;C: typedef struct _cef_size_t cef_size_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_ssl_content_status_t	&lt;C: typedef enum {			SSL_CONTENT_NORMAL_CONTENT, 			SSL_CONTENT_DISPLAYED_INSECURE_CONTENT, 			SSL_CONTENT_RAN_INSECURE_CONTENT		} cef_ssl_content_status_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_ssl_version_t	&lt;C: typedef enum {			SSL_CONNECTION_VERSION_UNKNOWN, 			SSL_CONNECTION_VERSION_SSL2, 			SSL_CONNECTION_VERSION_SSL3, 			SSL_CONNECTION_VERSION_TLS1, 			SSL_CONNECTION_VERSION_TLS1_1, 			SSL_CONNECTION_VERSION_TLS1_2, 			SSL_CONNECTION_VERSION_QUIC = 7		} cef_ssl_version_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_sslinfo_t	&lt;C: typedef struct _cef_sslinfo_t cef_sslinfo_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_sslstatus_t	&lt;C: typedef struct _cef_sslstatus_t cef_sslstatus_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_state_t	&lt;C: typedef enum {			STATE_DEFAULT, 			STATE_ENABLED, 			STATE_DISABLED		} cef_state_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_storage_type_t	&lt;C: typedef enum {			ST_LOCALSTORAGE, 			ST_SESSIONSTORAGE		} cef_storage_type_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_stream_reader_t	&lt;C: typedef struct _cef_stream_reader_t cef_stream_reader_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_stream_writer_t	&lt;C: typedef struct _cef_stream_writer_t cef_stream_writer_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_string_list_t	&lt;C: typedef void * cef_string_list_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_string_map_t	&lt;C: typedef void * cef_string_map_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_string_multimap_t	&lt;C: typedef void * cef_string_multimap_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_string_t	&lt;C: typedef cef_string_utf16_t cef_string_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_string_userfree_t	&lt;C: typedef cef_string_userfree_utf16_t cef_string_userfree_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_string_userfree_utf16_t	&lt;C: typedef cef_string_utf16_t * cef_string_userfree_utf16_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_string_userfree_utf8_t	&lt;C: typedef cef_string_utf8_t * cef_string_userfree_utf8_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_string_userfree_wide_t	&lt;C: typedef cef_string_wide_t * cef_string_userfree_wide_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_string_utf16_t	&lt;C: typedef struct _cef_string_utf16_t cef_string_utf16_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_string_utf8_t	&lt;C: typedef struct _cef_string_utf8_t cef_string_utf8_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_string_visitor_t	&lt;C: typedef struct _cef_string_visitor_t cef_string_visitor_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_string_wide_t	&lt;C: typedef struct _cef_string_wide_t cef_string_wide_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_task_runner_t	&lt;C: typedef struct _cef_task_runner_t cef_task_runner_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_task_t	&lt;C: typedef struct _cef_task_t cef_task_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_termination_status_t	&lt;C: typedef enum {			TS_ABNORMAL_TERMINATION, 			TS_PROCESS_WAS_KILLED, 			TS_PROCESS_CRASHED		} cef_termination_status_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_text_style_t	&lt;C: typedef enum {			CEF_TEXT_STYLE_BOLD, 			CEF_TEXT_STYLE_ITALIC, 			CEF_TEXT_STYLE_STRIKE, 			CEF_TEXT_STYLE_DIAGONAL_STRIKE, 			CEF_TEXT_STYLE_UNDERLINE		} cef_text_style_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_thread_id_t	&lt;C: typedef enum {			TID_UI, 			TID_DB, 			TID_FILE, 			TID_FILE_USER_BLOCKING, 			TID_PROCESS_LAUNCHER, 			TID_CACHE, 			TID_IO, 			TID_RENDERER		} cef_thread_id_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_thread_priority_t	&lt;C: typedef enum {			TP_BACKGROUND, 			TP_NORMAL, 			TP_DISPLAY, 			TP_REALTIME_AUDIO		} cef_thread_priority_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_time_t	&lt;C: typedef struct _cef_time_t cef_time_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_transition_type_t	&lt;C: typedef enum {			TT_LINK, 			TT_EXPLICIT, 			TT_AUTO_SUBFRAME = 3, 			TT_MANUAL_SUBFRAME, 			TT_FORM_SUBMIT = 7, 			TT_RELOAD, 			TT_SOURCE_MASK = 255, 			TT_BLOCKED_FLAG = 8388608, 			TT_FORWARD_BACK_FLAG = 16777216, 			TT_CHAIN_START_FLAG = 268435456, 			TT_CHAIN_END_FLAG = 536870912, 			TT_CLIENT_REDIRECT_FLAG = 1073741824, 			TT_SERVER_REDIRECT_FLAG = 2147483648, 			TT_IS_REDIRECT_MASK = 3221225472, 			TT_QUALIFIER_MASK = 4294967040		} cef_transition_type_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_uri_unescape_rule_t	&lt;C: typedef enum {			UU_NONE, 			UU_NORMAL, 			UU_SPACES, 			UU_PATH_SEPARATORS = 4, 			UU_URL_SPECIAL_CHARS_EXCEPT_PATH_SEPARATORS = 8, 			UU_SPOOFING_AND_CONTROL_CHARS = 16, 			UU_REPLACE_PLUS_WITH_SPACE = 32		} cef_uri_unescape_rule_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_urlparts_t	&lt;C: typedef struct _cef_urlparts_t cef_urlparts_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_urlrequest_flags_t	&lt;C: typedef enum {			UR_FLAG_NONE, 			UR_FLAG_SKIP_CACHE, 			UR_FLAG_ALLOW_CACHED_CREDENTIALS, 			UR_FLAG_REPORT_UPLOAD_PROGRESS = 8, 			UR_FLAG_NO_DOWNLOAD_DATA = 64, 			UR_FLAG_NO_RETRY_ON_5XX = 128		} cef_urlrequest_flags_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_urlrequest_status_t	&lt;C: typedef enum {			UR_UNKNOWN, 			UR_SUCCESS, 			UR_IO_PENDING, 			UR_CANCELED, 			UR_FAILED		} cef_urlrequest_status_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_v8_accesscontrol_t	&lt;C: typedef enum {			V8_ACCESS_CONTROL_DEFAULT, 			V8_ACCESS_CONTROL_ALL_CAN_READ, 			V8_ACCESS_CONTROL_ALL_CAN_WRITE, 			V8_ACCESS_CONTROL_PROHIBITS_OVERWRITING = 4		} cef_v8_accesscontrol_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_v8_propertyattribute_t	&lt;C: typedef enum {			V8_PROPERTY_ATTRIBUTE_NONE, 			V8_PROPERTY_ATTRIBUTE_READONLY, 			V8_PROPERTY_ATTRIBUTE_DONTENUM, 			V8_PROPERTY_ATTRIBUTE_DONTDELETE = 4		} cef_v8_propertyattribute_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_v8accessor_t	&lt;C: typedef struct _cef_v8accessor_t cef_v8accessor_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_v8context_t	&lt;C: typedef struct _cef_v8context_t cef_v8context_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_v8exception_t	&lt;C: typedef struct _cef_v8exception_t cef_v8exception_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_v8handler_t	&lt;C: typedef struct _cef_v8handler_t cef_v8handler_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_v8interceptor_t	&lt;C: typedef struct _cef_v8interceptor_t cef_v8interceptor_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_v8stack_frame_t	&lt;C: typedef struct _cef_v8stack_frame_t cef_v8stack_frame_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_v8stack_trace_t	&lt;C: typedef struct _cef_v8stack_trace_t cef_v8stack_trace_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_v8value_t	&lt;C: typedef struct _cef_v8value_t cef_v8value_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_value_t	&lt;C: typedef struct _cef_value_t cef_value_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_value_type_t	&lt;C: typedef enum {			VTYPE_INVALID, 			VTYPE_NULL, 			VTYPE_BOOL, 			VTYPE_INT, 			VTYPE_DOUBLE, 			VTYPE_STRING, 			VTYPE_BINARY, 			VTYPE_DICTIONARY, 			VTYPE_LIST		} cef_value_type_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_web_plugin_info_t	&lt;C: typedef struct _cef_web_plugin_info_t cef_web_plugin_info_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_web_plugin_info_visitor_t	&lt;C: typedef struct _cef_web_plugin_info_visitor_t cef_web_plugin_info_visitor_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_web_plugin_unstable_callback_t	&lt;C: typedef struct _cef_web_plugin_unstable_callback_t cef_web_plugin_unstable_callback_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_window_info_t	&lt;C: typedef struct _cef_window_info_t cef_window_info_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_window_open_disposition_t	&lt;C: typedef enum {			WOD_UNKNOWN, 			WOD_CURRENT_TAB, 			WOD_SINGLETON_TAB, 			WOD_NEW_FOREGROUND_TAB, 			WOD_NEW_BACKGROUND_TAB, 			WOD_NEW_POPUP, 			WOD_NEW_WINDOW, 			WOD_SAVE_TO_DISK, 			WOD_OFF_THE_RECORD, 			WOD_IGNORE_ACTION		} cef_window_open_disposition_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_write_handler_t	&lt;C: typedef struct _cef_write_handler_t cef_write_handler_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_x509cert_principal_t	&lt;C: typedef struct _cef_x509cert_principal_t cef_x509cert_principal_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_x509certificate_t	&lt;C: typedef struct _cef_x509certificate_t cef_x509certificate_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_xml_encoding_type_t	&lt;C: typedef enum {			XML_ENCODING_NONE, 			XML_ENCODING_UTF8, 			XML_ENCODING_UTF16LE, 			XML_ENCODING_UTF16BE, 			XML_ENCODING_ASCII		} cef_xml_encoding_type_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_xml_node_type_t	&lt;C: typedef enum {			XML_NODE_UNSUPPORTED, 			XML_NODE_PROCESSING_INSTRUCTION, 			XML_NODE_DOCUMENT_TYPE, 			XML_NODE_ELEMENT_START, 			XML_NODE_ELEMENT_END, 			XML_NODE_ATTRIBUTE, 			XML_NODE_TEXT, 			XML_NODE_CDATA, 			XML_NODE_ENTITY_REFERENCE, 			XML_NODE_WHITESPACE, 			XML_NODE_COMMENT		} cef_xml_node_type_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">char16	&lt;C: typedef wchar_t char16&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">clock_t	&lt;C: typedef long clock_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">int32	&lt;C: typedef int int32&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">int64	&lt;C: typedef long long int64&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">ptrdiff_t	&lt;C: typedef long ptrdiff_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">size_t	&lt;C: typedef unsigned long size_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">template	&lt;C: typedef void * template&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">time_t	&lt;C: typedef void * time_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">uint32	&lt;C: typedef unsigned int uint32&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">uint64	&lt;C: typedef unsigned long long uint64&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">wchar_t	&lt;C: typedef int wchar_t&gt;</body>
</methods>

<methods>
<class-id>CEF.LibChromium</class-id> <category>structs</category>

<body package="ChromiumEmbeddedFramework-Base">_cef_accessibility_handler_t	&lt;C: struct _cef_accessibility_handler_t {			cef_base_ref_counted_t base;			void ( __stdcall * on_accessibility_tree_change)(struct _cef_accessibility_handler_t * self, struct _cef_value_t * value);			void ( __stdcall * on_accessibility_location_change)(struct _cef_accessibility_handler_t * self, struct _cef_value_t * value);		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_app_t	&lt;C: struct _cef_app_t {			cef_base_ref_counted_t base;			void ( __stdcall * on_before_command_line_processing)(struct _cef_app_t * self, const cef_string_t * process_type, struct _cef_command_line_t * command_line);			void ( __stdcall * on_register_custom_schemes)(struct _cef_app_t * self, struct _cef_scheme_registrar_t * registrar);			struct _cef_resource_bundle_handler_t *  ( __stdcall * get_resource_bundle_handler)(struct _cef_app_t * self);			struct _cef_browser_process_handler_t *  ( __stdcall * get_browser_process_handler)(struct _cef_app_t * self);			struct _cef_render_process_handler_t *  ( __stdcall * get_render_process_handler)(struct _cef_app_t * self);		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_auth_callback_t	&lt;C: struct _cef_auth_callback_t {			cef_base_ref_counted_t base;			void ( __stdcall * cont)(struct _cef_auth_callback_t * self, const cef_string_t * username, const cef_string_t * password);			void ( __stdcall * cancel)(struct _cef_auth_callback_t * self);		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_base_ref_counted_t	&lt;C: struct _cef_base_ref_counted_t {			size_t size;			void ( __stdcall * add_ref)(struct _cef_base_ref_counted_t * self);			int ( __stdcall * release)(struct _cef_base_ref_counted_t * self);			int ( __stdcall * has_one_ref)(struct _cef_base_ref_counted_t * self);		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_base_scoped_t	&lt;C: struct _cef_base_scoped_t {			size_t size;			void ( __stdcall * del)(struct _cef_base_scoped_t * self);		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_before_download_callback_t	&lt;C: struct _cef_before_download_callback_t {			cef_base_ref_counted_t base;			void ( __stdcall * cont)(struct _cef_before_download_callback_t * self, const cef_string_t * download_path, int show_dialog);		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_binary_value_t	&lt;C: struct _cef_binary_value_t {			cef_base_ref_counted_t base;			int ( __stdcall * is_valid)(struct _cef_binary_value_t * self);			int ( __stdcall * is_owned)(struct _cef_binary_value_t * self);			int ( __stdcall * is_same)(struct _cef_binary_value_t * self, struct _cef_binary_value_t * that);			int ( __stdcall * is_equal)(struct _cef_binary_value_t * self, struct _cef_binary_value_t * that);			struct _cef_binary_value_t *  ( __stdcall * copy)(struct _cef_binary_value_t * self);			size_t ( __stdcall * get_size)(struct _cef_binary_value_t * self);			size_t ( __stdcall * get_data)(struct _cef_binary_value_t * self, void * buffer, size_t buffer_size, size_t data_offset);		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_box_layout_settings_t	&lt;C: struct _cef_box_layout_settings_t {			int horizontal, inside_border_horizontal_spacing, inside_border_vertical_spacing;			cef_insets_t inside_border_insets;			int between_child_spacing;			cef_main_axis_alignment_t main_axis_alignment;			cef_cross_axis_alignment_t cross_axis_alignment;			int minimum_cross_axis_size, default_flex;		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_browser_host_t	&lt;C: struct _cef_browser_host_t {			cef_base_ref_counted_t base;			struct _cef_browser_t *  ( __stdcall * get_browser)(struct _cef_browser_host_t * self);			void ( __stdcall * close_browser)(struct _cef_browser_host_t * self, int force_close);			int ( __stdcall * try_close_browser)(struct _cef_browser_host_t * self);			void ( __stdcall * set_focus)(struct _cef_browser_host_t * self, int focus);			HWND ( __stdcall * get_window_handle)(struct _cef_browser_host_t * self);			HWND ( __stdcall * get_opener_window_handle)(struct _cef_browser_host_t * self);			int ( __stdcall * has_view)(struct _cef_browser_host_t * self);			struct _cef_client_t *  ( __stdcall * get_client)(struct _cef_browser_host_t * self);			struct _cef_request_context_t *  ( __stdcall * get_request_context)(struct _cef_browser_host_t * self);			double ( __stdcall * get_zoom_level)(struct _cef_browser_host_t * self);			void ( __stdcall * set_zoom_level)(struct _cef_browser_host_t * self, double zoomLevel);			void ( __stdcall * run_file_dialog)(struct _cef_browser_host_t * self, cef_file_dialog_mode_t mode, const cef_string_t * title, const cef_string_t * default_file_path, cef_string_list_t accept_filters, int selected_accept_filter, struct _cef_run_file_dialog_callback_t * callback);			void ( __stdcall * start_download)(struct _cef_browser_host_t * self, const cef_string_t * url);			void ( __stdcall * download_image)(struct _cef_browser_host_t * self, const cef_string_t * image_url, int is_favicon, uint32 max_image_size, int bypass_cache, struct _cef_download_image_callback_t * callback);			void ( __stdcall * print)(struct _cef_browser_host_t * self);			void ( __stdcall * print_to_pdf)(struct _cef_browser_host_t * self, const cef_string_t * path, const struct _cef_pdf_print_settings_t * settings, struct _cef_pdf_print_callback_t * callback);			void ( __stdcall * find)(struct _cef_browser_host_t * self, int identifier, const cef_string_t * searchText, int forward, int matchCase, int findNext);			void ( __stdcall * stop_finding)(struct _cef_browser_host_t * self, int clearSelection);			void ( __stdcall * show_dev_tools)(struct _cef_browser_host_t * self, const struct _cef_window_info_t * windowInfo, struct _cef_client_t * client, const struct _cef_browser_settings_t * settings, const cef_point_t * inspect_element_at);			void ( __stdcall * close_dev_tools)(struct _cef_browser_host_t * self);			int ( __stdcall * has_dev_tools)(struct _cef_browser_host_t * self);			void ( __stdcall * get_navigation_entries)(struct _cef_browser_host_t * self, struct _cef_navigation_entry_visitor_t * visitor, int current_only);			void ( __stdcall * set_mouse_cursor_change_disabled)(struct _cef_browser_host_t * self, int disabled);			int ( __stdcall * is_mouse_cursor_change_disabled)(struct _cef_browser_host_t * self);			void ( __stdcall * replace_misspelling)(struct _cef_browser_host_t * self, const cef_string_t * word);			void ( __stdcall * add_word_to_dictionary)(struct _cef_browser_host_t * self, const cef_string_t * word);			int ( __stdcall * is_window_rendering_disabled)(struct _cef_browser_host_t * self);			void ( __stdcall * was_resized)(struct _cef_browser_host_t * self);			void ( __stdcall * was_hidden)(struct _cef_browser_host_t * self, int hidden);			void ( __stdcall * notify_screen_info_changed)(struct _cef_browser_host_t * self);			void ( __stdcall * invalidate)(struct _cef_browser_host_t * self, cef_paint_element_type_t type);			void ( __stdcall * send_key_event)(struct _cef_browser_host_t * self, const struct _cef_key_event_t * event);			void ( __stdcall * send_mouse_click_event)(struct _cef_browser_host_t * self, const struct _cef_mouse_event_t * event, cef_mouse_button_type_t type, int mouseUp, int clickCount);			void ( __stdcall * send_mouse_move_event)(struct _cef_browser_host_t * self, const struct _cef_mouse_event_t * event, int mouseLeave);			void ( __stdcall * send_mouse_wheel_event)(struct _cef_browser_host_t * self, const struct _cef_mouse_event_t * event, int deltaX, int deltaY);			void ( __stdcall * send_focus_event)(struct _cef_browser_host_t * self, int setFocus);			void ( __stdcall * send_capture_lost_event)(struct _cef_browser_host_t * self);			void ( __stdcall * notify_move_or_resize_started)(struct _cef_browser_host_t * self);			int ( __stdcall * get_windowless_frame_rate)(struct _cef_browser_host_t * self);			void ( __stdcall * set_windowless_frame_rate)(struct _cef_browser_host_t * self, int frame_rate);			void ( __stdcall * ime_set_composition)(struct _cef_browser_host_t * self, const cef_string_t * text, size_t underlinesCount, const cef_composition_underline_t * underlines, const cef_range_t * replacement_range, const cef_range_t * selection_range);			void ( __stdcall * ime_commit_text)(struct _cef_browser_host_t * self, const cef_string_t * text, const cef_range_t * replacement_range, int relative_cursor_pos);			void ( __stdcall * ime_finish_composing_text)(struct _cef_browser_host_t * self, int keep_selection);			void ( __stdcall * ime_cancel_composition)(struct _cef_browser_host_t * self);			void ( __stdcall * drag_target_drag_enter)(struct _cef_browser_host_t * self, struct _cef_drag_data_t * drag_data, const struct _cef_mouse_event_t * event, cef_drag_operations_mask_t allowed_ops);			void ( __stdcall * drag_target_drag_over)(struct _cef_browser_host_t * self, const struct _cef_mouse_event_t * event, cef_drag_operations_mask_t allowed_ops);			void ( __stdcall * drag_target_drag_leave)(struct _cef_browser_host_t * self);			void ( __stdcall * drag_target_drop)(struct _cef_browser_host_t * self, const struct _cef_mouse_event_t * event);			void ( __stdcall * drag_source_ended_at)(struct _cef_browser_host_t * self, int x, int y, cef_drag_operations_mask_t op);			void ( __stdcall * drag_source_system_drag_ended)(struct _cef_browser_host_t * self);			struct _cef_navigation_entry_t *  ( __stdcall * get_visible_navigation_entry)(struct _cef_browser_host_t * self);			void ( __stdcall * set_accessibility_state)(struct _cef_browser_host_t * self, cef_state_t accessibility_state);		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_browser_process_handler_t	&lt;C: struct _cef_browser_process_handler_t {			cef_base_ref_counted_t base;			void ( __stdcall * on_context_initialized)(struct _cef_browser_process_handler_t * self);			void ( __stdcall * on_before_child_process_launch)(struct _cef_browser_process_handler_t * self, struct _cef_command_line_t * command_line);			void ( __stdcall * on_render_process_thread_created)(struct _cef_browser_process_handler_t * self, struct _cef_list_value_t * extra_info);			struct _cef_print_handler_t *  ( __stdcall * get_print_handler)(struct _cef_browser_process_handler_t * self);			void ( __stdcall * on_schedule_message_pump_work)(struct _cef_browser_process_handler_t * self, int64 delay_ms);		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_browser_settings_t	&lt;C: struct _cef_browser_settings_t {			size_t size;			int windowless_frame_rate;			cef_string_t standard_font_family, fixed_font_family, serif_font_family, sans_serif_font_family, cursive_font_family, fantasy_font_family;			int default_font_size, default_fixed_font_size, minimum_font_size, minimum_logical_font_size;			cef_string_t default_encoding;			cef_state_t remote_fonts, javascript, javascript_close_windows, javascript_access_clipboard, javascript_dom_paste, plugins, universal_access_from_file_urls, file_access_from_file_urls, web_security, image_loading, image_shrink_standalone_to_fit, text_area_resize, tab_to_links, local_storage, databases, application_cache, webgl;			cef_color_t background_color;			cef_string_t accept_language_list;		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_browser_t	&lt;C: struct _cef_browser_t {			cef_base_ref_counted_t base;			struct _cef_browser_host_t *  ( __stdcall * get_host)(struct _cef_browser_t * self);			int ( __stdcall * can_go_back)(struct _cef_browser_t * self);			void ( __stdcall * go_back)(struct _cef_browser_t * self);			int ( __stdcall * can_go_forward)(struct _cef_browser_t * self);			void ( __stdcall * go_forward)(struct _cef_browser_t * self);			int ( __stdcall * is_loading)(struct _cef_browser_t * self);			void ( __stdcall * reload)(struct _cef_browser_t * self);			void ( __stdcall * reload_ignore_cache)(struct _cef_browser_t * self);			void ( __stdcall * stop_load)(struct _cef_browser_t * self);			int ( __stdcall * get_identifier)(struct _cef_browser_t * self);			int ( __stdcall * is_same)(struct _cef_browser_t * self, struct _cef_browser_t * that);			int ( __stdcall * is_popup)(struct _cef_browser_t * self);			int ( __stdcall * has_document)(struct _cef_browser_t * self);			struct _cef_frame_t *  ( __stdcall * get_main_frame)(struct _cef_browser_t * self);			struct _cef_frame_t *  ( __stdcall * get_focused_frame)(struct _cef_browser_t * self);			struct _cef_frame_t *  ( __stdcall * get_frame_byident)(struct _cef_browser_t * self, int64 identifier);			struct _cef_frame_t *  ( __stdcall * get_frame)(struct _cef_browser_t * self, const cef_string_t * name);			size_t ( __stdcall * get_frame_count)(struct _cef_browser_t * self);			void ( __stdcall * get_frame_identifiers)(struct _cef_browser_t * self, size_t * identifiersCount, int64 * identifiers);			void ( __stdcall * get_frame_names)(struct _cef_browser_t * self, cef_string_list_t names);			int ( __stdcall * send_process_message)(struct _cef_browser_t * self, cef_process_id_t target_process, struct _cef_process_message_t * message);		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_callback_t	&lt;C: struct _cef_callback_t {			cef_base_ref_counted_t base;			void ( __stdcall * cont)(struct _cef_callback_t * self);			void ( __stdcall * cancel)(struct _cef_callback_t * self);		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_client_t	&lt;C: struct _cef_client_t {			cef_base_ref_counted_t base;			struct _cef_context_menu_handler_t *  ( __stdcall * get_context_menu_handler)(struct _cef_client_t * self);			struct _cef_dialog_handler_t *  ( __stdcall * get_dialog_handler)(struct _cef_client_t * self);			struct _cef_display_handler_t *  ( __stdcall * get_display_handler)(struct _cef_client_t * self);			struct _cef_download_handler_t *  ( __stdcall * get_download_handler)(struct _cef_client_t * self);			struct _cef_drag_handler_t *  ( __stdcall * get_drag_handler)(struct _cef_client_t * self);			struct _cef_find_handler_t *  ( __stdcall * get_find_handler)(struct _cef_client_t * self);			struct _cef_focus_handler_t *  ( __stdcall * get_focus_handler)(struct _cef_client_t * self);			struct _cef_geolocation_handler_t *  ( __stdcall * get_geolocation_handler)(struct _cef_client_t * self);			struct _cef_jsdialog_handler_t *  ( __stdcall * get_jsdialog_handler)(struct _cef_client_t * self);			struct _cef_keyboard_handler_t *  ( __stdcall * get_keyboard_handler)(struct _cef_client_t * self);			struct _cef_life_span_handler_t *  ( __stdcall * get_life_span_handler)(struct _cef_client_t * self);			struct _cef_load_handler_t *  ( __stdcall * get_load_handler)(struct _cef_client_t * self);			struct _cef_render_handler_t *  ( __stdcall * get_render_handler)(struct _cef_client_t * self);			struct _cef_request_handler_t *  ( __stdcall * get_request_handler)(struct _cef_client_t * self);			int ( __stdcall * on_process_message_received)(struct _cef_client_t * self, struct _cef_browser_t * browser, cef_process_id_t source_process, struct _cef_process_message_t * message);		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_command_line_t	&lt;C: struct _cef_command_line_t {			cef_base_ref_counted_t base;			int ( __stdcall * is_valid)(struct _cef_command_line_t * self);			int ( __stdcall * is_read_only)(struct _cef_command_line_t * self);			struct _cef_command_line_t *  ( __stdcall * copy)(struct _cef_command_line_t * self);			void ( __stdcall * init_from_argv)(struct _cef_command_line_t * self, int argc, const char * const * argv);			void ( __stdcall * init_from_string)(struct _cef_command_line_t * self, const cef_string_t * command_line);			void ( __stdcall * reset)(struct _cef_command_line_t * self);			void ( __stdcall * get_argv)(struct _cef_command_line_t * self, cef_string_list_t argv);			cef_string_userfree_t ( __stdcall * get_command_line_string)(struct _cef_command_line_t * self);			cef_string_userfree_t ( __stdcall * get_program)(struct _cef_command_line_t * self);			void ( __stdcall * set_program)(struct _cef_command_line_t * self, const cef_string_t * program);			int ( __stdcall * has_switches)(struct _cef_command_line_t * self);			int ( __stdcall * has_switch)(struct _cef_command_line_t * self, const cef_string_t * name);			cef_string_userfree_t ( __stdcall * get_switch_value)(struct _cef_command_line_t * self, const cef_string_t * name);			void ( __stdcall * get_switches)(struct _cef_command_line_t * self, cef_string_map_t switches);			void ( __stdcall * append_switch)(struct _cef_command_line_t * self, const cef_string_t * name);			void ( __stdcall * append_switch_with_value)(struct _cef_command_line_t * self, const cef_string_t * name, const cef_string_t * value);			int ( __stdcall * has_arguments)(struct _cef_command_line_t * self);			void ( __stdcall * get_arguments)(struct _cef_command_line_t * self, cef_string_list_t arguments);			void ( __stdcall * append_argument)(struct _cef_command_line_t * self, const cef_string_t * argument);			void ( __stdcall * prepend_wrapper)(struct _cef_command_line_t * self, const cef_string_t * wrapper);		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_completion_callback_t	&lt;C: struct _cef_completion_callback_t {			cef_base_ref_counted_t base;			void ( __stdcall * on_complete)(struct _cef_completion_callback_t * self);		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_composition_underline_t	&lt;C: struct _cef_composition_underline_t {			cef_range_t range;			cef_color_t color, background_color;			int thick;		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_context_menu_handler_t	&lt;C: struct _cef_context_menu_handler_t {			cef_base_ref_counted_t base;			void ( __stdcall * on_before_context_menu)(struct _cef_context_menu_handler_t * self, struct _cef_browser_t * browser, struct _cef_frame_t * frame, struct _cef_context_menu_params_t * params, struct _cef_menu_model_t * model);			int ( __stdcall * run_context_menu)(struct _cef_context_menu_handler_t * self, struct _cef_browser_t * browser, struct _cef_frame_t * frame, struct _cef_context_menu_params_t * params, struct _cef_menu_model_t * model, struct _cef_run_context_menu_callback_t * callback);			int ( __stdcall * on_context_menu_command)(struct _cef_context_menu_handler_t * self, struct _cef_browser_t * browser, struct _cef_frame_t * frame, struct _cef_context_menu_params_t * params, int command_id, cef_event_flags_t event_flags);			void ( __stdcall * on_context_menu_dismissed)(struct _cef_context_menu_handler_t * self, struct _cef_browser_t * browser, struct _cef_frame_t * frame);		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_context_menu_params_t	&lt;C: struct _cef_context_menu_params_t {			cef_base_ref_counted_t base;			int ( __stdcall * get_xcoord)(struct _cef_context_menu_params_t * self);			int ( __stdcall * get_ycoord)(struct _cef_context_menu_params_t * self);			cef_context_menu_type_flags_t ( __stdcall * get_type_flags)(struct _cef_context_menu_params_t * self);			cef_string_userfree_t ( __stdcall * get_link_url)(struct _cef_context_menu_params_t * self);			cef_string_userfree_t ( __stdcall * get_unfiltered_link_url)(struct _cef_context_menu_params_t * self);			cef_string_userfree_t ( __stdcall * get_source_url)(struct _cef_context_menu_params_t * self);			int ( __stdcall * has_image_contents)(struct _cef_context_menu_params_t * self);			cef_string_userfree_t ( __stdcall * get_title_text)(struct _cef_context_menu_params_t * self);			cef_string_userfree_t ( __stdcall * get_page_url)(struct _cef_context_menu_params_t * self);			cef_string_userfree_t ( __stdcall * get_frame_url)(struct _cef_context_menu_params_t * self);			cef_string_userfree_t ( __stdcall * get_frame_charset)(struct _cef_context_menu_params_t * self);			cef_context_menu_media_type_t ( __stdcall * get_media_type)(struct _cef_context_menu_params_t * self);			cef_context_menu_media_state_flags_t ( __stdcall * get_media_state_flags)(struct _cef_context_menu_params_t * self);			cef_string_userfree_t ( __stdcall * get_selection_text)(struct _cef_context_menu_params_t * self);			cef_string_userfree_t ( __stdcall * get_misspelled_word)(struct _cef_context_menu_params_t * self);			int ( __stdcall * get_dictionary_suggestions)(struct _cef_context_menu_params_t * self, cef_string_list_t suggestions);			int ( __stdcall * is_editable)(struct _cef_context_menu_params_t * self);			int ( __stdcall * is_spell_check_enabled)(struct _cef_context_menu_params_t * self);			cef_context_menu_edit_state_flags_t ( __stdcall * get_edit_state_flags)(struct _cef_context_menu_params_t * self);			int ( __stdcall * is_custom_menu)(struct _cef_context_menu_params_t * self);			int ( __stdcall * is_pepper_menu)(struct _cef_context_menu_params_t * self);		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_cookie_manager_t	&lt;C: struct _cef_cookie_manager_t {			cef_base_ref_counted_t base;			void ( __stdcall * set_supported_schemes)(struct _cef_cookie_manager_t * self, cef_string_list_t schemes, struct _cef_completion_callback_t * callback);			int ( __stdcall * visit_all_cookies)(struct _cef_cookie_manager_t * self, struct _cef_cookie_visitor_t * visitor);			int ( __stdcall * visit_url_cookies)(struct _cef_cookie_manager_t * self, const cef_string_t * url, int includeHttpOnly, struct _cef_cookie_visitor_t * visitor);			int ( __stdcall * set_cookie)(struct _cef_cookie_manager_t * self, const cef_string_t * url, const struct _cef_cookie_t * cookie, struct _cef_set_cookie_callback_t * callback);			int ( __stdcall * delete_cookies)(struct _cef_cookie_manager_t * self, const cef_string_t * url, const cef_string_t * cookie_name, struct _cef_delete_cookies_callback_t * callback);			int ( __stdcall * set_storage_path)(struct _cef_cookie_manager_t * self, const cef_string_t * path, int persist_session_cookies, struct _cef_completion_callback_t * callback);			int ( __stdcall * flush_store)(struct _cef_cookie_manager_t * self, struct _cef_completion_callback_t * callback);		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_cookie_t	&lt;C: struct _cef_cookie_t {			cef_string_t name, value, domain, path;			int secure, httponly;			cef_time_t creation, last_access;			int has_expires;			cef_time_t expires;		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_cookie_visitor_t	&lt;C: struct _cef_cookie_visitor_t {			cef_base_ref_counted_t base;			int ( __stdcall * visit)(struct _cef_cookie_visitor_t * self, const struct _cef_cookie_t * cookie, int count, int total, int * deleteCookie);		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_cursor_info_t	&lt;C: struct _cef_cursor_info_t {			cef_point_t hotspot;			float image_scale_factor;			void * buffer;			cef_size_t size;		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_delete_cookies_callback_t	&lt;C: struct _cef_delete_cookies_callback_t {			cef_base_ref_counted_t base;			void ( __stdcall * on_complete)(struct _cef_delete_cookies_callback_t * self, int num_deleted);		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_dialog_handler_t	&lt;C: struct _cef_dialog_handler_t {			cef_base_ref_counted_t base;			int ( __stdcall * on_file_dialog)(struct _cef_dialog_handler_t * self, struct _cef_browser_t * browser, cef_file_dialog_mode_t mode, const cef_string_t * title, const cef_string_t * default_file_path, cef_string_list_t accept_filters, int selected_accept_filter, struct _cef_file_dialog_callback_t * callback);		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_dictionary_value_t	&lt;C: struct _cef_dictionary_value_t {			cef_base_ref_counted_t base;			int ( __stdcall * is_valid)(struct _cef_dictionary_value_t * self);			int ( __stdcall * is_owned)(struct _cef_dictionary_value_t * self);			int ( __stdcall * is_read_only)(struct _cef_dictionary_value_t * self);			int ( __stdcall * is_same)(struct _cef_dictionary_value_t * self, struct _cef_dictionary_value_t * that);			int ( __stdcall * is_equal)(struct _cef_dictionary_value_t * self, struct _cef_dictionary_value_t * that);			struct _cef_dictionary_value_t *  ( __stdcall * copy)(struct _cef_dictionary_value_t * self, int exclude_empty_children);			size_t ( __stdcall * get_size)(struct _cef_dictionary_value_t * self);			int ( __stdcall * clear)(struct _cef_dictionary_value_t * self);			int ( __stdcall * has_key)(struct _cef_dictionary_value_t * self, const cef_string_t * key);			int ( __stdcall * get_keys)(struct _cef_dictionary_value_t * self, cef_string_list_t keys);			int ( __stdcall * remove)(struct _cef_dictionary_value_t * self, const cef_string_t * key);			cef_value_type_t ( __stdcall * get_type)(struct _cef_dictionary_value_t * self, const cef_string_t * key);			struct _cef_value_t *  ( __stdcall * get_value)(struct _cef_dictionary_value_t * self, const cef_string_t * key);			int ( __stdcall * get_bool)(struct _cef_dictionary_value_t * self, const cef_string_t * key);			int ( __stdcall * get_int)(struct _cef_dictionary_value_t * self, const cef_string_t * key);			double ( __stdcall * get_double)(struct _cef_dictionary_value_t * self, const cef_string_t * key);			cef_string_userfree_t ( __stdcall * get_string)(struct _cef_dictionary_value_t * self, const cef_string_t * key);			struct _cef_binary_value_t *  ( __stdcall * get_binary)(struct _cef_dictionary_value_t * self, const cef_string_t * key);			struct _cef_dictionary_value_t *  ( __stdcall * get_dictionary)(struct _cef_dictionary_value_t * self, const cef_string_t * key);			struct _cef_list_value_t *  ( __stdcall * get_list)(struct _cef_dictionary_value_t * self, const cef_string_t * key);			int ( __stdcall * set_value)(struct _cef_dictionary_value_t * self, const cef_string_t * key, struct _cef_value_t * value);			int ( __stdcall * set_null)(struct _cef_dictionary_value_t * self, const cef_string_t * key);			int ( __stdcall * set_bool)(struct _cef_dictionary_value_t * self, const cef_string_t * key, int value);			int ( __stdcall * set_int)(struct _cef_dictionary_value_t * self, const cef_string_t * key, int value);			int ( __stdcall * set_double)(struct _cef_dictionary_value_t * self, const cef_string_t * key, double value);			int ( __stdcall * set_string)(struct _cef_dictionary_value_t * self, const cef_string_t * key, const cef_string_t * value);			int ( __stdcall * set_binary)(struct _cef_dictionary_value_t * self, const cef_string_t * key, struct _cef_binary_value_t * value);			int ( __stdcall * set_dictionary)(struct _cef_dictionary_value_t * self, const cef_string_t * key, struct _cef_dictionary_value_t * value);			int ( __stdcall * set_list)(struct _cef_dictionary_value_t * self, const cef_string_t * key, struct _cef_list_value_t * value);		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_display_handler_t	&lt;C: struct _cef_display_handler_t {			cef_base_ref_counted_t base;			void ( __stdcall * on_address_change)(struct _cef_display_handler_t * self, struct _cef_browser_t * browser, struct _cef_frame_t * frame, const cef_string_t * url);			void ( __stdcall * on_title_change)(struct _cef_display_handler_t * self, struct _cef_browser_t * browser, const cef_string_t * title);			void ( __stdcall * on_favicon_urlchange)(struct _cef_display_handler_t * self, struct _cef_browser_t * browser, cef_string_list_t icon_urls);			void ( __stdcall * on_fullscreen_mode_change)(struct _cef_display_handler_t * self, struct _cef_browser_t * browser, int fullscreen);			int ( __stdcall * on_tooltip)(struct _cef_display_handler_t * self, struct _cef_browser_t * browser, cef_string_t * text);			void ( __stdcall * on_status_message)(struct _cef_display_handler_t * self, struct _cef_browser_t * browser, const cef_string_t * value);			int ( __stdcall * on_console_message)(struct _cef_display_handler_t * self, struct _cef_browser_t * browser, const cef_string_t * message, const cef_string_t * source, int line);		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_domdocument_t	&lt;C: struct _cef_domdocument_t {			cef_base_ref_counted_t base;			cef_dom_document_type_t ( __stdcall * get_type)(struct _cef_domdocument_t * self);			struct _cef_domnode_t *  ( __stdcall * get_document)(struct _cef_domdocument_t * self);			struct _cef_domnode_t *  ( __stdcall * get_body)(struct _cef_domdocument_t * self);			struct _cef_domnode_t *  ( __stdcall * get_head)(struct _cef_domdocument_t * self);			cef_string_userfree_t ( __stdcall * get_title)(struct _cef_domdocument_t * self);			struct _cef_domnode_t *  ( __stdcall * get_element_by_id)(struct _cef_domdocument_t * self, const cef_string_t * id);			struct _cef_domnode_t *  ( __stdcall * get_focused_node)(struct _cef_domdocument_t * self);			int ( __stdcall * has_selection)(struct _cef_domdocument_t * self);			int ( __stdcall * get_selection_start_offset)(struct _cef_domdocument_t * self);			int ( __stdcall * get_selection_end_offset)(struct _cef_domdocument_t * self);			cef_string_userfree_t ( __stdcall * get_selection_as_markup)(struct _cef_domdocument_t * self);			cef_string_userfree_t ( __stdcall * get_selection_as_text)(struct _cef_domdocument_t * self);			cef_string_userfree_t ( __stdcall * get_base_url)(struct _cef_domdocument_t * self);			cef_string_userfree_t ( __stdcall * get_complete_url)(struct _cef_domdocument_t * self, const cef_string_t * partialURL);		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_domnode_t	&lt;C: struct _cef_domnode_t {			cef_base_ref_counted_t base;			cef_dom_node_type_t ( __stdcall * get_type)(struct _cef_domnode_t * self);			int ( __stdcall * is_text)(struct _cef_domnode_t * self);			int ( __stdcall * is_element)(struct _cef_domnode_t * self);			int ( __stdcall * is_editable)(struct _cef_domnode_t * self);			int ( __stdcall * is_form_control_element)(struct _cef_domnode_t * self);			cef_string_userfree_t ( __stdcall * get_form_control_element_type)(struct _cef_domnode_t * self);			int ( __stdcall * is_same)(struct _cef_domnode_t * self, struct _cef_domnode_t * that);			cef_string_userfree_t ( __stdcall * get_name)(struct _cef_domnode_t * self);			cef_string_userfree_t ( __stdcall * get_value)(struct _cef_domnode_t * self);			int ( __stdcall * set_value)(struct _cef_domnode_t * self, const cef_string_t * value);			cef_string_userfree_t ( __stdcall * get_as_markup)(struct _cef_domnode_t * self);			struct _cef_domdocument_t *  ( __stdcall * get_document)(struct _cef_domnode_t * self);			struct _cef_domnode_t *  ( __stdcall * get_parent)(struct _cef_domnode_t * self);			struct _cef_domnode_t *  ( __stdcall * get_previous_sibling)(struct _cef_domnode_t * self);			struct _cef_domnode_t *  ( __stdcall * get_next_sibling)(struct _cef_domnode_t * self);			int ( __stdcall * has_children)(struct _cef_domnode_t * self);			struct _cef_domnode_t *  ( __stdcall * get_first_child)(struct _cef_domnode_t * self);			struct _cef_domnode_t *  ( __stdcall * get_last_child)(struct _cef_domnode_t * self);			cef_string_userfree_t ( __stdcall * get_element_tag_name)(struct _cef_domnode_t * self);			int ( __stdcall * has_element_attributes)(struct _cef_domnode_t * self);			int ( __stdcall * has_element_attribute)(struct _cef_domnode_t * self, const cef_string_t * attrName);			cef_string_userfree_t ( __stdcall * get_element_attribute)(struct _cef_domnode_t * self, const cef_string_t * attrName);			void ( __stdcall * get_element_attributes)(struct _cef_domnode_t * self, cef_string_map_t attrMap);			int ( __stdcall * set_element_attribute)(struct _cef_domnode_t * self, const cef_string_t * attrName, const cef_string_t * value);			cef_string_userfree_t ( __stdcall * get_element_inner_text)(struct _cef_domnode_t * self);			cef_rect_t ( __stdcall * get_element_bounds)(struct _cef_domnode_t * self);		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_domvisitor_t	&lt;C: struct _cef_domvisitor_t {			cef_base_ref_counted_t base;			void ( __stdcall * visit)(struct _cef_domvisitor_t * self, struct _cef_domdocument_t * document);		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_download_handler_t	&lt;C: struct _cef_download_handler_t {			cef_base_ref_counted_t base;			void ( __stdcall * on_before_download)(struct _cef_download_handler_t * self, struct _cef_browser_t * browser, struct _cef_download_item_t * download_item, const cef_string_t * suggested_name, struct _cef_before_download_callback_t * callback);			void ( __stdcall * on_download_updated)(struct _cef_download_handler_t * self, struct _cef_browser_t * browser, struct _cef_download_item_t * download_item, struct _cef_download_item_callback_t * callback);		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_download_image_callback_t	&lt;C: struct _cef_download_image_callback_t {			cef_base_ref_counted_t base;			void ( __stdcall * on_download_image_finished)(struct _cef_download_image_callback_t * self, const cef_string_t * image_url, int http_status_code, struct _cef_image_t * image);		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_download_item_callback_t	&lt;C: struct _cef_download_item_callback_t {			cef_base_ref_counted_t base;			void ( __stdcall * cancel)(struct _cef_download_item_callback_t * self);			void ( __stdcall * pause)(struct _cef_download_item_callback_t * self);			void ( __stdcall * resume)(struct _cef_download_item_callback_t * self);		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_download_item_t	&lt;C: struct _cef_download_item_t {			cef_base_ref_counted_t base;			int ( __stdcall * is_valid)(struct _cef_download_item_t * self);			int ( __stdcall * is_in_progress)(struct _cef_download_item_t * self);			int ( __stdcall * is_complete)(struct _cef_download_item_t * self);			int ( __stdcall * is_canceled)(struct _cef_download_item_t * self);			int64 ( __stdcall * get_current_speed)(struct _cef_download_item_t * self);			int ( __stdcall * get_percent_complete)(struct _cef_download_item_t * self);			int64 ( __stdcall * get_total_bytes)(struct _cef_download_item_t * self);			int64 ( __stdcall * get_received_bytes)(struct _cef_download_item_t * self);			cef_time_t ( __stdcall * get_start_time)(struct _cef_download_item_t * self);			cef_time_t ( __stdcall * get_end_time)(struct _cef_download_item_t * self);			cef_string_userfree_t ( __stdcall * get_full_path)(struct _cef_download_item_t * self);			uint32 ( __stdcall * get_id)(struct _cef_download_item_t * self);			cef_string_userfree_t ( __stdcall * get_url)(struct _cef_download_item_t * self);			cef_string_userfree_t ( __stdcall * get_original_url)(struct _cef_download_item_t * self);			cef_string_userfree_t ( __stdcall * get_suggested_file_name)(struct _cef_download_item_t * self);			cef_string_userfree_t ( __stdcall * get_content_disposition)(struct _cef_download_item_t * self);			cef_string_userfree_t ( __stdcall * get_mime_type)(struct _cef_download_item_t * self);		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_drag_data_t	&lt;C: struct _cef_drag_data_t {			cef_base_ref_counted_t base;			struct _cef_drag_data_t *  ( __stdcall * clone)(struct _cef_drag_data_t * self);			int ( __stdcall * is_read_only)(struct _cef_drag_data_t * self);			int ( __stdcall * is_link)(struct _cef_drag_data_t * self);			int ( __stdcall * is_fragment)(struct _cef_drag_data_t * self);			int ( __stdcall * is_file)(struct _cef_drag_data_t * self);			cef_string_userfree_t ( __stdcall * get_link_url)(struct _cef_drag_data_t * self);			cef_string_userfree_t ( __stdcall * get_link_title)(struct _cef_drag_data_t * self);			cef_string_userfree_t ( __stdcall * get_link_metadata)(struct _cef_drag_data_t * self);			cef_string_userfree_t ( __stdcall * get_fragment_text)(struct _cef_drag_data_t * self);			cef_string_userfree_t ( __stdcall * get_fragment_html)(struct _cef_drag_data_t * self);			cef_string_userfree_t ( __stdcall * get_fragment_base_url)(struct _cef_drag_data_t * self);			cef_string_userfree_t ( __stdcall * get_file_name)(struct _cef_drag_data_t * self);			size_t ( __stdcall * get_file_contents)(struct _cef_drag_data_t * self, struct _cef_stream_writer_t * writer);			int ( __stdcall * get_file_names)(struct _cef_drag_data_t * self, cef_string_list_t names);			void ( __stdcall * set_link_url)(struct _cef_drag_data_t * self, const cef_string_t * url);			void ( __stdcall * set_link_title)(struct _cef_drag_data_t * self, const cef_string_t * title);			void ( __stdcall * set_link_metadata)(struct _cef_drag_data_t * self, const cef_string_t * data);			void ( __stdcall * set_fragment_text)(struct _cef_drag_data_t * self, const cef_string_t * text);			void ( __stdcall * set_fragment_html)(struct _cef_drag_data_t * self, const cef_string_t * html);			void ( __stdcall * set_fragment_base_url)(struct _cef_drag_data_t * self, const cef_string_t * base_url);			void ( __stdcall * reset_file_contents)(struct _cef_drag_data_t * self);			void ( __stdcall * add_file)(struct _cef_drag_data_t * self, const cef_string_t * path, const cef_string_t * display_name);			struct _cef_image_t *  ( __stdcall * get_image)(struct _cef_drag_data_t * self);			cef_point_t ( __stdcall * get_image_hotspot)(struct _cef_drag_data_t * self);			int ( __stdcall * has_image)(struct _cef_drag_data_t * self);		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_drag_handler_t	&lt;C: struct _cef_drag_handler_t {			cef_base_ref_counted_t base;			int ( __stdcall * on_drag_enter)(struct _cef_drag_handler_t * self, struct _cef_browser_t * browser, struct _cef_drag_data_t * dragData, cef_drag_operations_mask_t mask);			void ( __stdcall * on_draggable_regions_changed)(struct _cef_drag_handler_t * self, struct _cef_browser_t * browser, size_t regionsCount, const cef_draggable_region_t * regions);		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_draggable_region_t	&lt;C: struct _cef_draggable_region_t {			cef_rect_t bounds;			int draggable;		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_file_dialog_callback_t	&lt;C: struct _cef_file_dialog_callback_t {			cef_base_ref_counted_t base;			void ( __stdcall * cont)(struct _cef_file_dialog_callback_t * self, int selected_accept_filter, cef_string_list_t file_paths);			void ( __stdcall * cancel)(struct _cef_file_dialog_callback_t * self);		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_find_handler_t	&lt;C: struct _cef_find_handler_t {			cef_base_ref_counted_t base;			void ( __stdcall * on_find_result)(struct _cef_find_handler_t * self, struct _cef_browser_t * browser, int identifier, int count, const cef_rect_t * selectionRect, int activeMatchOrdinal, int finalUpdate);		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_focus_handler_t	&lt;C: struct _cef_focus_handler_t {			cef_base_ref_counted_t base;			void ( __stdcall * on_take_focus)(struct _cef_focus_handler_t * self, struct _cef_browser_t * browser, int next);			int ( __stdcall * on_set_focus)(struct _cef_focus_handler_t * self, struct _cef_browser_t * browser, cef_focus_source_t source);			void ( __stdcall * on_got_focus)(struct _cef_focus_handler_t * self, struct _cef_browser_t * browser);		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_frame_t	&lt;C: struct _cef_frame_t {			cef_base_ref_counted_t base;			int ( __stdcall * is_valid)(struct _cef_frame_t * self);			void ( __stdcall * undo)(struct _cef_frame_t * self);			void ( __stdcall * redo)(struct _cef_frame_t * self);			void ( __stdcall * cut)(struct _cef_frame_t * self);			void ( __stdcall * copy)(struct _cef_frame_t * self);			void ( __stdcall * paste)(struct _cef_frame_t * self);			void ( __stdcall * del)(struct _cef_frame_t * self);			void ( __stdcall * select_all)(struct _cef_frame_t * self);			void ( __stdcall * view_source)(struct _cef_frame_t * self);			void ( __stdcall * get_source)(struct _cef_frame_t * self, struct _cef_string_visitor_t * visitor);			void ( __stdcall * get_text)(struct _cef_frame_t * self, struct _cef_string_visitor_t * visitor);			void ( __stdcall * load_request)(struct _cef_frame_t * self, struct _cef_request_t * request);			void ( __stdcall * load_url)(struct _cef_frame_t * self, const cef_string_t * url);			void ( __stdcall * load_string)(struct _cef_frame_t * self, const cef_string_t * string_val, const cef_string_t * url);			void ( __stdcall * execute_java_script)(struct _cef_frame_t * self, const cef_string_t * code, const cef_string_t * script_url, int start_line);			int ( __stdcall * is_main)(struct _cef_frame_t * self);			int ( __stdcall * is_focused)(struct _cef_frame_t * self);			cef_string_userfree_t ( __stdcall * get_name)(struct _cef_frame_t * self);			int64 ( __stdcall * get_identifier)(struct _cef_frame_t * self);			struct _cef_frame_t *  ( __stdcall * get_parent)(struct _cef_frame_t * self);			cef_string_userfree_t ( __stdcall * get_url)(struct _cef_frame_t * self);			struct _cef_browser_t *  ( __stdcall * get_browser)(struct _cef_frame_t * self);			struct _cef_v8context_t *  ( __stdcall * get_v8context)(struct _cef_frame_t * self);			void ( __stdcall * visit_dom)(struct _cef_frame_t * self, struct _cef_domvisitor_t * visitor);		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_geolocation_callback_t	&lt;C: struct _cef_geolocation_callback_t {			cef_base_ref_counted_t base;			void ( __stdcall * cont)(struct _cef_geolocation_callback_t * self, int allow);		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_geolocation_handler_t	&lt;C: struct _cef_geolocation_handler_t {			cef_base_ref_counted_t base;			int ( __stdcall * on_request_geolocation_permission)(struct _cef_geolocation_handler_t * self, struct _cef_browser_t * browser, const cef_string_t * requesting_url, int request_id, struct _cef_geolocation_callback_t * callback);			void ( __stdcall * on_cancel_geolocation_permission)(struct _cef_geolocation_handler_t * self, struct _cef_browser_t * browser, int request_id);		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_geoposition_t	&lt;C: struct _cef_geoposition_t {			double latitude, longitude, altitude, accuracy, altitude_accuracy, heading, speed;			cef_time_t timestamp;			cef_geoposition_error_code_t error_code;			cef_string_t error_message;		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_image_t	&lt;C: struct _cef_image_t {			cef_base_ref_counted_t base;			int ( __stdcall * is_empty)(struct _cef_image_t * self);			int ( __stdcall * is_same)(struct _cef_image_t * self, struct _cef_image_t * that);			int ( __stdcall * add_bitmap)(struct _cef_image_t * self, float scale_factor, int pixel_width, int pixel_height, cef_color_type_t color_type, cef_alpha_type_t alpha_type, const void * pixel_data, size_t pixel_data_size);			int ( __stdcall * add_png)(struct _cef_image_t * self, float scale_factor, const void * png_data, size_t png_data_size);			int ( __stdcall * add_jpeg)(struct _cef_image_t * self, float scale_factor, const void * jpeg_data, size_t jpeg_data_size);			size_t ( __stdcall * get_width)(struct _cef_image_t * self);			size_t ( __stdcall * get_height)(struct _cef_image_t * self);			int ( __stdcall * has_representation)(struct _cef_image_t * self, float scale_factor);			int ( __stdcall * remove_representation)(struct _cef_image_t * self, float scale_factor);			int ( __stdcall * get_representation_info)(struct _cef_image_t * self, float scale_factor, float * actual_scale_factor, int * pixel_width, int * pixel_height);			struct _cef_binary_value_t *  ( __stdcall * get_as_bitmap)(struct _cef_image_t * self, float scale_factor, cef_color_type_t color_type, cef_alpha_type_t alpha_type, int * pixel_width, int * pixel_height);			struct _cef_binary_value_t *  ( __stdcall * get_as_png)(struct _cef_image_t * self, float scale_factor, int with_transparency, int * pixel_width, int * pixel_height);			struct _cef_binary_value_t *  ( __stdcall * get_as_jpeg)(struct _cef_image_t * self, float scale_factor, int quality, int * pixel_width, int * pixel_height);		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_insets_t	&lt;C: struct _cef_insets_t {			int top, left, bottom, right;		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_jsdialog_callback_t	&lt;C: struct _cef_jsdialog_callback_t {			cef_base_ref_counted_t base;			void ( __stdcall * cont)(struct _cef_jsdialog_callback_t * self, int success, const cef_string_t * user_input);		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_jsdialog_handler_t	&lt;C: struct _cef_jsdialog_handler_t {			cef_base_ref_counted_t base;			int ( __stdcall * on_jsdialog)(struct _cef_jsdialog_handler_t * self, struct _cef_browser_t * browser, const cef_string_t * origin_url, cef_jsdialog_type_t dialog_type, const cef_string_t * message_text, const cef_string_t * default_prompt_text, struct _cef_jsdialog_callback_t * callback, int * suppress_message);			int ( __stdcall * on_before_unload_dialog)(struct _cef_jsdialog_handler_t * self, struct _cef_browser_t * browser, const cef_string_t * message_text, int is_reload, struct _cef_jsdialog_callback_t * callback);			void ( __stdcall * on_reset_dialog_state)(struct _cef_jsdialog_handler_t * self, struct _cef_browser_t * browser);			void ( __stdcall * on_dialog_closed)(struct _cef_jsdialog_handler_t * self, struct _cef_browser_t * browser);		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_key_event_t	&lt;C: struct _cef_key_event_t {			cef_key_event_type_t type;			uint32 modifiers;			int windows_key_code, native_key_code, is_system_key;			char16 character, unmodified_character;			int focus_on_editable_field;		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_keyboard_handler_t	&lt;C: struct _cef_keyboard_handler_t {			cef_base_ref_counted_t base;			int ( __stdcall * on_pre_key_event)(struct _cef_keyboard_handler_t * self, struct _cef_browser_t * browser, const struct _cef_key_event_t * event, MSG * os_event, int * is_keyboard_shortcut);			int ( __stdcall * on_key_event)(struct _cef_keyboard_handler_t * self, struct _cef_browser_t * browser, const struct _cef_key_event_t * event, MSG * os_event);		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_life_span_handler_t	&lt;C: struct _cef_life_span_handler_t {			cef_base_ref_counted_t base;			int ( __stdcall * on_before_popup)(struct _cef_life_span_handler_t * self, struct _cef_browser_t * browser, struct _cef_frame_t * frame, const cef_string_t * target_url, const cef_string_t * target_frame_name, cef_window_open_disposition_t target_disposition, int user_gesture, const struct _cef_popup_features_t * popupFeatures, struct _cef_window_info_t * windowInfo, struct _cef_client_t * * client, struct _cef_browser_settings_t * settings, int * no_javascript_access);			void ( __stdcall * on_after_created)(struct _cef_life_span_handler_t * self, struct _cef_browser_t * browser);			int ( __stdcall * do_close)(struct _cef_life_span_handler_t * self, struct _cef_browser_t * browser);			void ( __stdcall * on_before_close)(struct _cef_life_span_handler_t * self, struct _cef_browser_t * browser);		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_list_value_t	&lt;C: struct _cef_list_value_t {			cef_base_ref_counted_t base;			int ( __stdcall * is_valid)(struct _cef_list_value_t * self);			int ( __stdcall * is_owned)(struct _cef_list_value_t * self);			int ( __stdcall * is_read_only)(struct _cef_list_value_t * self);			int ( __stdcall * is_same)(struct _cef_list_value_t * self, struct _cef_list_value_t * that);			int ( __stdcall * is_equal)(struct _cef_list_value_t * self, struct _cef_list_value_t * that);			struct _cef_list_value_t *  ( __stdcall * copy)(struct _cef_list_value_t * self);			int ( __stdcall * set_size)(struct _cef_list_value_t * self, size_t size);			size_t ( __stdcall * get_size)(struct _cef_list_value_t * self);			int ( __stdcall * clear)(struct _cef_list_value_t * self);			int ( __stdcall * remove)(struct _cef_list_value_t * self, size_t index);			cef_value_type_t ( __stdcall * get_type)(struct _cef_list_value_t * self, size_t index);			struct _cef_value_t *  ( __stdcall * get_value)(struct _cef_list_value_t * self, size_t index);			int ( __stdcall * get_bool)(struct _cef_list_value_t * self, size_t index);			int ( __stdcall * get_int)(struct _cef_list_value_t * self, size_t index);			double ( __stdcall * get_double)(struct _cef_list_value_t * self, size_t index);			cef_string_userfree_t ( __stdcall * get_string)(struct _cef_list_value_t * self, size_t index);			struct _cef_binary_value_t *  ( __stdcall * get_binary)(struct _cef_list_value_t * self, size_t index);			struct _cef_dictionary_value_t *  ( __stdcall * get_dictionary)(struct _cef_list_value_t * self, size_t index);			struct _cef_list_value_t *  ( __stdcall * get_list)(struct _cef_list_value_t * self, size_t index);			int ( __stdcall * set_value)(struct _cef_list_value_t * self, size_t index, struct _cef_value_t * value);			int ( __stdcall * set_null)(struct _cef_list_value_t * self, size_t index);			int ( __stdcall * set_bool)(struct _cef_list_value_t * self, size_t index, int value);			int ( __stdcall * set_int)(struct _cef_list_value_t * self, size_t index, int value);			int ( __stdcall * set_double)(struct _cef_list_value_t * self, size_t index, double value);			int ( __stdcall * set_string)(struct _cef_list_value_t * self, size_t index, const cef_string_t * value);			int ( __stdcall * set_binary)(struct _cef_list_value_t * self, size_t index, struct _cef_binary_value_t * value);			int ( __stdcall * set_dictionary)(struct _cef_list_value_t * self, size_t index, struct _cef_dictionary_value_t * value);			int ( __stdcall * set_list)(struct _cef_list_value_t * self, size_t index, struct _cef_list_value_t * value);		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_load_handler_t	&lt;C: struct _cef_load_handler_t {			cef_base_ref_counted_t base;			void ( __stdcall * on_loading_state_change)(struct _cef_load_handler_t * self, struct _cef_browser_t * browser, int isLoading, int canGoBack, int canGoForward);			void ( __stdcall * on_load_start)(struct _cef_load_handler_t * self, struct _cef_browser_t * browser, struct _cef_frame_t * frame, cef_transition_type_t transition_type);			void ( __stdcall * on_load_end)(struct _cef_load_handler_t * self, struct _cef_browser_t * browser, struct _cef_frame_t * frame, int httpStatusCode);			void ( __stdcall * on_load_error)(struct _cef_load_handler_t * self, struct _cef_browser_t * browser, struct _cef_frame_t * frame, cef_errorcode_t errorCode, const cef_string_t * errorText, const cef_string_t * failedUrl);		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_main_args_t	&lt;C: struct _cef_main_args_t {			HINSTANCE instance;		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_menu_model_delegate_t	&lt;C: struct _cef_menu_model_delegate_t {			cef_base_ref_counted_t base;			void ( __stdcall * execute_command)(struct _cef_menu_model_delegate_t * self, struct _cef_menu_model_t * menu_model, int command_id, cef_event_flags_t event_flags);			void ( __stdcall * mouse_outside_menu)(struct _cef_menu_model_delegate_t * self, struct _cef_menu_model_t * menu_model, const cef_point_t * screen_point);			void ( __stdcall * unhandled_open_submenu)(struct _cef_menu_model_delegate_t * self, struct _cef_menu_model_t * menu_model, int is_rtl);			void ( __stdcall * unhandled_close_submenu)(struct _cef_menu_model_delegate_t * self, struct _cef_menu_model_t * menu_model, int is_rtl);			void ( __stdcall * menu_will_show)(struct _cef_menu_model_delegate_t * self, struct _cef_menu_model_t * menu_model);			void ( __stdcall * menu_closed)(struct _cef_menu_model_delegate_t * self, struct _cef_menu_model_t * menu_model);			int ( __stdcall * format_label)(struct _cef_menu_model_delegate_t * self, struct _cef_menu_model_t * menu_model, cef_string_t * label);		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_menu_model_t	&lt;C: struct _cef_menu_model_t {			cef_base_ref_counted_t base;			int ( __stdcall * is_sub_menu)(struct _cef_menu_model_t * self);			int ( __stdcall * clear)(struct _cef_menu_model_t * self);			int ( __stdcall * get_count)(struct _cef_menu_model_t * self);			int ( __stdcall * add_separator)(struct _cef_menu_model_t * self);			int ( __stdcall * add_item)(struct _cef_menu_model_t * self, int command_id, const cef_string_t * label);			int ( __stdcall * add_check_item)(struct _cef_menu_model_t * self, int command_id, const cef_string_t * label);			int ( __stdcall * add_radio_item)(struct _cef_menu_model_t * self, int command_id, const cef_string_t * label, int group_id);			struct _cef_menu_model_t *  ( __stdcall * add_sub_menu)(struct _cef_menu_model_t * self, int command_id, const cef_string_t * label);			int ( __stdcall * insert_separator_at)(struct _cef_menu_model_t * self, int index);			int ( __stdcall * insert_item_at)(struct _cef_menu_model_t * self, int index, int command_id, const cef_string_t * label);			int ( __stdcall * insert_check_item_at)(struct _cef_menu_model_t * self, int index, int command_id, const cef_string_t * label);			int ( __stdcall * insert_radio_item_at)(struct _cef_menu_model_t * self, int index, int command_id, const cef_string_t * label, int group_id);			struct _cef_menu_model_t *  ( __stdcall * insert_sub_menu_at)(struct _cef_menu_model_t * self, int index, int command_id, const cef_string_t * label);			int ( __stdcall * remove)(struct _cef_menu_model_t * self, int command_id);			int ( __stdcall * remove_at)(struct _cef_menu_model_t * self, int index);			int ( __stdcall * get_index_of)(struct _cef_menu_model_t * self, int command_id);			int ( __stdcall * get_command_id_at)(struct _cef_menu_model_t * self, int index);			int ( __stdcall * set_command_id_at)(struct _cef_menu_model_t * self, int index, int command_id);			cef_string_userfree_t ( __stdcall * get_label)(struct _cef_menu_model_t * self, int command_id);			cef_string_userfree_t ( __stdcall * get_label_at)(struct _cef_menu_model_t * self, int index);			int ( __stdcall * set_label)(struct _cef_menu_model_t * self, int command_id, const cef_string_t * label);			int ( __stdcall * set_label_at)(struct _cef_menu_model_t * self, int index, const cef_string_t * label);			cef_menu_item_type_t ( __stdcall * get_type)(struct _cef_menu_model_t * self, int command_id);			cef_menu_item_type_t ( __stdcall * get_type_at)(struct _cef_menu_model_t * self, int index);			int ( __stdcall * get_group_id)(struct _cef_menu_model_t * self, int command_id);			int ( __stdcall * get_group_id_at)(struct _cef_menu_model_t * self, int index);			int ( __stdcall * set_group_id)(struct _cef_menu_model_t * self, int command_id, int group_id);			int ( __stdcall * set_group_id_at)(struct _cef_menu_model_t * self, int index, int group_id);			struct _cef_menu_model_t *  ( __stdcall * get_sub_menu)(struct _cef_menu_model_t * self, int command_id);			struct _cef_menu_model_t *  ( __stdcall * get_sub_menu_at)(struct _cef_menu_model_t * self, int index);			int ( __stdcall * is_visible)(struct _cef_menu_model_t * self, int command_id);			int ( __stdcall * is_visible_at)(struct _cef_menu_model_t * self, int index);			int ( __stdcall * set_visible)(struct _cef_menu_model_t * self, int command_id, int visible);			int ( __stdcall * set_visible_at)(struct _cef_menu_model_t * self, int index, int visible);			int ( __stdcall * is_enabled)(struct _cef_menu_model_t * self, int command_id);			int ( __stdcall * is_enabled_at)(struct _cef_menu_model_t * self, int index);			int ( __stdcall * set_enabled)(struct _cef_menu_model_t * self, int command_id, int enabled);			int ( __stdcall * set_enabled_at)(struct _cef_menu_model_t * self, int index, int enabled);			int ( __stdcall * is_checked)(struct _cef_menu_model_t * self, int command_id);			int ( __stdcall * is_checked_at)(struct _cef_menu_model_t * self, int index);			int ( __stdcall * set_checked)(struct _cef_menu_model_t * self, int command_id, int checked);			int ( __stdcall * set_checked_at)(struct _cef_menu_model_t * self, int index, int checked);			int ( __stdcall * has_accelerator)(struct _cef_menu_model_t * self, int command_id);			int ( __stdcall * has_accelerator_at)(struct _cef_menu_model_t * self, int index);			int ( __stdcall * set_accelerator)(struct _cef_menu_model_t * self, int command_id, int key_code, int shift_pressed, int ctrl_pressed, int alt_pressed);			int ( __stdcall * set_accelerator_at)(struct _cef_menu_model_t * self, int index, int key_code, int shift_pressed, int ctrl_pressed, int alt_pressed);			int ( __stdcall * remove_accelerator)(struct _cef_menu_model_t * self, int command_id);			int ( __stdcall * remove_accelerator_at)(struct _cef_menu_model_t * self, int index);			int ( __stdcall * get_accelerator)(struct _cef_menu_model_t * self, int command_id, int * key_code, int * shift_pressed, int * ctrl_pressed, int * alt_pressed);			int ( __stdcall * get_accelerator_at)(struct _cef_menu_model_t * self, int index, int * key_code, int * shift_pressed, int * ctrl_pressed, int * alt_pressed);			int ( __stdcall * set_color)(struct _cef_menu_model_t * self, int command_id, cef_menu_color_type_t color_type, cef_color_t color);			int ( __stdcall * set_color_at)(struct _cef_menu_model_t * self, int index, cef_menu_color_type_t color_type, cef_color_t color);			int ( __stdcall * get_color)(struct _cef_menu_model_t * self, int command_id, cef_menu_color_type_t color_type, cef_color_t * color);			int ( __stdcall * get_color_at)(struct _cef_menu_model_t * self, int index, cef_menu_color_type_t color_type, cef_color_t * color);			int ( __stdcall * set_font_list)(struct _cef_menu_model_t * self, int command_id, const cef_string_t * font_list);			int ( __stdcall * set_font_list_at)(struct _cef_menu_model_t * self, int index, const cef_string_t * font_list);		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_mouse_event_t	&lt;C: struct _cef_mouse_event_t {			int x, y;			uint32 modifiers;		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_navigation_entry_t	&lt;C: struct _cef_navigation_entry_t {			cef_base_ref_counted_t base;			int ( __stdcall * is_valid)(struct _cef_navigation_entry_t * self);			cef_string_userfree_t ( __stdcall * get_url)(struct _cef_navigation_entry_t * self);			cef_string_userfree_t ( __stdcall * get_display_url)(struct _cef_navigation_entry_t * self);			cef_string_userfree_t ( __stdcall * get_original_url)(struct _cef_navigation_entry_t * self);			cef_string_userfree_t ( __stdcall * get_title)(struct _cef_navigation_entry_t * self);			cef_transition_type_t ( __stdcall * get_transition_type)(struct _cef_navigation_entry_t * self);			int ( __stdcall * has_post_data)(struct _cef_navigation_entry_t * self);			cef_time_t ( __stdcall * get_completion_time)(struct _cef_navigation_entry_t * self);			int ( __stdcall * get_http_status_code)(struct _cef_navigation_entry_t * self);			struct _cef_sslstatus_t *  ( __stdcall * get_sslstatus)(struct _cef_navigation_entry_t * self);		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_navigation_entry_visitor_t	&lt;C: struct _cef_navigation_entry_visitor_t {			cef_base_ref_counted_t base;			int ( __stdcall * visit)(struct _cef_navigation_entry_visitor_t * self, struct _cef_navigation_entry_t * entry, int current, int index, int total);		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_pdf_print_callback_t	&lt;C: struct _cef_pdf_print_callback_t {			cef_base_ref_counted_t base;			void ( __stdcall * on_pdf_print_finished)(struct _cef_pdf_print_callback_t * self, const cef_string_t * path, int ok);		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_pdf_print_settings_t	&lt;C: struct _cef_pdf_print_settings_t {			cef_string_t header_footer_title, header_footer_url;			int page_width, page_height, scale_factor;			double margin_top, margin_right, margin_bottom, margin_left;			cef_pdf_print_margin_type_t margin_type;			int header_footer_enabled, selection_only, landscape, backgrounds_enabled;		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_point_t	&lt;C: struct _cef_point_t {			int x, y;		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_popup_features_t	&lt;C: struct _cef_popup_features_t {			int x, xSet, y, ySet, width, widthSet, height, heightSet, menuBarVisible, statusBarVisible, toolBarVisible, locationBarVisible, scrollbarsVisible, resizable, fullscreen, dialog;		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_post_data_element_t	&lt;C: struct _cef_post_data_element_t {			cef_base_ref_counted_t base;			int ( __stdcall * is_read_only)(struct _cef_post_data_element_t * self);			void ( __stdcall * set_to_empty)(struct _cef_post_data_element_t * self);			void ( __stdcall * set_to_file)(struct _cef_post_data_element_t * self, const cef_string_t * fileName);			void ( __stdcall * set_to_bytes)(struct _cef_post_data_element_t * self, size_t size, const void * bytes);			cef_postdataelement_type_t ( __stdcall * get_type)(struct _cef_post_data_element_t * self);			cef_string_userfree_t ( __stdcall * get_file)(struct _cef_post_data_element_t * self);			size_t ( __stdcall * get_bytes_count)(struct _cef_post_data_element_t * self);			size_t ( __stdcall * get_bytes)(struct _cef_post_data_element_t * self, size_t size, void * bytes);		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_post_data_t	&lt;C: struct _cef_post_data_t {			cef_base_ref_counted_t base;			int ( __stdcall * is_read_only)(struct _cef_post_data_t * self);			int ( __stdcall * has_excluded_elements)(struct _cef_post_data_t * self);			size_t ( __stdcall * get_element_count)(struct _cef_post_data_t * self);			void ( __stdcall * get_elements)(struct _cef_post_data_t * self, size_t * elementsCount, struct _cef_post_data_element_t * * elements);			int ( __stdcall * remove_element)(struct _cef_post_data_t * self, struct _cef_post_data_element_t * element);			int ( __stdcall * add_element)(struct _cef_post_data_t * self, struct _cef_post_data_element_t * element);			void ( __stdcall * remove_elements)(struct _cef_post_data_t * self);		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_print_dialog_callback_t	&lt;C: struct _cef_print_dialog_callback_t {			cef_base_ref_counted_t base;			void ( __stdcall * cont)(struct _cef_print_dialog_callback_t * self, struct _cef_print_settings_t * settings);			void ( __stdcall * cancel)(struct _cef_print_dialog_callback_t * self);		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_print_handler_t	&lt;C: struct _cef_print_handler_t {			cef_base_ref_counted_t base;			void ( __stdcall * on_print_start)(struct _cef_print_handler_t * self, struct _cef_browser_t * browser);			void ( __stdcall * on_print_settings)(struct _cef_print_handler_t * self, struct _cef_browser_t * browser, struct _cef_print_settings_t * settings, int get_defaults);			int ( __stdcall * on_print_dialog)(struct _cef_print_handler_t * self, struct _cef_browser_t * browser, int has_selection, struct _cef_print_dialog_callback_t * callback);			int ( __stdcall * on_print_job)(struct _cef_print_handler_t * self, struct _cef_browser_t * browser, const cef_string_t * document_name, const cef_string_t * pdf_file_path, struct _cef_print_job_callback_t * callback);			void ( __stdcall * on_print_reset)(struct _cef_print_handler_t * self, struct _cef_browser_t * browser);			cef_size_t ( __stdcall * get_pdf_paper_size)(struct _cef_print_handler_t * self, int device_units_per_inch);		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_print_job_callback_t	&lt;C: struct _cef_print_job_callback_t {			cef_base_ref_counted_t base;			void ( __stdcall * cont)(struct _cef_print_job_callback_t * self);		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_print_settings_t	&lt;C: struct _cef_print_settings_t {			cef_base_ref_counted_t base;			int ( __stdcall * is_valid)(struct _cef_print_settings_t * self);			int ( __stdcall * is_read_only)(struct _cef_print_settings_t * self);			struct _cef_print_settings_t *  ( __stdcall * copy)(struct _cef_print_settings_t * self);			void ( __stdcall * set_orientation)(struct _cef_print_settings_t * self, int landscape);			int ( __stdcall * is_landscape)(struct _cef_print_settings_t * self);			void ( __stdcall * set_printer_printable_area)(struct _cef_print_settings_t * self, const cef_size_t * physical_size_device_units, const cef_rect_t * printable_area_device_units, int landscape_needs_flip);			void ( __stdcall * set_device_name)(struct _cef_print_settings_t * self, const cef_string_t * name);			cef_string_userfree_t ( __stdcall * get_device_name)(struct _cef_print_settings_t * self);			void ( __stdcall * set_dpi)(struct _cef_print_settings_t * self, int dpi);			int ( __stdcall * get_dpi)(struct _cef_print_settings_t * self);			void ( __stdcall * set_page_ranges)(struct _cef_print_settings_t * self, size_t rangesCount, const cef_range_t * ranges);			size_t ( __stdcall * get_page_ranges_count)(struct _cef_print_settings_t * self);			void ( __stdcall * get_page_ranges)(struct _cef_print_settings_t * self, size_t * rangesCount, cef_range_t * ranges);			void ( __stdcall * set_selection_only)(struct _cef_print_settings_t * self, int selection_only);			int ( __stdcall * is_selection_only)(struct _cef_print_settings_t * self);			void ( __stdcall * set_collate)(struct _cef_print_settings_t * self, int collate);			int ( __stdcall * will_collate)(struct _cef_print_settings_t * self);			void ( __stdcall * set_color_model)(struct _cef_print_settings_t * self, cef_color_model_t model);			cef_color_model_t ( __stdcall * get_color_model)(struct _cef_print_settings_t * self);			void ( __stdcall * set_copies)(struct _cef_print_settings_t * self, int copies);			int ( __stdcall * get_copies)(struct _cef_print_settings_t * self);			void ( __stdcall * set_duplex_mode)(struct _cef_print_settings_t * self, cef_duplex_mode_t mode);			cef_duplex_mode_t ( __stdcall * get_duplex_mode)(struct _cef_print_settings_t * self);		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_process_message_t	&lt;C: struct _cef_process_message_t {			cef_base_ref_counted_t base;			int ( __stdcall * is_valid)(struct _cef_process_message_t * self);			int ( __stdcall * is_read_only)(struct _cef_process_message_t * self);			struct _cef_process_message_t *  ( __stdcall * copy)(struct _cef_process_message_t * self);			cef_string_userfree_t ( __stdcall * get_name)(struct _cef_process_message_t * self);			struct _cef_list_value_t *  ( __stdcall * get_argument_list)(struct _cef_process_message_t * self);		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_range_t	&lt;C: struct _cef_range_t {			int from, to;		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_read_handler_t	&lt;C: struct _cef_read_handler_t {			cef_base_ref_counted_t base;			size_t ( __stdcall * read)(struct _cef_read_handler_t * self, void * ptr, size_t size, size_t n);			int ( __stdcall * seek)(struct _cef_read_handler_t * self, int64 offset, int whence);			int64 ( __stdcall * tell)(struct _cef_read_handler_t * self);			int ( __stdcall * eof)(struct _cef_read_handler_t * self);			int ( __stdcall * may_block)(struct _cef_read_handler_t * self);		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_rect_t	&lt;C: struct _cef_rect_t {			int x, y, width, height;		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_register_cdm_callback_t	&lt;C: struct _cef_register_cdm_callback_t {			cef_base_ref_counted_t base;			void ( __stdcall * on_cdm_registration_complete)(struct _cef_register_cdm_callback_t * self, cef_cdm_registration_error_t result, const cef_string_t * error_message);		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_render_handler_t	&lt;C: struct _cef_render_handler_t {			cef_base_ref_counted_t base;			struct _cef_accessibility_handler_t *  ( __stdcall * get_accessibility_handler)(struct _cef_render_handler_t * self);			int ( __stdcall * get_root_screen_rect)(struct _cef_render_handler_t * self, struct _cef_browser_t * browser, cef_rect_t * rect);			int ( __stdcall * get_view_rect)(struct _cef_render_handler_t * self, struct _cef_browser_t * browser, cef_rect_t * rect);			int ( __stdcall * get_screen_point)(struct _cef_render_handler_t * self, struct _cef_browser_t * browser, int viewX, int viewY, int * screenX, int * screenY);			int ( __stdcall * get_screen_info)(struct _cef_render_handler_t * self, struct _cef_browser_t * browser, struct _cef_screen_info_t * screen_info);			void ( __stdcall * on_popup_show)(struct _cef_render_handler_t * self, struct _cef_browser_t * browser, int show);			void ( __stdcall * on_popup_size)(struct _cef_render_handler_t * self, struct _cef_browser_t * browser, const cef_rect_t * rect);			void ( __stdcall * on_paint)(struct _cef_render_handler_t * self, struct _cef_browser_t * browser, cef_paint_element_type_t type, size_t dirtyRectsCount, const cef_rect_t * dirtyRects, const void * buffer, int width, int height);			void ( __stdcall * on_cursor_change)(struct _cef_render_handler_t * self, struct _cef_browser_t * browser, HCURSOR cursor, cef_cursor_type_t type, const struct _cef_cursor_info_t * custom_cursor_info);			int ( __stdcall * start_dragging)(struct _cef_render_handler_t * self, struct _cef_browser_t * browser, struct _cef_drag_data_t * drag_data, cef_drag_operations_mask_t allowed_ops, int x, int y);			void ( __stdcall * update_drag_cursor)(struct _cef_render_handler_t * self, struct _cef_browser_t * browser, cef_drag_operations_mask_t operation);			void ( __stdcall * on_scroll_offset_changed)(struct _cef_render_handler_t * self, struct _cef_browser_t * browser, double x, double y);			void ( __stdcall * on_ime_composition_range_changed)(struct _cef_render_handler_t * self, struct _cef_browser_t * browser, const cef_range_t * selected_range, size_t character_boundsCount, const cef_rect_t * character_bounds);		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_render_process_handler_t	&lt;C: struct _cef_render_process_handler_t {			cef_base_ref_counted_t base;			void ( __stdcall * on_render_thread_created)(struct _cef_render_process_handler_t * self, struct _cef_list_value_t * extra_info);			void ( __stdcall * on_web_kit_initialized)(struct _cef_render_process_handler_t * self);			void ( __stdcall * on_browser_created)(struct _cef_render_process_handler_t * self, struct _cef_browser_t * browser);			void ( __stdcall * on_browser_destroyed)(struct _cef_render_process_handler_t * self, struct _cef_browser_t * browser);			struct _cef_load_handler_t *  ( __stdcall * get_load_handler)(struct _cef_render_process_handler_t * self);			int ( __stdcall * on_before_navigation)(struct _cef_render_process_handler_t * self, struct _cef_browser_t * browser, struct _cef_frame_t * frame, struct _cef_request_t * request, cef_navigation_type_t navigation_type, int is_redirect);			void ( __stdcall * on_context_created)(struct _cef_render_process_handler_t * self, struct _cef_browser_t * browser, struct _cef_frame_t * frame, struct _cef_v8context_t * context);			void ( __stdcall * on_context_released)(struct _cef_render_process_handler_t * self, struct _cef_browser_t * browser, struct _cef_frame_t * frame, struct _cef_v8context_t * context);			void ( __stdcall * on_uncaught_exception)(struct _cef_render_process_handler_t * self, struct _cef_browser_t * browser, struct _cef_frame_t * frame, struct _cef_v8context_t * context, struct _cef_v8exception_t * exception, struct _cef_v8stack_trace_t * stackTrace);			void ( __stdcall * on_focused_node_changed)(struct _cef_render_process_handler_t * self, struct _cef_browser_t * browser, struct _cef_frame_t * frame, struct _cef_domnode_t * node);			int ( __stdcall * on_process_message_received)(struct _cef_render_process_handler_t * self, struct _cef_browser_t * browser, cef_process_id_t source_process, struct _cef_process_message_t * message);		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_request_callback_t	&lt;C: struct _cef_request_callback_t {			cef_base_ref_counted_t base;			void ( __stdcall * cont)(struct _cef_request_callback_t * self, int allow);			void ( __stdcall * cancel)(struct _cef_request_callback_t * self);		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_request_context_handler_t	&lt;C: struct _cef_request_context_handler_t {			cef_base_ref_counted_t base;			struct _cef_cookie_manager_t *  ( __stdcall * get_cookie_manager)(struct _cef_request_context_handler_t * self);			int ( __stdcall * on_before_plugin_load)(struct _cef_request_context_handler_t * self, const cef_string_t * mime_type, const cef_string_t * plugin_url, int is_main_frame, const cef_string_t * top_origin_url, struct _cef_web_plugin_info_t * plugin_info, cef_plugin_policy_t * plugin_policy);		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_request_context_settings_t	&lt;C: struct _cef_request_context_settings_t {			size_t size;			cef_string_t cache_path;			int persist_session_cookies, persist_user_preferences, ignore_certificate_errors, enable_net_security_expiration;			cef_string_t accept_language_list;		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_request_context_t	&lt;C: struct _cef_request_context_t {			cef_base_ref_counted_t base;			int ( __stdcall * is_same)(struct _cef_request_context_t * self, struct _cef_request_context_t * other);			int ( __stdcall * is_sharing_with)(struct _cef_request_context_t * self, struct _cef_request_context_t * other);			int ( __stdcall * is_global)(struct _cef_request_context_t * self);			struct _cef_request_context_handler_t *  ( __stdcall * get_handler)(struct _cef_request_context_t * self);			cef_string_userfree_t ( __stdcall * get_cache_path)(struct _cef_request_context_t * self);			struct _cef_cookie_manager_t *  ( __stdcall * get_default_cookie_manager)(struct _cef_request_context_t * self, struct _cef_completion_callback_t * callback);			int ( __stdcall * register_scheme_handler_factory)(struct _cef_request_context_t * self, const cef_string_t * scheme_name, const cef_string_t * domain_name, struct _cef_scheme_handler_factory_t * factory);			int ( __stdcall * clear_scheme_handler_factories)(struct _cef_request_context_t * self);			void ( __stdcall * purge_plugin_list_cache)(struct _cef_request_context_t * self, int reload_pages);			int ( __stdcall * has_preference)(struct _cef_request_context_t * self, const cef_string_t * name);			struct _cef_value_t *  ( __stdcall * get_preference)(struct _cef_request_context_t * self, const cef_string_t * name);			struct _cef_dictionary_value_t *  ( __stdcall * get_all_preferences)(struct _cef_request_context_t * self, int include_defaults);			int ( __stdcall * can_set_preference)(struct _cef_request_context_t * self, const cef_string_t * name);			int ( __stdcall * set_preference)(struct _cef_request_context_t * self, const cef_string_t * name, struct _cef_value_t * value, cef_string_t * error);			void ( __stdcall * clear_certificate_exceptions)(struct _cef_request_context_t * self, struct _cef_completion_callback_t * callback);			void ( __stdcall * close_all_connections)(struct _cef_request_context_t * self, struct _cef_completion_callback_t * callback);			void ( __stdcall * resolve_host)(struct _cef_request_context_t * self, const cef_string_t * origin, struct _cef_resolve_callback_t * callback);			cef_errorcode_t ( __stdcall * resolve_host_cached)(struct _cef_request_context_t * self, const cef_string_t * origin, cef_string_list_t resolved_ips);		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_request_handler_t	&lt;C: struct _cef_request_handler_t {			cef_base_ref_counted_t base;			int ( __stdcall * on_before_browse)(struct _cef_request_handler_t * self, struct _cef_browser_t * browser, struct _cef_frame_t * frame, struct _cef_request_t * request, int is_redirect);			int ( __stdcall * on_open_urlfrom_tab)(struct _cef_request_handler_t * self, struct _cef_browser_t * browser, struct _cef_frame_t * frame, const cef_string_t * target_url, cef_window_open_disposition_t target_disposition, int user_gesture);			cef_return_value_t ( __stdcall * on_before_resource_load)(struct _cef_request_handler_t * self, struct _cef_browser_t * browser, struct _cef_frame_t * frame, struct _cef_request_t * request, struct _cef_request_callback_t * callback);			struct _cef_resource_handler_t *  ( __stdcall * get_resource_handler)(struct _cef_request_handler_t * self, struct _cef_browser_t * browser, struct _cef_frame_t * frame, struct _cef_request_t * request);			void ( __stdcall * on_resource_redirect)(struct _cef_request_handler_t * self, struct _cef_browser_t * browser, struct _cef_frame_t * frame, struct _cef_request_t * request, struct _cef_response_t * response, cef_string_t * new_url);			int ( __stdcall * on_resource_response)(struct _cef_request_handler_t * self, struct _cef_browser_t * browser, struct _cef_frame_t * frame, struct _cef_request_t * request, struct _cef_response_t * response);			struct _cef_response_filter_t *  ( __stdcall * get_resource_response_filter)(struct _cef_request_handler_t * self, struct _cef_browser_t * browser, struct _cef_frame_t * frame, struct _cef_request_t * request, struct _cef_response_t * response);			void ( __stdcall * on_resource_load_complete)(struct _cef_request_handler_t * self, struct _cef_browser_t * browser, struct _cef_frame_t * frame, struct _cef_request_t * request, struct _cef_response_t * response, cef_urlrequest_status_t status, int64 received_content_length);			int ( __stdcall * get_auth_credentials)(struct _cef_request_handler_t * self, struct _cef_browser_t * browser, struct _cef_frame_t * frame, int isProxy, const cef_string_t * host, int port, const cef_string_t * realm, const cef_string_t * scheme, struct _cef_auth_callback_t * callback);			int ( __stdcall * on_quota_request)(struct _cef_request_handler_t * self, struct _cef_browser_t * browser, const cef_string_t * origin_url, int64 new_size, struct _cef_request_callback_t * callback);			void ( __stdcall * on_protocol_execution)(struct _cef_request_handler_t * self, struct _cef_browser_t * browser, const cef_string_t * url, int * allow_os_execution);			int ( __stdcall * on_certificate_error)(struct _cef_request_handler_t * self, struct _cef_browser_t * browser, cef_errorcode_t cert_error, const cef_string_t * request_url, struct _cef_sslinfo_t * ssl_info, struct _cef_request_callback_t * callback);			int ( __stdcall * on_select_client_certificate)(struct _cef_request_handler_t * self, struct _cef_browser_t * browser, int isProxy, const cef_string_t * host, int port, size_t certificatesCount, struct _cef_x509certificate_t * const * certificates, struct _cef_select_client_certificate_callback_t * callback);			void ( __stdcall * on_plugin_crashed)(struct _cef_request_handler_t * self, struct _cef_browser_t * browser, const cef_string_t * plugin_path);			void ( __stdcall * on_render_view_ready)(struct _cef_request_handler_t * self, struct _cef_browser_t * browser);			void ( __stdcall * on_render_process_terminated)(struct _cef_request_handler_t * self, struct _cef_browser_t * browser, cef_termination_status_t status);		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_request_t	&lt;C: struct _cef_request_t {			cef_base_ref_counted_t base;			int ( __stdcall * is_read_only)(struct _cef_request_t * self);			cef_string_userfree_t ( __stdcall * get_url)(struct _cef_request_t * self);			void ( __stdcall * set_url)(struct _cef_request_t * self, const cef_string_t * url);			cef_string_userfree_t ( __stdcall * get_method)(struct _cef_request_t * self);			void ( __stdcall * set_method)(struct _cef_request_t * self, const cef_string_t * method);			void ( __stdcall * set_referrer)(struct _cef_request_t * self, const cef_string_t * referrer_url, cef_referrer_policy_t policy);			cef_string_userfree_t ( __stdcall * get_referrer_url)(struct _cef_request_t * self);			cef_referrer_policy_t ( __stdcall * get_referrer_policy)(struct _cef_request_t * self);			struct _cef_post_data_t *  ( __stdcall * get_post_data)(struct _cef_request_t * self);			void ( __stdcall * set_post_data)(struct _cef_request_t * self, struct _cef_post_data_t * postData);			void ( __stdcall * get_header_map)(struct _cef_request_t * self, cef_string_multimap_t headerMap);			void ( __stdcall * set_header_map)(struct _cef_request_t * self, cef_string_multimap_t headerMap);			void ( __stdcall * set)(struct _cef_request_t * self, const cef_string_t * url, const cef_string_t * method, struct _cef_post_data_t * postData, cef_string_multimap_t headerMap);			int ( __stdcall * get_flags)(struct _cef_request_t * self);			void ( __stdcall * set_flags)(struct _cef_request_t * self, int flags);			cef_string_userfree_t ( __stdcall * get_first_party_for_cookies)(struct _cef_request_t * self);			void ( __stdcall * set_first_party_for_cookies)(struct _cef_request_t * self, const cef_string_t * url);			cef_resource_type_t ( __stdcall * get_resource_type)(struct _cef_request_t * self);			cef_transition_type_t ( __stdcall * get_transition_type)(struct _cef_request_t * self);			uint64 ( __stdcall * get_identifier)(struct _cef_request_t * self);		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_resolve_callback_t	&lt;C: struct _cef_resolve_callback_t {			cef_base_ref_counted_t base;			void ( __stdcall * on_resolve_completed)(struct _cef_resolve_callback_t * self, cef_errorcode_t result, cef_string_list_t resolved_ips);		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_resource_bundle_handler_t	&lt;C: struct _cef_resource_bundle_handler_t {			cef_base_ref_counted_t base;			int ( __stdcall * get_localized_string)(struct _cef_resource_bundle_handler_t * self, int string_id, cef_string_t * string);			int ( __stdcall * get_data_resource)(struct _cef_resource_bundle_handler_t * self, int resource_id, void * * data, size_t * data_size);			int ( __stdcall * get_data_resource_for_scale)(struct _cef_resource_bundle_handler_t * self, int resource_id, cef_scale_factor_t scale_factor, void * * data, size_t * data_size);		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_resource_handler_t	&lt;C: struct _cef_resource_handler_t {			cef_base_ref_counted_t base;			int ( __stdcall * process_request)(struct _cef_resource_handler_t * self, struct _cef_request_t * request, struct _cef_callback_t * callback);			void ( __stdcall * get_response_headers)(struct _cef_resource_handler_t * self, struct _cef_response_t * response, int64 * response_length, cef_string_t * redirectUrl);			int ( __stdcall * read_response)(struct _cef_resource_handler_t * self, void * data_out, int bytes_to_read, int * bytes_read, struct _cef_callback_t * callback);			int ( __stdcall * can_get_cookie)(struct _cef_resource_handler_t * self, const struct _cef_cookie_t * cookie);			int ( __stdcall * can_set_cookie)(struct _cef_resource_handler_t * self, const struct _cef_cookie_t * cookie);			void ( __stdcall * cancel)(struct _cef_resource_handler_t * self);		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_response_filter_t	&lt;C: struct _cef_response_filter_t {			cef_base_ref_counted_t base;			int ( __stdcall * init_filter)(struct _cef_response_filter_t * self);			cef_response_filter_status_t ( __stdcall * filter)(struct _cef_response_filter_t * self, void * data_in, size_t data_in_size, size_t * data_in_read, void * data_out, size_t data_out_size, size_t * data_out_written);		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_response_t	&lt;C: struct _cef_response_t {			cef_base_ref_counted_t base;			int ( __stdcall * is_read_only)(struct _cef_response_t * self);			cef_errorcode_t ( __stdcall * get_error)(struct _cef_response_t * self);			void ( __stdcall * set_error)(struct _cef_response_t * self, cef_errorcode_t error);			int ( __stdcall * get_status)(struct _cef_response_t * self);			void ( __stdcall * set_status)(struct _cef_response_t * self, int status);			cef_string_userfree_t ( __stdcall * get_status_text)(struct _cef_response_t * self);			void ( __stdcall * set_status_text)(struct _cef_response_t * self, const cef_string_t * statusText);			cef_string_userfree_t ( __stdcall * get_mime_type)(struct _cef_response_t * self);			void ( __stdcall * set_mime_type)(struct _cef_response_t * self, const cef_string_t * mimeType);			cef_string_userfree_t ( __stdcall * get_header)(struct _cef_response_t * self, const cef_string_t * name);			void ( __stdcall * get_header_map)(struct _cef_response_t * self, cef_string_multimap_t headerMap);			void ( __stdcall * set_header_map)(struct _cef_response_t * self, cef_string_multimap_t headerMap);		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_run_context_menu_callback_t	&lt;C: struct _cef_run_context_menu_callback_t {			cef_base_ref_counted_t base;			void ( __stdcall * cont)(struct _cef_run_context_menu_callback_t * self, int command_id, cef_event_flags_t event_flags);			void ( __stdcall * cancel)(struct _cef_run_context_menu_callback_t * self);		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_run_file_dialog_callback_t	&lt;C: struct _cef_run_file_dialog_callback_t {			cef_base_ref_counted_t base;			void ( __stdcall * on_file_dialog_dismissed)(struct _cef_run_file_dialog_callback_t * self, int selected_accept_filter, cef_string_list_t file_paths);		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_scheme_handler_factory_t	&lt;C: struct _cef_scheme_handler_factory_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_scheme_registrar_t	&lt;C: struct _cef_scheme_registrar_t {			cef_base_scoped_t base;			int ( __stdcall * add_custom_scheme)(struct _cef_scheme_registrar_t * self, const cef_string_t * scheme_name, int is_standard, int is_local, int is_display_isolated, int is_secure, int is_cors_enabled, int is_csp_bypassing);		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_screen_info_t	&lt;C: struct _cef_screen_info_t {			float device_scale_factor;			int depth, depth_per_component, is_monochrome;			cef_rect_t rect, available_rect;		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_select_client_certificate_callback_t	&lt;C: struct _cef_select_client_certificate_callback_t {			cef_base_ref_counted_t base;			void ( __stdcall * select)(struct _cef_select_client_certificate_callback_t * self, struct _cef_x509certificate_t * cert);		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_set_cookie_callback_t	&lt;C: struct _cef_set_cookie_callback_t {			cef_base_ref_counted_t base;			void ( __stdcall * on_complete)(struct _cef_set_cookie_callback_t * self, int success);		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_settings_t	&lt;C: struct _cef_settings_t {			size_t size;			int single_process, no_sandbox;			cef_string_t browser_subprocess_path, framework_dir_path;			int multi_threaded_message_loop, external_message_pump, windowless_rendering_enabled, command_line_args_disabled;			cef_string_t cache_path, user_data_path;			int persist_session_cookies, persist_user_preferences;			cef_string_t user_agent, product_version, locale, log_file;			cef_log_severity_t log_severity;			cef_string_t javascript_flags, resources_dir_path, locales_dir_path;			int pack_loading_disabled, remote_debugging_port, uncaught_exception_stack_size, ignore_certificate_errors, enable_net_security_expiration;			cef_color_t background_color;			cef_string_t accept_language_list;		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_size_t	&lt;C: struct _cef_size_t {			int width, height;		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_sslinfo_t	&lt;C: struct _cef_sslinfo_t {			cef_base_ref_counted_t base;			cef_cert_status_t ( __stdcall * get_cert_status)(struct _cef_sslinfo_t * self);			struct _cef_x509certificate_t *  ( __stdcall * get_x509certificate)(struct _cef_sslinfo_t * self);		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_sslstatus_t	&lt;C: struct _cef_sslstatus_t {			cef_base_ref_counted_t base;			int ( __stdcall * is_secure_connection)(struct _cef_sslstatus_t * self);			cef_cert_status_t ( __stdcall * get_cert_status)(struct _cef_sslstatus_t * self);			cef_ssl_version_t ( __stdcall * get_sslversion)(struct _cef_sslstatus_t * self);			cef_ssl_content_status_t ( __stdcall * get_content_status)(struct _cef_sslstatus_t * self);			struct _cef_x509certificate_t *  ( __stdcall * get_x509certificate)(struct _cef_sslstatus_t * self);		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_stream_reader_t	&lt;C: struct _cef_stream_reader_t {			cef_base_ref_counted_t base;			size_t ( __stdcall * read)(struct _cef_stream_reader_t * self, void * ptr, size_t size, size_t n);			int ( __stdcall * seek)(struct _cef_stream_reader_t * self, int64 offset, int whence);			int64 ( __stdcall * tell)(struct _cef_stream_reader_t * self);			int ( __stdcall * eof)(struct _cef_stream_reader_t * self);			int ( __stdcall * may_block)(struct _cef_stream_reader_t * self);		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_stream_writer_t	&lt;C: struct _cef_stream_writer_t {			cef_base_ref_counted_t base;			size_t ( __stdcall * write)(struct _cef_stream_writer_t * self, const void * ptr, size_t size, size_t n);			int ( __stdcall * seek)(struct _cef_stream_writer_t * self, int64 offset, int whence);			int64 ( __stdcall * tell)(struct _cef_stream_writer_t * self);			int ( __stdcall * flush)(struct _cef_stream_writer_t * self);			int ( __stdcall * may_block)(struct _cef_stream_writer_t * self);		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_string_utf16_t	&lt;C: struct _cef_string_utf16_t {			char16 * str;			size_t length;			void (* dtor)(char16 * str);		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_string_utf8_t	&lt;C: struct _cef_string_utf8_t {			char * str;			size_t length;			void (* dtor)(char * str);		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_string_visitor_t	&lt;C: struct _cef_string_visitor_t {			cef_base_ref_counted_t base;			void ( __stdcall * visit)(struct _cef_string_visitor_t * self, const cef_string_t * string);		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_string_wide_t	&lt;C: struct _cef_string_wide_t {			wchar_t * str;			size_t length;			void (* dtor)(wchar_t * str);		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_task_runner_t	&lt;C: struct _cef_task_runner_t {			cef_base_ref_counted_t base;			int ( __stdcall * is_same)(struct _cef_task_runner_t * self, struct _cef_task_runner_t * that);			int ( __stdcall * belongs_to_current_thread)(struct _cef_task_runner_t * self);			int ( __stdcall * belongs_to_thread)(struct _cef_task_runner_t * self, cef_thread_id_t threadId);			int ( __stdcall * post_task)(struct _cef_task_runner_t * self, struct _cef_task_t * task);			int ( __stdcall * post_delayed_task)(struct _cef_task_runner_t * self, struct _cef_task_t * task, int64 delay_ms);		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_task_t	&lt;C: struct _cef_task_t {			cef_base_ref_counted_t base;			void ( __stdcall * execute)(struct _cef_task_t * self);		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_time_t	&lt;C: struct _cef_time_t {			int year, month, day_of_week, day_of_month, hour, minute, second, millisecond;		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_urlparts_t	&lt;C: struct _cef_urlparts_t {			cef_string_t spec, scheme, username, password, host, port, origin, path, query;		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_v8accessor_t	&lt;C: struct _cef_v8accessor_t {			cef_base_ref_counted_t base;			int ( __stdcall * get)(struct _cef_v8accessor_t * self, const cef_string_t * name, struct _cef_v8value_t * object, struct _cef_v8value_t * * retval, cef_string_t * exception);			int ( __stdcall * set)(struct _cef_v8accessor_t * self, const cef_string_t * name, struct _cef_v8value_t * object, struct _cef_v8value_t * value, cef_string_t * exception);		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_v8context_t	&lt;C: struct _cef_v8context_t&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_v8exception_t	&lt;C: struct _cef_v8exception_t {			cef_base_ref_counted_t base;			cef_string_userfree_t ( __stdcall * get_message)(struct _cef_v8exception_t * self);			cef_string_userfree_t ( __stdcall * get_source_line)(struct _cef_v8exception_t * self);			cef_string_userfree_t ( __stdcall * get_script_resource_name)(struct _cef_v8exception_t * self);			int ( __stdcall * get_line_number)(struct _cef_v8exception_t * self);			int ( __stdcall * get_start_position)(struct _cef_v8exception_t * self);			int ( __stdcall * get_end_position)(struct _cef_v8exception_t * self);			int ( __stdcall * get_start_column)(struct _cef_v8exception_t * self);			int ( __stdcall * get_end_column)(struct _cef_v8exception_t * self);		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_v8handler_t	&lt;C: struct _cef_v8handler_t {			cef_base_ref_counted_t base;			int ( __stdcall * execute)(struct _cef_v8handler_t * self, const cef_string_t * name, struct _cef_v8value_t * object, size_t argumentsCount, struct _cef_v8value_t * const * arguments, struct _cef_v8value_t * * retval, cef_string_t * exception);		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_v8interceptor_t	&lt;C: struct _cef_v8interceptor_t {			cef_base_ref_counted_t base;			int ( __stdcall * get_byname)(struct _cef_v8interceptor_t * self, const cef_string_t * name, struct _cef_v8value_t * object, struct _cef_v8value_t * * retval, cef_string_t * exception);			int ( __stdcall * get_byindex)(struct _cef_v8interceptor_t * self, int index, struct _cef_v8value_t * object, struct _cef_v8value_t * * retval, cef_string_t * exception);			int ( __stdcall * set_byname)(struct _cef_v8interceptor_t * self, const cef_string_t * name, struct _cef_v8value_t * object, struct _cef_v8value_t * value, cef_string_t * exception);			int ( __stdcall * set_byindex)(struct _cef_v8interceptor_t * self, int index, struct _cef_v8value_t * object, struct _cef_v8value_t * value, cef_string_t * exception);		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_v8stack_frame_t	&lt;C: struct _cef_v8stack_frame_t {			cef_base_ref_counted_t base;			int ( __stdcall * is_valid)(struct _cef_v8stack_frame_t * self);			cef_string_userfree_t ( __stdcall * get_script_name)(struct _cef_v8stack_frame_t * self);			cef_string_userfree_t ( __stdcall * get_script_name_or_source_url)(struct _cef_v8stack_frame_t * self);			cef_string_userfree_t ( __stdcall * get_function_name)(struct _cef_v8stack_frame_t * self);			int ( __stdcall * get_line_number)(struct _cef_v8stack_frame_t * self);			int ( __stdcall * get_column)(struct _cef_v8stack_frame_t * self);			int ( __stdcall * is_eval)(struct _cef_v8stack_frame_t * self);			int ( __stdcall * is_constructor)(struct _cef_v8stack_frame_t * self);		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_v8stack_trace_t	&lt;C: struct _cef_v8stack_trace_t {			cef_base_ref_counted_t base;			int ( __stdcall * is_valid)(struct _cef_v8stack_trace_t * self);			int ( __stdcall * get_frame_count)(struct _cef_v8stack_trace_t * self);			struct _cef_v8stack_frame_t *  ( __stdcall * get_frame)(struct _cef_v8stack_trace_t * self, int index);		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_v8value_t	&lt;C: struct _cef_v8value_t {			cef_base_ref_counted_t base;			int ( __stdcall * is_valid)(struct _cef_v8value_t * self);			int ( __stdcall * is_undefined)(struct _cef_v8value_t * self);			int ( __stdcall * is_null)(struct _cef_v8value_t * self);			int ( __stdcall * is_bool)(struct _cef_v8value_t * self);			int ( __stdcall * is_int)(struct _cef_v8value_t * self);			int ( __stdcall * is_uint)(struct _cef_v8value_t * self);			int ( __stdcall * is_double)(struct _cef_v8value_t * self);			int ( __stdcall * is_date)(struct _cef_v8value_t * self);			int ( __stdcall * is_string)(struct _cef_v8value_t * self);			int ( __stdcall * is_object)(struct _cef_v8value_t * self);			int ( __stdcall * is_array)(struct _cef_v8value_t * self);			int ( __stdcall * is_function)(struct _cef_v8value_t * self);			int ( __stdcall * is_same)(struct _cef_v8value_t * self, struct _cef_v8value_t * that);			int ( __stdcall * get_bool_value)(struct _cef_v8value_t * self);			int32 ( __stdcall * get_int_value)(struct _cef_v8value_t * self);			uint32 ( __stdcall * get_uint_value)(struct _cef_v8value_t * self);			double ( __stdcall * get_double_value)(struct _cef_v8value_t * self);			cef_time_t ( __stdcall * get_date_value)(struct _cef_v8value_t * self);			cef_string_userfree_t ( __stdcall * get_string_value)(struct _cef_v8value_t * self);			int ( __stdcall * is_user_created)(struct _cef_v8value_t * self);			int ( __stdcall * has_exception)(struct _cef_v8value_t * self);			struct _cef_v8exception_t *  ( __stdcall * get_exception)(struct _cef_v8value_t * self);			int ( __stdcall * clear_exception)(struct _cef_v8value_t * self);			int ( __stdcall * will_rethrow_exceptions)(struct _cef_v8value_t * self);			int ( __stdcall * set_rethrow_exceptions)(struct _cef_v8value_t * self, int rethrow);			int ( __stdcall * has_value_bykey)(struct _cef_v8value_t * self, const cef_string_t * key);			int ( __stdcall * has_value_byindex)(struct _cef_v8value_t * self, int index);			int ( __stdcall * delete_value_bykey)(struct _cef_v8value_t * self, const cef_string_t * key);			int ( __stdcall * delete_value_byindex)(struct _cef_v8value_t * self, int index);			struct _cef_v8value_t *  ( __stdcall * get_value_bykey)(struct _cef_v8value_t * self, const cef_string_t * key);			struct _cef_v8value_t *  ( __stdcall * get_value_byindex)(struct _cef_v8value_t * self, int index);			int ( __stdcall * set_value_bykey)(struct _cef_v8value_t * self, const cef_string_t * key, struct _cef_v8value_t * value, cef_v8_propertyattribute_t attribute);			int ( __stdcall * set_value_byindex)(struct _cef_v8value_t * self, int index, struct _cef_v8value_t * value);			int ( __stdcall * set_value_byaccessor)(struct _cef_v8value_t * self, const cef_string_t * key, cef_v8_accesscontrol_t settings, cef_v8_propertyattribute_t attribute);			int ( __stdcall * get_keys)(struct _cef_v8value_t * self, cef_string_list_t keys);			int ( __stdcall * set_user_data)(struct _cef_v8value_t * self, struct _cef_base_ref_counted_t * user_data);			struct _cef_base_ref_counted_t *  ( __stdcall * get_user_data)(struct _cef_v8value_t * self);			int ( __stdcall * get_externally_allocated_memory)(struct _cef_v8value_t * self);			int ( __stdcall * adjust_externally_allocated_memory)(struct _cef_v8value_t * self, int change_in_bytes);			int ( __stdcall * get_array_length)(struct _cef_v8value_t * self);			cef_string_userfree_t ( __stdcall * get_function_name)(struct _cef_v8value_t * self);			struct _cef_v8handler_t *  ( __stdcall * get_function_handler)(struct _cef_v8value_t * self);			struct _cef_v8value_t *  ( __stdcall * execute_function)(struct _cef_v8value_t * self, struct _cef_v8value_t * object, size_t argumentsCount, struct _cef_v8value_t * const * arguments);			struct _cef_v8value_t *  ( __stdcall * execute_function_with_context)(struct _cef_v8value_t * self, struct _cef_v8context_t * context, struct _cef_v8value_t * object, size_t argumentsCount, struct _cef_v8value_t * const * arguments);		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_value_t	&lt;C: struct _cef_value_t {			cef_base_ref_counted_t base;			int ( __stdcall * is_valid)(struct _cef_value_t * self);			int ( __stdcall * is_owned)(struct _cef_value_t * self);			int ( __stdcall * is_read_only)(struct _cef_value_t * self);			int ( __stdcall * is_same)(struct _cef_value_t * self, struct _cef_value_t * that);			int ( __stdcall * is_equal)(struct _cef_value_t * self, struct _cef_value_t * that);			struct _cef_value_t *  ( __stdcall * copy)(struct _cef_value_t * self);			cef_value_type_t ( __stdcall * get_type)(struct _cef_value_t * self);			int ( __stdcall * get_bool)(struct _cef_value_t * self);			int ( __stdcall * get_int)(struct _cef_value_t * self);			double ( __stdcall * get_double)(struct _cef_value_t * self);			cef_string_userfree_t ( __stdcall * get_string)(struct _cef_value_t * self);			struct _cef_binary_value_t *  ( __stdcall * get_binary)(struct _cef_value_t * self);			struct _cef_dictionary_value_t *  ( __stdcall * get_dictionary)(struct _cef_value_t * self);			struct _cef_list_value_t *  ( __stdcall * get_list)(struct _cef_value_t * self);			int ( __stdcall * set_null)(struct _cef_value_t * self);			int ( __stdcall * set_bool)(struct _cef_value_t * self, int value);			int ( __stdcall * set_int)(struct _cef_value_t * self, int value);			int ( __stdcall * set_double)(struct _cef_value_t * self, double value);			int ( __stdcall * set_string)(struct _cef_value_t * self, const cef_string_t * value);			int ( __stdcall * set_binary)(struct _cef_value_t * self, struct _cef_binary_value_t * value);			int ( __stdcall * set_dictionary)(struct _cef_value_t * self, struct _cef_dictionary_value_t * value);			int ( __stdcall * set_list)(struct _cef_value_t * self, struct _cef_list_value_t * value);		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_web_plugin_info_t	&lt;C: struct _cef_web_plugin_info_t {			cef_base_ref_counted_t base;			cef_string_userfree_t ( __stdcall * get_name)(struct _cef_web_plugin_info_t * self);			cef_string_userfree_t ( __stdcall * get_path)(struct _cef_web_plugin_info_t * self);			cef_string_userfree_t ( __stdcall * get_version)(struct _cef_web_plugin_info_t * self);			cef_string_userfree_t ( __stdcall * get_description)(struct _cef_web_plugin_info_t * self);		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_web_plugin_info_visitor_t	&lt;C: struct _cef_web_plugin_info_visitor_t {			cef_base_ref_counted_t base;			int ( __stdcall * visit)(struct _cef_web_plugin_info_visitor_t * self, struct _cef_web_plugin_info_t * info, int count, int total);		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_web_plugin_unstable_callback_t	&lt;C: struct _cef_web_plugin_unstable_callback_t {			cef_base_ref_counted_t base;			void ( __stdcall * is_unstable)(struct _cef_web_plugin_unstable_callback_t * self, const cef_string_t * path, int unstable);		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_window_info_t	&lt;C: struct _cef_window_info_t {			DWORD ex_style;			cef_string_t window_name;			DWORD style;			int x, y, width, height;			HWND parent_window;			HMENU menu;			int windowless_rendering_enabled;			HWND window;		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_write_handler_t	&lt;C: struct _cef_write_handler_t {			cef_base_ref_counted_t base;			size_t ( __stdcall * write)(struct _cef_write_handler_t * self, const void * ptr, size_t size, size_t n);			int ( __stdcall * seek)(struct _cef_write_handler_t * self, int64 offset, int whence);			int64 ( __stdcall * tell)(struct _cef_write_handler_t * self);			int ( __stdcall * flush)(struct _cef_write_handler_t * self);			int ( __stdcall * may_block)(struct _cef_write_handler_t * self);		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_x509cert_principal_t	&lt;C: struct _cef_x509cert_principal_t {			cef_base_ref_counted_t base;			cef_string_userfree_t ( __stdcall * get_display_name)(struct _cef_x509cert_principal_t * self);			cef_string_userfree_t ( __stdcall * get_common_name)(struct _cef_x509cert_principal_t * self);			cef_string_userfree_t ( __stdcall * get_locality_name)(struct _cef_x509cert_principal_t * self);			cef_string_userfree_t ( __stdcall * get_state_or_province_name)(struct _cef_x509cert_principal_t * self);			cef_string_userfree_t ( __stdcall * get_country_name)(struct _cef_x509cert_principal_t * self);			void ( __stdcall * get_street_addresses)(struct _cef_x509cert_principal_t * self, cef_string_list_t addresses);			void ( __stdcall * get_organization_names)(struct _cef_x509cert_principal_t * self, cef_string_list_t names);			void ( __stdcall * get_organization_unit_names)(struct _cef_x509cert_principal_t * self, cef_string_list_t names);			void ( __stdcall * get_domain_components)(struct _cef_x509cert_principal_t * self, cef_string_list_t components);		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_cef_x509certificate_t	&lt;C: struct _cef_x509certificate_t {			cef_base_ref_counted_t base;			struct _cef_x509cert_principal_t *  ( __stdcall * get_subject)(struct _cef_x509certificate_t * self);			struct _cef_x509cert_principal_t *  ( __stdcall * get_issuer)(struct _cef_x509certificate_t * self);			struct _cef_binary_value_t *  ( __stdcall * get_serial_number)(struct _cef_x509certificate_t * self);			cef_time_t ( __stdcall * get_valid_start)(struct _cef_x509certificate_t * self);			cef_time_t ( __stdcall * get_valid_expiry)(struct _cef_x509certificate_t * self);			struct _cef_binary_value_t *  ( __stdcall * get_derencoded)(struct _cef_x509certificate_t * self);			struct _cef_binary_value_t *  ( __stdcall * get_pemencoded)(struct _cef_x509certificate_t * self);			size_t ( __stdcall * get_issuer_chain_size)(struct _cef_x509certificate_t * self);			void ( __stdcall * get_derencoded_issuer_chain)(struct _cef_x509certificate_t * self, size_t * chainCount, struct _cef_binary_value_t * * chain);			void ( __stdcall * get_pemencoded_issuer_chain)(struct _cef_x509certificate_t * self, size_t * chainCount, struct _cef_binary_value_t * * chain);		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">tagMSG	&lt;C: struct tagMSG {			HWND hwnd;			UINT message;			WPARAM wParam;			LPARAM lParam;			DWORD time;			POINT pt;		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">tagPOINT	&lt;C: struct tagPOINT {			LONG x, y;		}&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">tm	&lt;C: struct tm {			int tm_sec, tm_min, tm_hour, tm_mday, tm_mon, tm_year, tm_wday, tm_yday, tm_isdst;		}&gt;</body>
</methods>

<methods>
<class-id>CEF.LibChromium</class-id> <category>defines</category>

<body package="ChromiumEmbeddedFramework-Base">CEF_CALLBACK	&lt;C: #define CEF_CALLBACK __stdcall	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">CEF_EXPORT	&lt;C: #define CEF_EXPORT 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">CEF_INCLUDE_BASE_CEF_BASICTYPES_H_	&lt;C: #define CEF_INCLUDE_BASE_CEF_BASICTYPES_H_ 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">CEF_INCLUDE_BASE_CEF_BUILD_H_	&lt;C: #define CEF_INCLUDE_BASE_CEF_BUILD_H_ 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">CEF_INCLUDE_CAPI_CEF_ACCESSIBILITY_HANDLER_CAPI_H_	&lt;C: #define CEF_INCLUDE_CAPI_CEF_ACCESSIBILITY_HANDLER_CAPI_H_ 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">CEF_INCLUDE_CAPI_CEF_APP_CAPI_H_	&lt;C: #define CEF_INCLUDE_CAPI_CEF_APP_CAPI_H_ 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">CEF_INCLUDE_CAPI_CEF_AUTH_CALLBACK_CAPI_H_	&lt;C: #define CEF_INCLUDE_CAPI_CEF_AUTH_CALLBACK_CAPI_H_ 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">CEF_INCLUDE_CAPI_CEF_BASE_CAPI_H_	&lt;C: #define CEF_INCLUDE_CAPI_CEF_BASE_CAPI_H_ 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">CEF_INCLUDE_CAPI_CEF_BROWSER_CAPI_H_	&lt;C: #define CEF_INCLUDE_CAPI_CEF_BROWSER_CAPI_H_ 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">CEF_INCLUDE_CAPI_CEF_BROWSER_PROCESS_HANDLER_CAPI_H_	&lt;C: #define CEF_INCLUDE_CAPI_CEF_BROWSER_PROCESS_HANDLER_CAPI_H_ 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">CEF_INCLUDE_CAPI_CEF_CALLBACK_CAPI_H_	&lt;C: #define CEF_INCLUDE_CAPI_CEF_CALLBACK_CAPI_H_ 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">CEF_INCLUDE_CAPI_CEF_CLIENT_CAPI_H_	&lt;C: #define CEF_INCLUDE_CAPI_CEF_CLIENT_CAPI_H_ 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">CEF_INCLUDE_CAPI_CEF_COMMAND_LINE_CAPI_H_	&lt;C: #define CEF_INCLUDE_CAPI_CEF_COMMAND_LINE_CAPI_H_ 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">CEF_INCLUDE_CAPI_CEF_CONTEXT_MENU_HANDLER_CAPI_H_	&lt;C: #define CEF_INCLUDE_CAPI_CEF_CONTEXT_MENU_HANDLER_CAPI_H_ 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">CEF_INCLUDE_CAPI_CEF_COOKIE_CAPI_H_	&lt;C: #define CEF_INCLUDE_CAPI_CEF_COOKIE_CAPI_H_ 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">CEF_INCLUDE_CAPI_CEF_DIALOG_HANDLER_CAPI_H_	&lt;C: #define CEF_INCLUDE_CAPI_CEF_DIALOG_HANDLER_CAPI_H_ 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">CEF_INCLUDE_CAPI_CEF_DISPLAY_HANDLER_CAPI_H_	&lt;C: #define CEF_INCLUDE_CAPI_CEF_DISPLAY_HANDLER_CAPI_H_ 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">CEF_INCLUDE_CAPI_CEF_DOM_CAPI_H_	&lt;C: #define CEF_INCLUDE_CAPI_CEF_DOM_CAPI_H_ 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">CEF_INCLUDE_CAPI_CEF_DOWNLOAD_HANDLER_CAPI_H_	&lt;C: #define CEF_INCLUDE_CAPI_CEF_DOWNLOAD_HANDLER_CAPI_H_ 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">CEF_INCLUDE_CAPI_CEF_DOWNLOAD_ITEM_CAPI_H_	&lt;C: #define CEF_INCLUDE_CAPI_CEF_DOWNLOAD_ITEM_CAPI_H_ 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">CEF_INCLUDE_CAPI_CEF_DRAG_DATA_CAPI_H_	&lt;C: #define CEF_INCLUDE_CAPI_CEF_DRAG_DATA_CAPI_H_ 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">CEF_INCLUDE_CAPI_CEF_DRAG_HANDLER_CAPI_H_	&lt;C: #define CEF_INCLUDE_CAPI_CEF_DRAG_HANDLER_CAPI_H_ 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">CEF_INCLUDE_CAPI_CEF_FIND_HANDLER_CAPI_H_	&lt;C: #define CEF_INCLUDE_CAPI_CEF_FIND_HANDLER_CAPI_H_ 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">CEF_INCLUDE_CAPI_CEF_FOCUS_HANDLER_CAPI_H_	&lt;C: #define CEF_INCLUDE_CAPI_CEF_FOCUS_HANDLER_CAPI_H_ 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">CEF_INCLUDE_CAPI_CEF_FRAME_CAPI_H_	&lt;C: #define CEF_INCLUDE_CAPI_CEF_FRAME_CAPI_H_ 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">CEF_INCLUDE_CAPI_CEF_GEOLOCATION_HANDLER_CAPI_H_	&lt;C: #define CEF_INCLUDE_CAPI_CEF_GEOLOCATION_HANDLER_CAPI_H_ 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">CEF_INCLUDE_CAPI_CEF_IMAGE_CAPI_H_	&lt;C: #define CEF_INCLUDE_CAPI_CEF_IMAGE_CAPI_H_ 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">CEF_INCLUDE_CAPI_CEF_JSDIALOG_HANDLER_CAPI_H_	&lt;C: #define CEF_INCLUDE_CAPI_CEF_JSDIALOG_HANDLER_CAPI_H_ 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">CEF_INCLUDE_CAPI_CEF_KEYBOARD_HANDLER_CAPI_H_	&lt;C: #define CEF_INCLUDE_CAPI_CEF_KEYBOARD_HANDLER_CAPI_H_ 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">CEF_INCLUDE_CAPI_CEF_LIFE_SPAN_HANDLER_CAPI_H_	&lt;C: #define CEF_INCLUDE_CAPI_CEF_LIFE_SPAN_HANDLER_CAPI_H_ 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">CEF_INCLUDE_CAPI_CEF_LOAD_HANDLER_CAPI_H_	&lt;C: #define CEF_INCLUDE_CAPI_CEF_LOAD_HANDLER_CAPI_H_ 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">CEF_INCLUDE_CAPI_CEF_MENU_MODEL_CAPI_H_	&lt;C: #define CEF_INCLUDE_CAPI_CEF_MENU_MODEL_CAPI_H_ 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">CEF_INCLUDE_CAPI_CEF_MENU_MODEL_DELEGATE_CAPI_H_	&lt;C: #define CEF_INCLUDE_CAPI_CEF_MENU_MODEL_DELEGATE_CAPI_H_ 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">CEF_INCLUDE_CAPI_CEF_NAVIGATION_ENTRY_CAPI_H_	&lt;C: #define CEF_INCLUDE_CAPI_CEF_NAVIGATION_ENTRY_CAPI_H_ 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">CEF_INCLUDE_CAPI_CEF_PRINT_HANDLER_CAPI_H_	&lt;C: #define CEF_INCLUDE_CAPI_CEF_PRINT_HANDLER_CAPI_H_ 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">CEF_INCLUDE_CAPI_CEF_PRINT_SETTINGS_CAPI_H_	&lt;C: #define CEF_INCLUDE_CAPI_CEF_PRINT_SETTINGS_CAPI_H_ 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">CEF_INCLUDE_CAPI_CEF_PROCESS_MESSAGE_CAPI_H_	&lt;C: #define CEF_INCLUDE_CAPI_CEF_PROCESS_MESSAGE_CAPI_H_ 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">CEF_INCLUDE_CAPI_CEF_RENDER_HANDLER_CAPI_H_	&lt;C: #define CEF_INCLUDE_CAPI_CEF_RENDER_HANDLER_CAPI_H_ 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">CEF_INCLUDE_CAPI_CEF_RENDER_PROCESS_HANDLER_CAPI_H_	&lt;C: #define CEF_INCLUDE_CAPI_CEF_RENDER_PROCESS_HANDLER_CAPI_H_ 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">CEF_INCLUDE_CAPI_CEF_REQUEST_CAPI_H_	&lt;C: #define CEF_INCLUDE_CAPI_CEF_REQUEST_CAPI_H_ 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">CEF_INCLUDE_CAPI_CEF_REQUEST_CONTEXT_CAPI_H_	&lt;C: #define CEF_INCLUDE_CAPI_CEF_REQUEST_CONTEXT_CAPI_H_ 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">CEF_INCLUDE_CAPI_CEF_REQUEST_CONTEXT_HANDLER_CAPI_H_	&lt;C: #define CEF_INCLUDE_CAPI_CEF_REQUEST_CONTEXT_HANDLER_CAPI_H_ 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">CEF_INCLUDE_CAPI_CEF_REQUEST_HANDLER_CAPI_H_	&lt;C: #define CEF_INCLUDE_CAPI_CEF_REQUEST_HANDLER_CAPI_H_ 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">CEF_INCLUDE_CAPI_CEF_RESOURCE_BUNDLE_HANDLER_CAPI_H_	&lt;C: #define CEF_INCLUDE_CAPI_CEF_RESOURCE_BUNDLE_HANDLER_CAPI_H_ 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">CEF_INCLUDE_CAPI_CEF_RESOURCE_HANDLER_CAPI_H_	&lt;C: #define CEF_INCLUDE_CAPI_CEF_RESOURCE_HANDLER_CAPI_H_ 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">CEF_INCLUDE_CAPI_CEF_RESPONSE_CAPI_H_	&lt;C: #define CEF_INCLUDE_CAPI_CEF_RESPONSE_CAPI_H_ 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">CEF_INCLUDE_CAPI_CEF_RESPONSE_FILTER_CAPI_H_	&lt;C: #define CEF_INCLUDE_CAPI_CEF_RESPONSE_FILTER_CAPI_H_ 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">CEF_INCLUDE_CAPI_CEF_SCHEME_CAPI_H_	&lt;C: #define CEF_INCLUDE_CAPI_CEF_SCHEME_CAPI_H_ 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">CEF_INCLUDE_CAPI_CEF_SSL_INFO_CAPI_H_	&lt;C: #define CEF_INCLUDE_CAPI_CEF_SSL_INFO_CAPI_H_ 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">CEF_INCLUDE_CAPI_CEF_SSL_STATUS_CAPI_H_	&lt;C: #define CEF_INCLUDE_CAPI_CEF_SSL_STATUS_CAPI_H_ 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">CEF_INCLUDE_CAPI_CEF_STREAM_CAPI_H_	&lt;C: #define CEF_INCLUDE_CAPI_CEF_STREAM_CAPI_H_ 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">CEF_INCLUDE_CAPI_CEF_STRING_VISITOR_CAPI_H_	&lt;C: #define CEF_INCLUDE_CAPI_CEF_STRING_VISITOR_CAPI_H_ 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">CEF_INCLUDE_CAPI_CEF_TASK_CAPI_H_	&lt;C: #define CEF_INCLUDE_CAPI_CEF_TASK_CAPI_H_ 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">CEF_INCLUDE_CAPI_CEF_V8_CAPI_H_	&lt;C: #define CEF_INCLUDE_CAPI_CEF_V8_CAPI_H_ 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">CEF_INCLUDE_CAPI_CEF_VALUES_CAPI_H_	&lt;C: #define CEF_INCLUDE_CAPI_CEF_VALUES_CAPI_H_ 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">CEF_INCLUDE_CAPI_CEF_WEB_PLUGIN_CAPI_H_	&lt;C: #define CEF_INCLUDE_CAPI_CEF_WEB_PLUGIN_CAPI_H_ 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">CEF_INCLUDE_CAPI_CEF_X509_CERTIFICATE_CAPI_H_	&lt;C: #define CEF_INCLUDE_CAPI_CEF_X509_CERTIFICATE_CAPI_H_ 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">CEF_INCLUDE_INTERNAL_CEF_EXPORT_H_	&lt;C: #define CEF_INCLUDE_INTERNAL_CEF_EXPORT_H_ 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">CEF_INCLUDE_INTERNAL_CEF_STRING_H_	&lt;C: #define CEF_INCLUDE_INTERNAL_CEF_STRING_H_ 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">CEF_INCLUDE_INTERNAL_CEF_STRING_LIST_H_	&lt;C: #define CEF_INCLUDE_INTERNAL_CEF_STRING_LIST_H_ 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">CEF_INCLUDE_INTERNAL_CEF_STRING_MAP_H_	&lt;C: #define CEF_INCLUDE_INTERNAL_CEF_STRING_MAP_H_ 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">CEF_INCLUDE_INTERNAL_CEF_STRING_MULTIMAP_H_	&lt;C: #define CEF_INCLUDE_INTERNAL_CEF_STRING_MULTIMAP_H_ 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">CEF_INCLUDE_INTERNAL_CEF_STRING_TYPES_H_	&lt;C: #define CEF_INCLUDE_INTERNAL_CEF_STRING_TYPES_H_ 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">CEF_INCLUDE_INTERNAL_CEF_TIME_H_	&lt;C: #define CEF_INCLUDE_INTERNAL_CEF_TIME_H_ 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">CEF_INCLUDE_INTERNAL_CEF_TYPES_H_	&lt;C: #define CEF_INCLUDE_INTERNAL_CEF_TYPES_H_ 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">CEF_INCLUDE_INTERNAL_CEF_TYPES_WIN_H_	&lt;C: #define CEF_INCLUDE_INTERNAL_CEF_TYPES_WIN_H_ 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">CEF_INCLUDE_INTERNAL_CEF_TYPES_WRAPPERS_H_	&lt;C: #define CEF_INCLUDE_INTERNAL_CEF_TYPES_WRAPPERS_H_ 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">CEF_INCLUDE_INTERNAL_CEF_WIN_H_	&lt;C: #define CEF_INCLUDE_INTERNAL_CEF_WIN_H_ 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">CEF_STRING_TYPE_UTF16	&lt;C: #define CEF_STRING_TYPE_UTF16 1	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">CHAR_BIT	&lt;C: #define CHAR_BIT __CHAR_BIT__	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">CHAR_MAX	&lt;C: #define CHAR_MAX SCHAR_MAX	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">CHAR_MIN	&lt;C: #define CHAR_MIN SCHAR_MIN	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">CW_USEDEFAULT	&lt;C: #define CW_USEDEFAULT  0x80000000	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">CefCursorHandle	&lt;C: #define CefCursorHandle cef_cursor_handle_t	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">CefEventHandle	&lt;C: #define CefEventHandle cef_event_handle_t	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">INTMAX_MAX	&lt;C: #define INTMAX_MAX __INTMAX_MAX__	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">INTMAX_MIN	&lt;C: #define INTMAX_MIN (-INTMAX_MAX-1)	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">MB_LEN_MAX	&lt;C: #define MB_LEN_MAX 1	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">NULL	&lt;C: #define NULL ((void*)0)	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">OS_WIN	&lt;C: #define OS_WIN 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">OVERRIDE	&lt;C: #define OVERRIDE 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">RV_CANCEL	&lt;C: #define RV_CANCEL 0 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">RV_CONTINUE	&lt;C: #define RV_CONTINUE 1	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">RV_CONTINUE_ASYNC	&lt;C: #define RV_CONTINUE_ASYNC 2	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">SCHAR_MAX	&lt;C: #define SCHAR_MAX __SCHAR_MAX__	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">SCHAR_MIN	&lt;C: #define SCHAR_MIN (-SCHAR_MAX-1)	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">SHRT_MAX	&lt;C: #define SHRT_MAX __SHRT_MAX__	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">SHRT_MIN	&lt;C: #define SHRT_MIN (-SHRT_MAX-1)	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">SWP_ASYNCWINDOWPOS	&lt;C: #define SWP_ASYNCWINDOWPOS 	0x4000	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">SWP_NOACTIVATE	&lt;C: #define SWP_NOACTIVATE 	0x0010	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">SWP_NOMOVE	&lt;C: #define SWP_NOMOVE 	0x0002	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">SWP_NOREDRAW	&lt;C: #define SWP_NOREDRAW 	0x0008	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">SWP_NOZORDER	&lt;C: #define SWP_NOZORDER 0x0004	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">UCHAR_MAX	&lt;C: #define UCHAR_MAX (SCHAR_MAX*2+1)	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">WARN_UNUSED_RESULT	&lt;C: #define WARN_UNUSED_RESULT 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">WCHAR_T_IS_UTF16	&lt;C: #define WCHAR_T_IS_UTF16 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">WS_BORDER	&lt;C: #define WS_BORDER 8388608	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">WS_CAPTION	&lt;C: #define WS_CAPTION 12582912	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">WS_CHILD	&lt;C: #define WS_CHILD 1073741824	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">WS_CHILDWINDOW	&lt;C: #define WS_CHILDWINDOW 1073741824	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">WS_CLIPCHILDREN	&lt;C: #define WS_CLIPCHILDREN 33554432	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">WS_CLIPSIBLINGS	&lt;C: #define WS_CLIPSIBLINGS 67108864	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">WS_DISABLED	&lt;C: #define WS_DISABLED 134217728	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">WS_DLGFRAME	&lt;C: #define WS_DLGFRAME 4194304	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">WS_GROUP	&lt;C: #define WS_GROUP 131072	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">WS_HSCROLL	&lt;C: #define WS_HSCROLL 1048576	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">WS_ICONIC	&lt;C: #define WS_ICONIC 536870912	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">WS_MAXIMIZE	&lt;C: #define WS_MAXIMIZE 16777216	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">WS_MAXIMIZEBOX	&lt;C: #define WS_MAXIMIZEBOX 65536	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">WS_MINIMIZE	&lt;C: #define WS_MINIMIZE 536870912	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">WS_MINIMIZEBOX	&lt;C: #define WS_MINIMIZEBOX 131072	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">WS_OVERLAPPED	&lt;C: #define WS_OVERLAPPED 0	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">WS_OVERLAPPEDWINDOW	&lt;C: #define WS_OVERLAPPEDWINDOW 13565952	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">WS_POPUP	&lt;C: #define WS_POPUP 2147483648	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">WS_POPUPWINDOW	&lt;C: #define WS_POPUPWINDOW 2156396544	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">WS_SIZEBOX	&lt;C: #define WS_SIZEBOX 262144	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">WS_SYSMENU	&lt;C: #define WS_SYSMENU 524288	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">WS_TABSTOP	&lt;C: #define WS_TABSTOP 65536	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">WS_THICKFRAME	&lt;C: #define WS_THICKFRAME 262144	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">WS_TILED	&lt;C: #define WS_TILED 0	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">WS_TILEDWINDOW	&lt;C: #define WS_TILEDWINDOW 13565952	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">WS_VISIBLE	&lt;C: #define WS_VISIBLE 268435456	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">WS_VSCROLL	&lt;C: #define WS_VSCROLL 2097152	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_ANSI_STDDEF_H	&lt;C: #define _ANSI_STDDEF_H 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_BSD_PTRDIFF_T_	&lt;C: #define _BSD_PTRDIFF_T_ 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_BSD_SIZE_T_	&lt;C: #define _BSD_SIZE_T_ 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_BSD_SIZE_T_DEFINED_	&lt;C: #define _BSD_SIZE_T_DEFINED_ 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_CRTIMP	&lt;C: #define _CRTIMP 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_GCC_LIMITS_H_	&lt;C: #define _GCC_LIMITS_H_ 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_GCC_PTRDIFF_T	&lt;C: #define _GCC_PTRDIFF_T 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_GCC_SIZE_T	&lt;C: #define _GCC_SIZE_T 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_GCC_STDINT_H	&lt;C: #define _GCC_STDINT_H 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_GCC_WCHAR_T	&lt;C: #define _GCC_WCHAR_T 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_GCC_WRAP_STDINT_H	&lt;C: #define _GCC_WRAP_STDINT_H 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_INT32	&lt;C: #define _INT32 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_LIMITS_H___	&lt;C: #define _LIMITS_H___ 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_PTRDIFF_T	&lt;C: #define _PTRDIFF_T 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_PTRDIFF_T_	&lt;C: #define _PTRDIFF_T_ 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_PTRDIFF_T_DECLARED	&lt;C: #define _PTRDIFF_T_DECLARED 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_SIZET_	&lt;C: #define _SIZET_ 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_SIZE_T	&lt;C: #define _SIZE_T 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_SIZE_T_	&lt;C: #define _SIZE_T_ 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_SIZE_T_DECLARED	&lt;C: #define _SIZE_T_DECLARED 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_SIZE_T_DEFINED	&lt;C: #define _SIZE_T_DEFINED 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_SIZE_T_DEFINED_	&lt;C: #define _SIZE_T_DEFINED_ 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_STDDEF_H	&lt;C: #define _STDDEF_H 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_STDDEF_H_	&lt;C: #define _STDDEF_H_ 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_SYS_SIZE_T_H	&lt;C: #define _SYS_SIZE_T_H 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_T_PTRDIFF	&lt;C: #define _T_PTRDIFF 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_T_PTRDIFF_	&lt;C: #define _T_PTRDIFF_ 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_T_SIZE	&lt;C: #define _T_SIZE 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_T_SIZE_	&lt;C: #define _T_SIZE_ 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_T_WCHAR	&lt;C: #define _T_WCHAR 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_T_WCHAR_	&lt;C: #define _T_WCHAR_ 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_UINT32	&lt;C: #define _UINT32 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_WCHAR_T	&lt;C: #define _WCHAR_T 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_WCHAR_T_	&lt;C: #define _WCHAR_T_ 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_WCHAR_T_DECLARED	&lt;C: #define _WCHAR_T_DECLARED 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_WCHAR_T_DEFINED	&lt;C: #define _WCHAR_T_DEFINED 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_WCHAR_T_DEFINED_	&lt;C: #define _WCHAR_T_DEFINED_ 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">_WCHAR_T_H	&lt;C: #define _WCHAR_T_H 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">__INT_WCHAR_T_H	&lt;C: #define __INT_WCHAR_T_H 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">__LINE__	&lt;C: #define __LINE__ 0	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">__MINGW_NOTHROW	&lt;C: #define __MINGW_NOTHROW 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">__PTRDIFF_T	&lt;C: #define __PTRDIFF_T 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">__PTRDIFF_TYPE__	&lt;C: #define __PTRDIFF_TYPE__ long int	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">__SIZE_T	&lt;C: #define __SIZE_T 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">__SIZE_TYPE__	&lt;C: #define __SIZE_TYPE__ long unsigned int	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">__SIZE_T__	&lt;C: #define __SIZE_T__ 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">__STDC__	&lt;C: #define __STDC__ 1	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">__TIME__	&lt;C: #define __TIME__ "18:13:01"	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">__WCHAR_T	&lt;C: #define __WCHAR_T 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">__WCHAR_TYPE__	&lt;C: #define __WCHAR_TYPE__ int	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">__WCHAR_T__	&lt;C: #define __WCHAR_T__ 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">___int_ptrdiff_t_h	&lt;C: #define ___int_ptrdiff_t_h 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">___int_size_t_h	&lt;C: #define ___int_size_t_h 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">___int_wchar_t_h	&lt;C: #define ___int_wchar_t_h 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">__cdecl	&lt;C: #define __cdecl 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">__size_t	&lt;C: #define __size_t 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">__size_t__	&lt;C: #define __size_t__ 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">__wchar_t__	&lt;C: #define __wchar_t__ 	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_cursor_handle_t	&lt;C: #define cef_cursor_handle_t HCURSOR	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_event_handle_t	&lt;C: #define cef_event_handle_t MSG*	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_string_clear	&lt;C: #define cef_string_clear cef_string_utf16_clear	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_string_copy	&lt;C: #define cef_string_copy cef_string_utf16_copy	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_string_from_ascii	&lt;C: #define cef_string_from_ascii cef_string_ascii_to_utf16	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_string_from_utf16	&lt;C: #define cef_string_from_utf16 cef_string_utf16_copy	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_string_from_utf8	&lt;C: #define cef_string_from_utf8 cef_string_utf8_to_utf16	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_string_from_wide	&lt;C: #define cef_string_from_wide cef_string_wide_to_utf16	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_string_set	&lt;C: #define cef_string_set cef_string_utf16_set	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_string_to_utf16	&lt;C: #define cef_string_to_utf16 cef_string_utf16_copy	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_string_to_utf8	&lt;C: #define cef_string_to_utf8 cef_string_utf16_to_utf8	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_string_to_wide	&lt;C: #define cef_string_to_wide cef_string_utf16_to_wide	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_string_userfree_alloc	&lt;C: #define cef_string_userfree_alloc cef_string_userfree_utf16_alloc	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_string_userfree_free	&lt;C: #define cef_string_userfree_free cef_string_userfree_utf16_free	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">cef_window_handle_t	&lt;C: #define cef_window_handle_t HWND	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">kNullCursorHandle	&lt;C: #define kNullCursorHandle NULL	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">kNullEventHandle	&lt;C: #define kNullEventHandle NULL	&gt;</body>

<body package="ChromiumEmbeddedFramework-Base">kNullWindowHandle	&lt;C: #define kNullWindowHandle NULL	&gt;</body>
</methods>

<methods>
<class-id>CEF.LibChromium class</class-id> <category>instance creation</category>

<body package="ChromiumEmbeddedFramework-Base">current	current isNil 		ifTrue: [ current := self new ].	^ current</body>

<body package="ChromiumEmbeddedFramework-Base">flushCurrent	current := nil.</body>
</methods>

<methods>
<class-id>Core.Integer</class-id> <category>converting</category>

<body package="ChromiumEmbeddedFramework-Base">cefAsBoolean	^ self &gt; 0</body>
</methods>

<methods>
<class-id>Core.String</class-id> <category>converting</category>

<body package="ChromiumEmbeddedFramework-Base">asCefDatum	| wideString cefString lib ok |	wideString := self gcCopyToHeapEncoding: #ucs_2.	lib := CEF.LibChromium current.	cefString := lib cef_string_utf16_t gcMalloc.	cefString zeroFill.	ok := lib cef_string_wide_to_utf16: wideString with: self size with: cefString.	ok = 0 ifTrue: [ self error: 'String conversion failed' ].	^ cefString contents</body>
</methods>

<methods>
<class-id>External.CPointer</class-id> <category>accessing</category>

<body package="ChromiumEmbeddedFramework-Base">cefCall: memberFunctionName 	^ self cefCall: memberFunctionName arguments: #()</body>

<body package="ChromiumEmbeddedFramework-Base">cefCall: memberFunctionName arguments: arguments 	| function cefArguments |	function := self cefMemberAt: memberFunctionName.	cefArguments := Array new: arguments size + 1.	cefArguments at: 1 put: self.	arguments keysAndValuesDo: [: i : arg | cefArguments at: i + 1 put: arg asCefDatum ].	^ function call: cefArguments</body>

<body package="ChromiumEmbeddedFramework-Base">cefCall: memberFunctionName with: anArgument	^ self cefCall: memberFunctionName arguments: (Array with: anArgument)</body>

<body package="ChromiumEmbeddedFramework-Base">cefCall: memberFunctionName with: anArgument1 with: anArgument2	^ self cefCall: memberFunctionName arguments: (Array with: anArgument1 with: anArgument2)</body>
</methods>

<methods>
<class-id>External.CPointer</class-id> <category>testing</category>

<body package="ChromiumEmbeddedFramework-Base">cefIsValid	^ self isValid</body>
</methods>

<methods>
<class-id>Core.False</class-id> <category>converting</category>

<body package="ChromiumEmbeddedFramework-Base">asCefDatum	^ 0</body>
</methods>

<methods>
<class-id>Core.Object</class-id> <category>converting</category>

<body package="ChromiumEmbeddedFramework-Base">asCefDatum	^ self</body>
</methods>

<methods>
<class-id>Core.Object</class-id> <category>accessing</category>

<body package="ChromiumEmbeddedFramework-Base">cefAsSmalltalkArg	" try to wrap / convert this object into a Smalltalk object "		^ self</body>

<body package="ChromiumEmbeddedFramework-Base">cefReleaseCallbackArg	" sent after a callback has finished "</body>
</methods>

<methods>
<class-id>External.CDatum</class-id> <category>accessing</category>

<body package="ChromiumEmbeddedFramework-Base">cefAddRef	" hook for generic reference counting "</body>
</methods>

<methods>
<class-id>External.CDatum</class-id> <category>converting</category>

<body package="ChromiumEmbeddedFramework-Base">cefAsString	| byteLength stringData stringPointer |	self cefIsValid 		ifFalse: [ ^ nil ].	byteLength := ( self cefMemberAt: #length ) * 2.	stringPointer := self cefMemberAt: #str.	stringData := ByteArray new: byteLength.	stringPointer copyAt: 0 to: stringData size: byteLength startingAt: 1.	self type == CEF.LibChromium current cef_string_userfree_t 		ifTrue: [ CEF.LibChromium current cef_string_userfree_utf16_free: self ].	^ stringData asStringEncoding: #utf16</body>
</methods>

<methods>
<class-id>External.CDatum</class-id> <category>testing</category>

<body package="ChromiumEmbeddedFramework-Base">cefIsValid	^ true</body>
</methods>

<methods>
<class-id>External.CDatum</class-id> <category>accessing</category>

<body package="ChromiumEmbeddedFramework-Base">cefMemberAt: key 	MemberNotFoundError raiseSignal: self printString, ' has no members'</body>

<body package="ChromiumEmbeddedFramework-Base">cefMemberAt: key ifAbsent: absentBlock	^ absentBlock value</body>

<body package="ChromiumEmbeddedFramework-Base">cefMemberAt: key put: value	MemberNotFoundError raiseSignal: self printString, ' has no members'</body>

<body package="ChromiumEmbeddedFramework-Base">cefRemoveRef	" hook for generic reference counting "</body>
</methods>

<methods>
<class-id>External.CProcedurePointer</class-id> <category>testing</category>

<body package="ChromiumEmbeddedFramework-Base">cefIsValid	^self referentAddress notNil and: [ self isNull not ]</body>
</methods>

<methods>
<class-id>Graphics.Rectangle</class-id> <category>accessing</category>

<body package="ChromiumEmbeddedFramework-Base">setCefRect: cefRect	cefRect cefMemberAt: #x put: self left.	cefRect cefMemberAt: #y put: self top.	cefRect cefMemberAt: #width put: self width.	cefRect cefMemberAt: #height put: self height.</body>
</methods>

<methods>
<class-id>External.CEnumerationType</class-id> <category>accessing</category>

<body package="ChromiumEmbeddedFramework-Base">cefNameOf: aValue	self keysAndValuesDo: [ : key : enumValue |		enumValue = aValue ifTrue: [ ^ key ].		].	^ nil</body>
</methods>

<methods>
<class-id>External.CCompositePointer</class-id> <category>accessing</category>

<body package="ChromiumEmbeddedFramework-Base">cefAddRef	[ self cefBasePointer ifNotNil: [: base | base cefCall: #'add_ref' ]] 		on: MemberNotFoundError		do: [: ex | ].</body>

<body package="ChromiumEmbeddedFramework-Base">cefBasePointer	^ [( self cefMemberAt: #base ifAbsent: [ nil ]) ifNotNil: 			[: base |				" calls expect a pointer to base  "				base type newPointerToAddress: self referentAddress			]	] on: MemberNotFoundError do: [: ex | ]</body>

<body package="ChromiumEmbeddedFramework-Base">cefCallbackNamed: memberName set: callbackBlock 	^CCallback cefNamed: memberName of: self set: callbackBlock</body>

<body package="ChromiumEmbeddedFramework-Base">cefMemberAt: key	^ self memberAt: key</body>

<body package="ChromiumEmbeddedFramework-Base">cefMemberAt: key ifAbsent: absentBlock	^ [ self memberAt: key ] on: MemberNotFoundError do: absentBlock</body>

<body package="ChromiumEmbeddedFramework-Base">cefMemberAt: key put: value	self memberAt: key put: value</body>

<body package="ChromiumEmbeddedFramework-Base">cefRemoveRef	[ self cefBasePointer ifNotNil: [: base | base cefCall: #release ]] 		on: MemberNotFoundError		do: [: ex | ].</body>
</methods>

<methods>
<class-id>Core.True</class-id> <category>converting</category>

<body package="ChromiumEmbeddedFramework-Base">asCefDatum	^ 1</body>
</methods>

<methods>
<class-id>OS.Win32SystemSupport</class-id> <category>accessing</category>

<body package="ChromiumEmbeddedFramework-Base">cefGetHInstance	^ self cefGetModuleHandle: 0</body>
</methods>

<methods>
<class-id>External.CCallback class</class-id> <category>instance creation</category>

<body package="ChromiumEmbeddedFramework-Base">cefNamed: memberName of: struct set: callbackBlock 	| callbackType callback |	callbackType := CTypedefType new name: memberName;			type: ( struct cefMemberAt: memberName ) type;			yourself.	callback := CCallback do: callbackBlock ofType: callbackType.	struct cefMemberAt: memberName put: callback.	^ callback</body>
</methods>

<methods>
<class-id>External.CComposite</class-id> <category>accessing</category>

<body package="ChromiumEmbeddedFramework-Base">cefAsSmalltalkArg	| lib |	lib := CEF.LibChromium current.	self type = lib cef_string_utf16_t 		ifTrue: [ ^ self cefAsString ].	self type = lib cef_string_userfree_t 		ifTrue: [ ^ self cefAsString ].	self type = lib _cef_string_utf16_t 		ifTrue: [ ^ self cefAsString ].	^ super cefAsSmalltalkArg</body>

<body package="ChromiumEmbeddedFramework-Base">cefCallbackNamed: memberName set: callbackBlock 	" don't forget that this is most likely a copy of some struct "		^ CCallback cefNamed: memberName of: self set: callbackBlock</body>

<body package="ChromiumEmbeddedFramework-Base">cefMemberAt: key	^ self memberAt: key</body>

<body package="ChromiumEmbeddedFramework-Base">cefMemberAt: key ifAbsent: absentBlock	^ [ self memberAt: key ] on: MemberNotFoundError do: absentBlock</body>

<body package="ChromiumEmbeddedFramework-Base">cefMemberAt: key put: value	self memberAt: key put: value</body>
</methods>

<do-it>"Imported Classes:"</do-it>

<do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it>

<class>
<name>Object</name>
<environment>Core</environment>
<super></super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars></inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category>Kernel-Objects</category>
<attributes>
<package>Kernel-Objects</package>
</attributes>
</class>

<class>
<name>Integer</name>
<environment>Core</environment>
<super>Core.Number</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars></inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category>Magnitude-Numbers</category>
<attributes>
<package>Magnitude-Numbers</package>
</attributes>
</class>

<class>
<name>True</name>
<environment>Core</environment>
<super>Core.Boolean</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars></inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category>Kernel-Objects</category>
<attributes>
<package>Kernel-Objects</package>
</attributes>
</class>

<class>
<name>CDatum</name>
<environment>External</environment>
<super>Core.Object</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>theDatum type </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category>External-Data</category>
<attributes>
<package>External-Data</package>
</attributes>
</class>

<class>
<name>CPointer</name>
<environment>External</environment>
<super>External.CDatum</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars></inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category>External-Data</category>
<attributes>
<package>External-Data</package>
</attributes>
</class>

<class>
<name>CCompositePointer</name>
<environment>External</environment>
<super>External.CPointer</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars></inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category>External-Data</category>
<attributes>
<package>External-Data</package>
</attributes>
</class>

<class>
<name>Rectangle</name>
<environment>Graphics</environment>
<super>Graphics.Geometric</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>origin corner </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category>Graphics-Geometry</category>
<attributes>
<package>Graphics-Geometry</package>
</attributes>
</class>

<class>
<name>CProcedurePointer</name>
<environment>External</environment>
<super>External.CDatum</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars></inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category>External-Data</category>
<attributes>
<package>External-Data</package>
</attributes>
</class>

<class>
<name>ExternalInterface</name>
<environment>External</environment>
<super>Core.Object</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars></inst-vars>
<class-inst-vars>includeFiles includeDirectories libraryFiles libraryDirectories virtual optimizationLevel </class-inst-vars>
<imports>
			private Kernel.OpcodePool.*
			</imports>
<category>External-Interface</category>
<attributes>
<package>External-Interface</package>
</attributes>
</class>

<class>
<name>False</name>
<environment>Core</environment>
<super>Core.Boolean</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars></inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category>Kernel-Objects</category>
<attributes>
<package>Kernel-Objects</package>
</attributes>
</class>

<class>
<name>Win32SystemSupport</name>
<environment>OS</environment>
<super>OS.OSSystemSupport</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars></inst-vars>
<class-inst-vars></class-inst-vars>
<imports>
			private OS.Win32SystemSupportDictionary.*
			</imports>
<category>OS-Support</category>
<attributes>
<includeFiles></includeFiles>
<includeDirectories></includeDirectories>
<libraryFiles><item>kernel32.dll</item> <item>gdi32.dll</item> <item>advapi32.dll</item> <item>user32.dll</item></libraryFiles>
<libraryDirectories></libraryDirectories>
<beVirtual>false</beVirtual>
<optimizationLevel>full</optimizationLevel>
<package>OS-PC</package>
</attributes>
</class>

<class>
<name>String</name>
<environment>Core</environment>
<super>Core.CharacterArray</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars></inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category>Collections-Text</category>
<attributes>
<package>Collections-Text</package>
</attributes>
</class>

<class>
<name>CEnumerationType</name>
<environment>External</environment>
<super>External.CCompoundType</super>
<private>false</private>
<indexed-type>objects</indexed-type>
<inst-vars></inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category>External-Types</category>
<attributes>
<package>External-Types</package>
</attributes>
</class>

<class>
<name>CComposite</name>
<environment>External</environment>
<super>External.CDatum</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars></inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category>External-Data</category>
<attributes>
<package>External-Data</package>
</attributes>
</class>

</st-source>
